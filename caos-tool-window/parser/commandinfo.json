{"namespaces": [], "variants": {"c1": {"v_TOUC": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Determines whether the two given agents are touching.  Returns 0 (if not) or 1 (if so).\n", "arguments": [{"name": "first", "type": "agent"}, {"name": "second", "type": "agent"}], "name": "TOUC", "match": "TOUC", "type": "integer", "syntaxstring": "TOUC (integer) first (agent) second (agent)", "uniquename": "v_TOUC", "evalcost": {"default": 0, "c1": 0, "c2": 0}, "implementation": "caosVM::v_TOUC", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_RTAR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets TARG to a random agent with the given family/genus/species.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "RTAR", "match": "RTAR", "type": "command", "syntaxstring": "RTAR (command) family (integer) genus (integer) species (integer)", "uniquename": "c_RTAR", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_RTAR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_NEW_SIMP": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "sprite_file", "type": "bareword"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "clone", "type": "integer"}], "name": "NEW: SIMP", "match": "SIMP", "type": "command", "syntaxstring": "NEW: SIMP (command) sprite_file (bareword) image_count (integer) first_image (integer) plane (integer) clone (integer)", "uniquename": "c_NEW_SIMP", "namespace": "new:", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_NEW_SIMP_c2", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_NEW_SIMP_c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_NEW_COMP": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "sprite_file", "type": "bareword"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "clone", "type": "integer"}], "name": "NEW: COMP", "match": "COMP", "type": "command", "syntaxstring": "NEW: COMP (command) sprite_file (bareword) image_count (integer) first_image (integer) clone (integer)", "uniquename": "c_NEW_COMP", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_COMP_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_NEW_COMP_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_NEW_VHCL": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "sprite_file", "type": "bareword"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}], "name": "NEW: VHCL", "match": "VHCL", "type": "command", "syntaxstring": "NEW: VHCL (command) sprite_file (bareword) image_count (integer) first_image (integer)", "uniquename": "c_NEW_VHCL", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_VHCL_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_NEW_VHCL_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_NEW_BKBD": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "sprite_file", "type": "bareword"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "background_colour", "type": "integer"}, {"name": "chalk_colour", "type": "integer"}, {"name": "alias_colour", "type": "integer"}, {"name": "textx", "type": "integer"}, {"name": "texty", "type": "integer"}], "name": "NEW: BKBD", "match": "BKBD", "type": "command", "syntaxstring": "NEW: BKBD (command) sprite_file (bareword) image_count (integer) first_image (integer) background_colour (integer) chalk_colour (integer) alias_colour (integer) textx (integer) texty (integer)", "uniquename": "c_NEW_BKBD", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_BKBD", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -8}, "v_TARG": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns TARG, the currently-targeted agent.\n", "arguments": [], "name": "TARG", "match": "TARG", "type": "agent", "syntaxstring": "TARG (agent)", "uniquename": "v_TARG", "evalcost": {"default": 0}, "implementation": "caosVM::v_TARG", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_OWNR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns OWNR, the agent that is running the script.\n", "arguments": [], "name": "OWNR", "match": "OWNR", "type": "agent", "syntaxstring": "OWNR (agent)", "uniquename": "v_OWNR", "evalcost": {"default": 0, "c1": 0, "c2": 0}, "implementation": "caosVM::v_OWNR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_POSE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the displayed sprite of TARG to the frame in the sprite file with the given integer.\n", "arguments": [{"name": "pose", "type": "integer"}], "name": "POSE", "match": "POSE", "type": "command", "syntaxstring": "POSE (command) pose (integer)", "uniquename": "c_POSE", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_POSE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ATTR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Attributes of the TARG agent.\n", "arguments": [], "name": "ATTR", "match": "ATTR", "type": "variable", "syntaxstring": "ATTR (variable)", "uniquename": "v_ATTR", "evalcost": {"default": 0}, "implementation": "caosVM::v_ATTR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_ATTR", "stackdelta": 1}, "c_TICK": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Initiates the agent timer-- the Timer script will then be run once every tickrate ticks.\nSetting tickrate to zero will stop the timer.\n", "arguments": [{"name": "tickrate", "type": "integer"}], "name": "TICK", "match": "TICK", "type": "command", "syntaxstring": "TICK (command) tickrate (integer)", "uniquename": "c_TICK", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_TICK", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TARG": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets TARG (the target agent) to the given agent.\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "TARG", "match": "TARG", "type": "command", "syntaxstring": "TARG (command) agent (agent)", "uniquename": "c_TARG", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_TARG", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FROM": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the agent that sent the message being processed, or NULL if no agent was involved.\n", "arguments": [], "name": "FROM", "match": "FROM", "type": "agent", "syntaxstring": "FROM (agent)", "uniquename": "v_FROM", "evalcost": {"default": 0}, "implementation": "caosVM::v_FROM", "pragma": {"variants": "c1 c2 cv sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the number of the frame in the TARG part/agent's sprite file that is currently being displayed, or -1 if part# doesn't exist on a compound agent.\n", "arguments": [], "name": "POSE", "match": "POSE", "type": "integer", "syntaxstring": "POSE (integer)", "uniquename": "v_POSE", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_KILL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Destroys the agent in question. However, you cannot destroy PNTR.\nRemember, use DEAD first for Creatures!\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "KILL", "match": "KILL", "type": "command", "syntaxstring": "KILL (command) agent (agent)", "uniquename": "c_KILL", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_KILL", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ANIM": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the animation string for TARG, in the format '1234'.\nIf it ends with 'R', loops back to the beginning.\n", "arguments": [{"name": "animstring", "type": "string"}], "name": "ANIM", "match": "ANIM", "type": "command", "syntaxstring": "ANIM (command) animstring (string)", "uniquename": "c_ANIM", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_ANIM_c2", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_ANIM_c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_BASE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the frame in the TARG agent's spritefile that will be used as its base image.\nThis is relative to the first image set with one of the NEW: commands.\n", "arguments": [{"name": "index", "type": "integer"}], "name": "BASE", "match": "BASE", "type": "command", "syntaxstring": "BASE (command) index (integer)", "uniquename": "c_BASE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_BASE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_CARR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the agent that is carrying the OWNR agent.  If OWNR is not being carried, returns\nNULL.\n", "arguments": [], "name": "CARR", "match": "CARR", "type": "agent", "syntaxstring": "CARR (agent)", "uniquename": "v_CARR", "evalcost": {"default": 0}, "implementation": "caosVM::v_CARR_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::v_CARR_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_FMLY": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the family of the TARG agent.\n", "arguments": [], "name": "FMLY", "match": "FMLY", "type": "integer", "syntaxstring": "FMLY (integer)", "uniquename": "v_FMLY", "evalcost": {"default": 0}, "implementation": "caosVM::v_FMLY", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_GNUS": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the genus of the TARG agent.\n", "arguments": [], "name": "GNUS", "match": "GNUS", "type": "integer", "syntaxstring": "GNUS (integer)", "uniquename": "v_GNUS", "evalcost": {"default": 0}, "implementation": "caosVM::v_GNUS", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_SPCS": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the species of the TARG agent.\n", "arguments": [], "name": "SPCS", "match": "SPCS", "type": "integer", "syntaxstring": "SPCS (integer)", "uniquename": "v_SPCS", "evalcost": {"default": 0}, "implementation": "caosVM::v_SPCS", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_PNTR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the pointer agent (the Hand).\n", "arguments": [], "name": "PNTR", "match": "PNTR", "type": "agent", "syntaxstring": "PNTR (agent)", "uniquename": "v_PNTR", "evalcost": {"default": 0}, "implementation": "caosVM::v_PNTR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MESG_WRIT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sends a message of type message_id to the given agent.  FROM will be set to OWNR unless\nthere is no agent involved in sending the message.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "message_id", "type": "integer"}], "name": "MESG WRIT", "match": "WRIT", "type": "command", "syntaxstring": "MESG WRIT (command) agent (agent) message_id (integer)", "uniquename": "c_MESG_WRIT", "namespace": "mesg", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MESG_WRIT", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_TOTL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the total number of in-game agents matching the given family/genus/species.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "TOTL", "match": "TOTL", "type": "integer", "syntaxstring": "TOTL (integer) family (integer) genus (integer) species (integer)", "uniquename": "v_TOTL", "evalcost": {"default": 0}, "implementation": "caosVM::v_TOTL", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_OVER": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Waits (blocks the TARG agent) until the animation of the TARG agent or PART is over.\n", "arguments": [], "name": "OVER", "match": "OVER", "type": "command", "syntaxstring": "OVER (command)", "uniquename": "c_OVER", "evalcost": {"default": 1}, "implementation": "caosVM::c_OVER", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_POSL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the left side of TARG's bounding box.\n", "arguments": [], "name": "POSL", "match": "POSL", "type": "float", "syntaxstring": "POSL (float)", "uniquename": "v_POSL", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSL", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POST": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the top side of TARG's bounding box.\n", "arguments": [], "name": "POST", "match": "POST", "type": "float", "syntaxstring": "POST (float)", "uniquename": "v_POST", "evalcost": {"default": 0}, "implementation": "caosVM::v_POST", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the right side of TARG's bounding box.\n", "arguments": [], "name": "POSR", "match": "POSR", "type": "float", "syntaxstring": "POSR (float)", "uniquename": "v_POSR", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSB": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the bottom side of TARG's bounding box.\n", "arguments": [], "name": "POSB", "match": "POSB", "type": "float", "syntaxstring": "POSB (float)", "uniquename": "v_POSB", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSB", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WDTH": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the TARG agent's width.\n", "arguments": [], "name": "WDTH", "match": "WDTH", "type": "integer", "syntaxstring": "WDTH (integer)", "uniquename": "v_WDTH", "evalcost": {"default": 0}, "implementation": "caosVM::v_WDTH", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HGHT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the TARG agent's height.\n", "arguments": [], "name": "HGHT", "match": "HGHT", "type": "integer", "syntaxstring": "HGHT (integer)", "uniquename": "v_HGHT", "evalcost": {"default": 0}, "implementation": "caosVM::v_HGHT", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_DCOR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Turns the display of the TARG agent's physical core on and off. Gives a general idea of\nits size and location (including invisible agents).\n", "arguments": [{"name": "core_on", "type": "integer"}], "name": "DCOR", "match": "DCOR", "type": "command", "syntaxstring": "DCOR (command) core_on (integer)", "uniquename": "c_DCOR", "evalcost": {"default": 1}, "implementation": "caosVM::c_DCOR", "pragma": {"variants": "all"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DROP": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Causes the TARG agent to drop what it is carrying in a safe location.\n", "arguments": [], "name": "DROP", "match": "DROP", "type": "command", "syntaxstring": "DROP (command)", "uniquename": "c_DROP", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_DROP", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ACTV": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "ACTV", "match": "ACTV", "type": "variable", "syntaxstring": "ACTV (variable)", "uniquename": "v_ACTV", "evalcost": {"default": 0}, "implementation": "caosVM::v_ACTV", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::s_ACTV", "stackdelta": 1}, "c_SLIM": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "SLIM", "match": "SLIM", "type": "command", "syntaxstring": "SLIM (command)", "uniquename": "c_SLIM", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SLIM", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_BHVR": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "click", "type": "integer"}, {"name": "touch", "type": "integer"}], "name": "BHVR", "match": "BHVR", "type": "command", "syntaxstring": "BHVR (command) click (integer) touch (integer)", "uniquename": "c_BHVR", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_BHVR_c2", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_BHVR_c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_SETV_CLAS": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Set family, genus and species of the target agent. Creatures 1 era command.\n", "arguments": [{"name": "identifier", "type": "integer"}], "name": "SETV CLAS", "match": "CLAS", "type": "command", "syntaxstring": "SETV CLAS (command) identifier (integer)", "uniquename": "c_SETV_CLAS", "namespace": "setv", "evalcost": {"default": 1}, "implementation": "caosVM::c_SETV_CLAS", "pragma": {"variants": "c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_LIML": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "LIML", "match": "LIML", "type": "integer", "syntaxstring": "LIML (integer)", "uniquename": "v_LIML", "evalcost": {"default": 0}, "implementation": "caosVM::v_LIML", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_LIMT": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "LIMT", "match": "LIMT", "type": "integer", "syntaxstring": "LIMT (integer)", "uniquename": "v_LIMT", "evalcost": {"default": 0}, "implementation": "caosVM::v_LIMT", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_LIMR": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "LIMR", "match": "LIMR", "type": "integer", "syntaxstring": "LIMR (integer)", "uniquename": "v_LIMR", "evalcost": {"default": 0}, "implementation": "caosVM::v_LIMR", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_LIMB": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "LIMB", "match": "LIMB", "type": "integer", "syntaxstring": "LIMB (integer)", "uniquename": "v_LIMB", "evalcost": {"default": 0}, "implementation": "caosVM::v_LIMB_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::v_LIMB_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_OBJP": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "OBJP", "match": "OBJP", "type": "variable", "syntaxstring": "OBJP (variable)", "uniquename": "v_OBJP", "evalcost": {"default": 0}, "implementation": "caosVM::v_OBJP", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::s_OBJP", "stackdelta": 1}, "c_EDIT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Attach the target agent to the mouse cursor for positioning purposes.\n", "arguments": [], "name": "EDIT", "match": "EDIT", "type": "command", "syntaxstring": "EDIT (command)", "uniquename": "c_EDIT", "evalcost": {"default": 1}, "implementation": "caosVM::c_EDIT", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SYS_CMRA": {"filename": "caosVM_camera.cpp", "category": "cameras", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "SYS: CMRA", "match": "CMRA", "type": "command", "syntaxstring": "SYS: CMRA (command) x (integer) y (integer)", "uniquename": "c_SYS_CMRA", "namespace": "sys:", "evalcost": {"default": 1}, "implementation": "caosVM::c_SYS_CMRA", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_SYS_CAMT": {"filename": "caosVM_camera.cpp", "category": "cameras", "arguments": [], "name": "SYS: CAMT", "match": "CAMT", "type": "command", "syntaxstring": "SYS: CAMT (command)", "uniquename": "c_SYS_CAMT", "namespace": "sys:", "evalcost": {"default": 1}, "implementation": "caosVM::c_SYS_CAMT", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SYS_WTOP": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Move the main window to the front of the screen.\n", "arguments": [], "name": "SYS: WTOP", "match": "WTOP", "type": "command", "syntaxstring": "SYS: WTOP (command)", "uniquename": "c_SYS_WTOP", "namespace": "sys:", "evalcost": {"default": 1}, "implementation": "caosVM::c_SYS_WTOP", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PART": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Sets the part number of the TARGeted compound agent or vehicle to work on (ANIM/POSE use this,\namongst other commands).\n", "arguments": [{"name": "part_id", "type": "integer"}], "name": "PART", "match": "PART", "type": "command", "syntaxstring": "PART (command) part_id (integer)", "uniquename": "c_PART", "evalcost": {"default": 1}, "implementation": "caosVM::c_PART", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_NEW_PART": {"filename": "caosVM_compound.cpp", "category": "compound agents", "arguments": [{"name": "part", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "plane", "type": "integer"}], "name": "NEW: PART", "match": "PART", "type": "command", "syntaxstring": "NEW: PART (command) part (integer) x (integer) y (integer) first_image (integer) plane (integer)", "uniquename": "c_NEW_PART", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_PART", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_BBD_WORD": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Change the word at index to target blackboard, setting to the provided id and text.\n", "arguments": [{"name": "index", "type": "integer"}, {"name": "id", "type": "integer"}, {"name": "text", "type": "string"}], "name": "BBD: WORD", "match": "WORD", "type": "command", "syntaxstring": "BBD: WORD (command) index (integer) id (integer) text (string)", "uniquename": "c_BBD_WORD", "namespace": "bbd:", "evalcost": {"default": 1}, "implementation": "caosVM::c_BBD_WORD", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_BBD_SHOW": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "If show is 1, draw the current text onto part 0 of the target blackboard. If 0,\nremove it from the blackboard.\n", "arguments": [{"name": "show", "type": "integer"}], "name": "BBD: SHOW", "match": "SHOW", "type": "command", "syntaxstring": "BBD: SHOW (command) show (integer)", "uniquename": "c_BBD_SHOW", "namespace": "bbd:", "evalcost": {"default": 1}, "implementation": "caosVM::c_BBD_SHOW", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_BBD_EMIT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Broadcast the current word of the target blackboard. If audible is 1, broadcast\nto all nearby creatures. If 0, broadcast to all creatures looking at it.\n", "arguments": [{"name": "audible", "type": "integer"}], "name": "BBD: EMIT", "match": "EMIT", "type": "command", "syntaxstring": "BBD: EMIT (command) audible (integer)", "uniquename": "c_BBD_EMIT", "namespace": "bbd:", "evalcost": {"default": 1}, "implementation": "caosVM::c_BBD_EMIT", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_BBD_EDIT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "If allow is 1, switch target blackboard into editing mode, give it focus. If it\nis 0, remove focus from target blackboard.\n", "arguments": [{"name": "allow", "type": "integer"}], "name": "BBD: EDIT", "match": "EDIT", "type": "command", "syntaxstring": "BBD: EDIT (command) allow (integer)", "uniquename": "c_BBD_EDIT", "namespace": "bbd:", "evalcost": {"default": 1}, "implementation": "caosVM::c_BBD_EDIT", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SPOT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "arguments": [{"name": "spotno", "type": "integer"}, {"name": "left", "type": "integer"}, {"name": "top", "type": "integer"}, {"name": "right", "type": "integer"}, {"name": "bottom", "type": "integer"}], "name": "SPOT", "match": "SPOT", "type": "command", "syntaxstring": "SPOT (command) spotno (integer) left (integer) top (integer) right (integer) bottom (integer)", "uniquename": "c_SPOT", "evalcost": {"default": 1}, "implementation": "caosVM::c_SPOT", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_KNOB": {"filename": "caosVM_compound.cpp", "category": "compound agents", "arguments": [{"name": "function", "type": "integer"}, {"name": "spotno", "type": "integer"}], "name": "KNOB", "match": "KNOB", "type": "command", "syntaxstring": "KNOB (command) function (integer) spotno (integer)", "uniquename": "c_KNOB", "evalcost": {"default": 1}, "implementation": "caosVM::c_KNOB", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_OUTS": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Prints the given string to the output stream.  Does nothing when run inside a script.\n", "arguments": [{"name": "val", "type": "string"}], "name": "OUTS", "match": "OUTS", "type": "command", "syntaxstring": "OUTS (command) val (string)", "uniquename": "c_OUTS", "evalcost": {"default": 1}, "implementation": "caosVM::c_OUTS", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DDE_PUTS": {"filename": "caosVM_core.cpp", "category": "core functions", "arguments": [{"name": "val", "type": "bareword"}], "name": "DDE: PUTS", "match": "PUTS", "type": "command", "syntaxstring": "DDE: PUTS (command) val (bareword)", "uniquename": "c_DDE_PUTS", "namespace": "dde:", "evalcost": {"default": 1}, "implementation": "caosVM::c_OUTS", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_OUTS"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_OUTV": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Prints the given decimal value to the ouput stream.  Does nothing when run inside a script.\n", "arguments": [{"name": "val", "type": "decimal"}], "name": "OUTV", "match": "OUTV", "type": "command", "syntaxstring": "OUTV (command) val (decimal)", "uniquename": "c_OUTV", "evalcost": {"default": 1}, "implementation": "caosVM::c_OUTV", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DDE_PUTV": {"filename": "caosVM_core.cpp", "category": "core functions", "arguments": [{"name": "val", "type": "integer"}], "name": "DDE: PUTV", "match": "PUTV", "type": "command", "syntaxstring": "DDE: PUTV (command) val (integer)", "uniquename": "c_DDE_PUTV", "namespace": "dde:", "evalcost": {"default": 1}, "implementation": "caosVM::c_OUTV", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_OUTV"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SCRP": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the beginning of a normal script applying to the agent with the given classifier\ninfo.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "SCRP", "match": "SCRP", "type": "command", "syntaxstring": "SCRP (command) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "c_SCRP", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCRP", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_ENDM": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the end of a script.\n", "arguments": [], "name": "ENDM", "match": "ENDM", "type": "command", "syntaxstring": "ENDM (command)", "uniquename": "c_ENDM", "evalcost": {"default": 1}, "implementation": "caosVM::c_ENDM", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_VRSN": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Stop running this script unless VRSN is equal to or greater than the specified value.\n", "arguments": [{"name": "required", "type": "integer"}], "name": "VRSN", "match": "VRSN", "type": "command", "syntaxstring": "VRSN (command) required (integer)", "uniquename": "c_VRSN", "evalcost": {"default": 1}, "implementation": "caosVM::c_VRSN", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_VRSN": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Return the build version number of the engine.\n", "arguments": [], "name": "VRSN", "match": "VRSN", "type": "integer", "syntaxstring": "VRSN (integer)", "uniquename": "v_VRSN", "evalcost": {"default": 0}, "implementation": "caosVM::v_VRSN", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_TOKN": {"filename": "caosVM_core.cpp", "category": "core functions", "arguments": [{"name": "token", "type": "bareword"}], "name": "TOKN", "match": "TOKN", "type": "integer", "syntaxstring": "TOKN (integer) token (bareword)", "uniquename": "v_TOKN", "evalcost": {"default": 0}, "implementation": "caosVM::v_TOKN", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_OC2E_DDIR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns a list of the data directories available, separated with \\n. Remember that the last one is the working directory.\n", "arguments": [], "name": "OC2E DDIR", "match": "DDIR", "type": "string", "syntaxstring": "OC2E DDIR (string)", "uniquename": "v_OC2E_DDIR", "namespace": "oc2e", "evalcost": {"default": 0}, "implementation": "caosVM::v_OC2E_DDIR", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_SYS_CMND": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Do something by providing a menu ID from the original Creatures 1 or Creatures 2 engines. This is obviously limited to the IDs that openc2e is aware of.\n", "arguments": [{"name": "menuid", "type": "integer"}], "name": "SYS: CMND", "match": "CMND", "type": "command", "syntaxstring": "SYS: CMND (command) menuid (integer)", "uniquename": "c_SYS_CMND", "namespace": "sys:", "evalcost": {"default": 1}, "implementation": "caosVM::c_SYS_CMND", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_STM_SHOU": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "stimulusno", "type": "integer"}], "name": "STM# SHOU", "match": "SHOU", "type": "command", "syntaxstring": "STM# SHOU (command) stimulusno (integer)", "uniquename": "c_STM_SHOU", "namespace": "stm#", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STM_SHOU", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_STM_SIGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "stimulusno", "type": "integer"}], "name": "STM# SIGN", "match": "SIGN", "type": "command", "syntaxstring": "STM# SIGN (command) stimulusno (integer)", "uniquename": "c_STM_SIGN", "namespace": "stm#", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STM_SIGN", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_STM_TACT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "stimulusno", "type": "integer"}], "name": "STM# TACT", "match": "TACT", "type": "command", "syntaxstring": "STM# TACT (command) stimulusno (integer)", "uniquename": "c_STM_TACT", "namespace": "stm#", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STM_TACT", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_STM_WRIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "object", "type": "agent"}, {"name": "stimulusno", "type": "integer"}], "name": "STM# WRIT", "match": "WRIT", "type": "command", "syntaxstring": "STM# WRIT (command) object (agent) stimulusno (integer)", "uniquename": "c_STM_WRIT", "namespace": "stm#", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STM_WRIT", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_STIM_SHOU": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "significance", "type": "integer"}, {"name": "input", "type": "integer"}, {"name": "intensity", "type": "integer"}, {"name": "features", "type": "integer"}, {"name": "chem0", "type": "integer"}, {"name": "amount0", "type": "integer"}, {"name": "chem1", "type": "integer"}, {"name": "amount1", "type": "integer"}, {"name": "chem2", "type": "integer"}, {"name": "amount2", "type": "integer"}, {"name": "chem3", "type": "integer"}, {"name": "amount3", "type": "integer"}], "name": "STIM SHOU", "match": "SHOU", "type": "command", "syntaxstring": "STIM SHOU (command) significance (integer) input (integer) intensity (integer) features (integer) chem0 (integer) amount0 (integer) chem1 (integer) amount1 (integer) chem2 (integer) amount2 (integer) chem3 (integer) amount3 (integer)", "uniquename": "c_STIM_SHOU", "namespace": "stim", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STIM_SHOU_c2", "pragma": {"implementation": "caosVM::c_STIM_SHOU_c2", "variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -12}, "c_STIM_SIGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "significance", "type": "integer"}, {"name": "input", "type": "integer"}, {"name": "intensity", "type": "integer"}, {"name": "features", "type": "integer"}, {"name": "chem0", "type": "integer"}, {"name": "amount0", "type": "integer"}, {"name": "chem1", "type": "integer"}, {"name": "amount1", "type": "integer"}, {"name": "chem2", "type": "integer"}, {"name": "amount2", "type": "integer"}, {"name": "chem3", "type": "integer"}, {"name": "amount3", "type": "integer"}], "name": "STIM SIGN", "match": "SIGN", "type": "command", "syntaxstring": "STIM SIGN (command) significance (integer) input (integer) intensity (integer) features (integer) chem0 (integer) amount0 (integer) chem1 (integer) amount1 (integer) chem2 (integer) amount2 (integer) chem3 (integer) amount3 (integer)", "uniquename": "c_STIM_SIGN", "namespace": "stim", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STIM_SIGN_c2", "pragma": {"implementation": "caosVM::c_STIM_SIGN_c2", "variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -12}, "c_STIM_TACT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "significance", "type": "integer"}, {"name": "input", "type": "integer"}, {"name": "intensity", "type": "integer"}, {"name": "features", "type": "integer"}, {"name": "chem0", "type": "integer"}, {"name": "amount0", "type": "integer"}, {"name": "chem1", "type": "integer"}, {"name": "amount1", "type": "integer"}, {"name": "chem2", "type": "integer"}, {"name": "amount2", "type": "integer"}, {"name": "chem3", "type": "integer"}, {"name": "amount3", "type": "integer"}], "name": "STIM TACT", "match": "TACT", "type": "command", "syntaxstring": "STIM TACT (command) significance (integer) input (integer) intensity (integer) features (integer) chem0 (integer) amount0 (integer) chem1 (integer) amount1 (integer) chem2 (integer) amount2 (integer) chem3 (integer) amount3 (integer)", "uniquename": "c_STIM_TACT", "namespace": "stim", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STIM_TACT_c2", "pragma": {"implementation": "caosVM::c_STIM_TACT_c2", "variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -12}, "c_STIM_WRIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "creature", "type": "agent"}, {"name": "significance", "type": "integer"}, {"name": "input", "type": "integer"}, {"name": "intensity", "type": "integer"}, {"name": "features", "type": "integer"}, {"name": "chem0", "type": "integer"}, {"name": "amount0", "type": "integer"}, {"name": "chem1", "type": "integer"}, {"name": "amount1", "type": "integer"}, {"name": "chem2", "type": "integer"}, {"name": "amount2", "type": "integer"}, {"name": "chem3", "type": "integer"}, {"name": "amount3", "type": "integer"}], "name": "STIM WRIT", "match": "WRIT", "type": "command", "syntaxstring": "STIM WRIT (command) creature (agent) significance (integer) input (integer) intensity (integer) features (integer) chem0 (integer) amount0 (integer) chem1 (integer) amount1 (integer) chem2 (integer) amount2 (integer) chem3 (integer) amount3 (integer)", "uniquename": "c_STIM_WRIT", "namespace": "stim", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STIM_WRIT_c2", "pragma": {"implementation": "caosVM::c_STIM_WRIT_c2", "variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -13}, "c_STIM_FROM": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "significance", "type": "integer"}, {"name": "input", "type": "integer"}, {"name": "intensity", "type": "integer"}, {"name": "features", "type": "integer"}, {"name": "chem0", "type": "integer"}, {"name": "amount0", "type": "integer"}, {"name": "chem1", "type": "integer"}, {"name": "amount1", "type": "integer"}, {"name": "chem2", "type": "integer"}, {"name": "amount2", "type": "integer"}, {"name": "chem3", "type": "integer"}, {"name": "amount3", "type": "integer"}], "name": "STIM FROM", "match": "FROM", "type": "command", "syntaxstring": "STIM FROM (command) significance (integer) input (integer) intensity (integer) features (integer) chem0 (integer) amount0 (integer) chem1 (integer) amount1 (integer) chem2 (integer) amount2 (integer) chem3 (integer) amount3 (integer)", "uniquename": "c_STIM_FROM", "namespace": "stim", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STIM_FROM_c1", "pragma": {"implementation": "caosVM::c_STIM_FROM_c1", "variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -12}, "v_DEAD": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Determines whether the target Creature is alive (0) or dead (255 in c1/c2, 1 otherwise).\n", "arguments": [], "name": "DEAD", "match": "DEAD", "type": "integer", "syntaxstring": "DEAD (integer)", "uniquename": "v_DEAD", "evalcost": {"default": 0}, "implementation": "caosVM::v_DEAD", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NORN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the target Creature.\n", "arguments": [], "name": "NORN", "match": "NORN", "type": "variable", "syntaxstring": "NORN (variable)", "uniquename": "v_NORN", "evalcost": {"default": 0}, "implementation": "caosVM::v_NORN", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::s_NORN", "stackdelta": 1}, "c_CHEM": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Set the level of a chemical (0 to 255) in target creature's bloodstream.\n", "arguments": [{"name": "chemical_id", "type": "integer"}, {"name": "adjust", "type": "integer"}], "name": "CHEM", "match": "CHEM", "type": "command", "syntaxstring": "CHEM (command) chemical_id (integer) adjust (integer)", "uniquename": "c_CHEM", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_CHEM_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_CHEM_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_CHEM": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the level of a chemical (0 to 255) in target creature's bloodstream.\n", "arguments": [{"name": "chemical_id", "type": "integer"}], "name": "CHEM", "match": "CHEM", "type": "integer", "syntaxstring": "CHEM (integer) chemical_id (integer)", "uniquename": "v_CHEM", "evalcost": {"default": 0}, "implementation": "caosVM::v_CHEM_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::v_CHEM_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ASLP": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "If asleep is 1, makes the target creature sleep. If asleep is 0, makes the target creature wake.\n", "arguments": [{"name": "asleep", "type": "integer"}], "name": "ASLP", "match": "ASLP", "type": "command", "syntaxstring": "ASLP (command) asleep (integer)", "uniquename": "c_ASLP", "evalcost": {"default": 1}, "implementation": "caosVM::c_ASLP", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ASLP": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Determines whether the target Creature is asleep.\n", "arguments": [], "name": "ASLP", "match": "ASLP", "type": "integer", "syntaxstring": "ASLP (integer)", "uniquename": "v_ASLP", "evalcost": {"default": 0, "c1": 0, "c2": 0}, "implementation": "caosVM::v_ASLP", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_APPR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature approach the IT agent (or if none, an agent of that category using CAs),\nblocking until it makes it there or gives up.\n", "arguments": [], "name": "APPR", "match": "APPR", "type": "command", "syntaxstring": "APPR (command)", "uniquename": "c_APPR", "evalcost": {"default": 1}, "implementation": "caosVM::c_APPR", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_CAGE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the integer value of the target Creature's current life stage.\n", "arguments": [], "name": "CAGE", "match": "CAGE", "type": "integer", "syntaxstring": "CAGE (integer)", "uniquename": "v_CAGE", "evalcost": {"default": 0}, "implementation": "caosVM::v_CAGE", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v__IT_": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the agent that the OWNR creature was focused on when the\ncurrent script began running.\n", "arguments": [], "name": "_IT_", "match": "_IT_", "type": "agent", "syntaxstring": "_IT_ (agent)", "uniquename": "v__IT_", "evalcost": {"default": 0}, "implementation": "caosVM::v_IT", "pragma": {"implementation": "caosVM::v_IT", "variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_NEW_CREA": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Creates a new creature using the specified moniker for genetic data. sex is 0 for random, 1 for male or 2 for female.\n", "arguments": [{"name": "moniker", "type": "integer"}, {"name": "sex", "type": "integer"}], "name": "NEW: CREA", "match": "CREA", "type": "command", "syntaxstring": "NEW: CREA (command) moniker (integer) sex (integer)", "uniquename": "c_NEW_CREA", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_CREA_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_NEW_CREA_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_LTCY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "action", "type": "integer"}, {"name": "min", "type": "integer"}, {"name": "max", "type": "integer"}], "name": "LTCY", "match": "LTCY", "type": "command", "syntaxstring": "LTCY (command) action (integer) min (integer) max (integer)", "uniquename": "c_LTCY", "evalcost": {"default": 1}, "implementation": "caosVM::c_LTCY", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_FK": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "F**K", "match": "F**K", "type": "command", "syntaxstring": "F**K (command)", "uniquename": "c_FK", "evalcost": {"default": 1}, "implementation": "caosVM::c_MATE", "pragma": {"variants": "c1", "implementation": "caosVM::c_MATE"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DRV": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "DRV!", "match": "DRV!", "type": "integer", "syntaxstring": "DRV! (integer)", "uniquename": "v_DRV", "evalcost": {"default": 0}, "implementation": "caosVM::v_DRV", "pragma": {"implementation": "caosVM::v_DRV", "variants": "c1 c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_TOUC": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "TOUC", "match": "TOUC", "type": "command", "syntaxstring": "TOUC (command)", "uniquename": "c_TOUC", "evalcost": {"default": 1}, "implementation": "caosVM::c_TOUC", "pragma": {"variants": "c1 c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_WALK": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "WALK", "match": "WALK", "type": "command", "syntaxstring": "WALK (command)", "uniquename": "c_WALK", "evalcost": {"default": 1}, "implementation": "caosVM::c_WALK", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DONE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "DONE", "match": "DONE", "type": "command", "syntaxstring": "DONE (command)", "uniquename": "c_DONE", "evalcost": {"default": 1}, "implementation": "caosVM::c_DONE", "pragma": {"variants": "c1 c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SAYN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "SAYN", "match": "SAYN", "type": "command", "syntaxstring": "SAYN (command)", "uniquename": "c_SAYN", "evalcost": {"default": 1}, "implementation": "caosVM::c_SAYN", "pragma": {"variants": "c1 c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_IMPT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "nudge", "type": "integer"}], "name": "IMPT", "match": "IMPT", "type": "command", "syntaxstring": "IMPT (command) nudge (integer)", "uniquename": "c_IMPT", "evalcost": {"default": 1}, "implementation": "caosVM::c_IMPT", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_AIM": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "actionno", "type": "integer"}], "name": "AIM:", "match": "AIM:", "type": "command", "syntaxstring": "AIM: (command) actionno (integer)", "uniquename": "c_AIM", "evalcost": {"default": 1}, "implementation": "caosVM::c_AIM", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_BABY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "BABY", "match": "BABY", "type": "variable", "syntaxstring": "BABY (variable)", "uniquename": "v_BABY", "evalcost": {"default": 0}, "implementation": "caosVM::v_BABY", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::s_BABY", "stackdelta": 1}, "c_SNEZ": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "SNEZ", "match": "SNEZ", "type": "command", "syntaxstring": "SNEZ (command)", "uniquename": "c_SNEZ", "evalcost": {"default": 1}, "implementation": "caosVM::c_SNEZ", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DRIV": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the value for the specified drive of the target creature.\n", "arguments": [{"name": "drive", "type": "integer"}], "name": "DRIV", "match": "DRIV", "type": "integer", "syntaxstring": "DRIV (integer) drive (integer)", "uniquename": "v_DRIV", "evalcost": {"default": 0}, "implementation": "caosVM::v_DRIV_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::v_DRIV_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DREA": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Start dreaming and process (at most?) max instincts.\n", "arguments": [{"name": "max", "type": "integer"}], "name": "DREA", "match": "DREA", "type": "command", "syntaxstring": "DREA (command) max (integer)", "uniquename": "c_DREA", "evalcost": {"default": 1}, "implementation": "caosVM::c_DREA_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_DREA_c1"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SAY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "string", "type": "string"}], "name": "SAY$", "match": "SAY$", "type": "command", "syntaxstring": "SAY$ (command) string (string)", "uniquename": "c_SAY", "evalcost": {"default": 1}, "implementation": "caosVM::c_SAY", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_OUTS": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Outputs a string to the debug log.\n", "arguments": [{"name": "val", "type": "string"}], "name": "DBG: OUTS", "match": "OUTS", "type": "command", "syntaxstring": "DBG: OUTS (command) val (string)", "uniquename": "c_DBG_OUTS", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_OUTS", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBGM": {"filename": "caosVM_debug.cpp", "category": "debugging", "arguments": [{"name": "val", "type": "bareword"}], "name": "DBGM", "match": "DBGM", "type": "command", "syntaxstring": "DBGM (command) val (bareword)", "uniquename": "c_DBGM", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_OUTS", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_DBG_OUTS"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_OUTV": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Outputs a decimal value to the debug log.\n", "arguments": [{"name": "val", "type": "decimal"}], "name": "DBG: OUTV", "match": "OUTV", "type": "command", "syntaxstring": "DBG: OUTV (command) val (decimal)", "uniquename": "c_DBG_OUTV", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_OUTV", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBGV": {"filename": "caosVM_debug.cpp", "category": "debugging", "arguments": [{"name": "val", "type": "integer"}], "name": "DBGV", "match": "DBGV", "type": "command", "syntaxstring": "DBGV (command) val (integer)", "uniquename": "c_DBGV", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_OUTV", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_DBG_OUTV"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBUG": {"filename": "caosVM_debug.cpp", "category": "debugging", "arguments": [{"name": "val", "type": "integer"}], "name": "DBUG", "match": "DBUG", "type": "command", "syntaxstring": "DBUG (command) val (integer)", "uniquename": "c_DBUG", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBUG", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_DUMP": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Dumps the current script's bytecode to stderr.\n", "arguments": [], "name": "DBG: DUMP", "match": "DUMP", "type": "command", "syntaxstring": "DBG: DUMP (command)", "uniquename": "c_DBG_DUMP", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_DUMP", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_TRACE": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Sets opcode trace level. Zero disables.\n", "arguments": [{"name": "level", "type": "integer"}], "name": "DBG: TRACE", "match": "TRACE", "type": "command", "syntaxstring": "DBG: TRACE (command) level (integer)", "uniquename": "c_DBG_TRACE", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_TRACE", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_DISA": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Dumps the \"bytecode\" of the indicated script to the current output channel.\nNote that this isn't really bytecode yet (though that's a possible future\nimprovement).\n\nIf the script is not found no output will be generated.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "DBG: DISA", "match": "DISA", "type": "command", "syntaxstring": "DBG: DISA (command) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "c_DBG_DISA", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_DISA", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_DBG_ASRT": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Blows up unless the given condition is true.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "DBG: ASRT", "match": "ASRT", "type": "command", "syntaxstring": "DBG: ASRT (command) condition (condition)", "uniquename": "c_DBG_ASRT", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_ASRT", "pragma": {"parser": "new AssertParser()", "variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_ASRF": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "(openc2e-only)\nBlows up unless the given condition is false.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "DBG: ASRF", "match": "ASRF", "type": "command", "syntaxstring": "DBG: ASRF (command) condition (condition)", "uniquename": "c_DBG_ASRF", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_ASRF", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_FAIL": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "(openc2e-only)\nBlows up.\n", "arguments": [], "name": "DBG: FAIL", "match": "FAIL", "type": "command", "syntaxstring": "DBG: FAIL (command)", "uniquename": "c_DBG_FAIL", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_FAIL", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DBG_IDNT": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "(openc2e-only)\nReturn a nicely-formatted string identifying the classifier of the agent,\nusing the catalogue to find the name if possible.\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "DBG: IDNT", "match": "IDNT", "type": "string", "syntaxstring": "DBG: IDNT (string) agent (agent)", "uniquename": "v_DBG_IDNT", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_IDNT", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DBG_STOK": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns the bare token in 'bareword' as a string.\n", "arguments": [{"name": "bareword", "type": "bareword"}], "name": "DBG: STOK", "match": "STOK", "type": "string", "syntaxstring": "DBG: STOK (string) bareword (bareword)", "uniquename": "v_DBG_STOK", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_STOK", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_TSLC": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Sets the currently executing script's remaining timeslice value. This command\naffects only the current timeslice; future slices use the normal amount for\nthe dialect in question.\n", "arguments": [{"name": "timeslice", "type": "integer"}], "name": "DBG: TSLC", "match": "TSLC", "type": "command", "syntaxstring": "DBG: TSLC (command) timeslice (integer)", "uniquename": "c_DBG_TSLC", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::c_DBG_TSLC", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_DBG_TSLC": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns the number of ticks left in the current script's remaining timeslice.\n", "arguments": [], "name": "DBG: TSLC", "match": "TSLC", "type": "integer", "syntaxstring": "DBG: TSLC (integer)", "uniquename": "v_DBG_TSLC", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_TSLC", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DBG_SIZO": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns a human-readable profile of the sizes and allocation counts of\nvarious internal data structures\n", "arguments": [], "name": "DBG: SIZO", "match": "SIZO", "type": "string", "syntaxstring": "DBG: SIZO (string)", "uniquename": "v_DBG_SIZO", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_SIZO", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_DOIF": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Part of a DOIF/ELIF/ELSE/ENDI block. Jumps to the next part of the block if condition is false,\notherwise continues executing the script.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "DOIF", "match": "DOIF", "type": "command", "syntaxstring": "DOIF (command) condition (condition)", "uniquename": "c_DOIF", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_DOIF", "pragma": {"variants": "c1 c2 cv c3 sm", "stackdelta": "0"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ELIF": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Part of a DOIF/ELIF/ELSE/ENDI block. If none of the previous DOIF/ELIF conditions have been true, and condition evaluates to true, then the code in the ELIF block is executed.\nIf found outside a DOIF block, it is equivalent to a DOIF. If you take advantage of this behavior, fuzzie is of the opinion that you should be shot.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "ELIF", "match": "ELIF", "type": "command", "syntaxstring": "ELIF (command) condition (condition)", "uniquename": "c_ELIF", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ELIF", "pragma": {"variants": "all", "stackdelta": "0"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ELSE": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Part of a DOIF/ELIF/ELSE/ENDI block. If ELSE is present, it is jumped to when none of the previous DOIF/ELIF conditions are true.\n", "arguments": [], "name": "ELSE", "match": "ELSE", "type": "command", "syntaxstring": "ELSE (command)", "uniquename": "c_ELSE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ELSE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ENDI": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The end of a DOIF/ELIF/ELSE/ENDI block.\n", "arguments": [], "name": "ENDI", "match": "ENDI", "type": "command", "syntaxstring": "ENDI (command)", "uniquename": "c_ENDI", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ENDI", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_REPS": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The start of a REPS...REPE loop. The body of the loop will be executed (reps) times.\n", "arguments": [{"name": "reps", "type": "integer"}], "name": "REPS", "match": "REPS", "type": "command", "syntaxstring": "REPS (command) reps (integer)", "uniquename": "c_REPS", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_REPS", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_REPE": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The end of a REPS...REPE loop.\n", "arguments": [], "name": "REPE", "match": "REPE", "type": "command", "syntaxstring": "REPE (command)", "uniquename": "c_REPE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_REPE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_LOOP": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The start of a LOOP...EVER or LOOP...UNTL loop.\n", "arguments": [], "name": "LOOP", "match": "LOOP", "type": "command", "syntaxstring": "LOOP (command)", "uniquename": "c_LOOP", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_LOOP", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_EVER": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Jumps back to the matching LOOP, no matter what.\n", "arguments": [], "name": "EVER", "match": "EVER", "type": "command", "syntaxstring": "EVER (command)", "uniquename": "c_EVER", "evalcost": {"default": 1}, "implementation": "caosVM::c_EVER", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_UNTL": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Jumps back to the matching LOOP unless the condition evaluates to true.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "UNTL", "match": "UNTL", "type": "command", "syntaxstring": "UNTL (command) condition (condition)", "uniquename": "c_UNTL", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_UNTL", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_GSUB": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Jumps to a subroutine defined by SUBR with label (label).\n", "arguments": [{"name": "label", "type": "label"}], "name": "GSUB", "match": "GSUB", "type": "command", "syntaxstring": "GSUB (command) label (label)", "uniquename": "c_GSUB", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_GSUB", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SUBR": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Defines the start of a subroute to be called with GSUB, with label (label).\nIf the command is encountered during execution, it acts like a STOP.\n", "arguments": [{"name": "label", "type": "label"}], "name": "SUBR", "match": "SUBR", "type": "command", "syntaxstring": "SUBR (command) label (label)", "uniquename": "c_SUBR", "evalcost": {"default": 1}, "implementation": "caosVM::c_SUBR", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_RETN": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Returns from a subroutine called with GSUB.\n", "arguments": [], "name": "RETN", "match": "RETN", "type": "command", "syntaxstring": "RETN (command)", "uniquename": "c_RETN", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_RETN", "pragma": {"stackdelta": "any", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_NEXT": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The end of an ENUM...NEXT loop.\n", "arguments": [], "name": "NEXT", "match": "NEXT", "type": "command", "syntaxstring": "NEXT (command)", "uniquename": "c_NEXT", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_NEXT", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ENUM": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Loops through all agents with the given classifier.  0 on any field is a\nwildcard. The loop body is terminated by a NEXT.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "ENUM", "match": "ENUM", "type": "command", "syntaxstring": "ENUM (command) family (integer) genus (integer) species (integer)", "uniquename": "c_ENUM", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ENUM", "pragma": {"stackdelta": "any", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_NEW_GENE": {"filename": "caosVM_genetics.cpp", "category": "genetics", "arguments": [{"name": "mum", "type": "integer"}, {"name": "dad", "type": "integer"}, {"name": "destination", "type": "variable"}], "name": "NEW: GENE", "match": "GENE", "type": "command", "syntaxstring": "NEW: GENE (command) mum (integer) dad (integer) destination (variable)", "uniquename": "c_NEW_GENE", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_GENE", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_EVNT": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "object", "type": "agent"}], "name": "EVNT", "match": "EVNT", "type": "command", "syntaxstring": "EVNT (command) object (agent)", "uniquename": "c_EVNT", "evalcost": {"default": 1}, "implementation": "caosVM::c_EVNT", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_RMEV": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "object", "type": "agent"}], "name": "RMEV", "match": "RMEV", "type": "command", "syntaxstring": "RMEV (command) object (agent)", "uniquename": "c_RMEV", "evalcost": {"default": 1}, "implementation": "caosVM::c_RMEV", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DDE_NEGG": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [], "name": "DDE: NEGG", "match": "NEGG", "type": "command", "syntaxstring": "DDE: NEGG (command)", "uniquename": "c_DDE_NEGG", "namespace": "dde:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DDE_NEGG", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DDE_DIED": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [], "name": "DDE: DIED", "match": "DIED", "type": "command", "syntaxstring": "DDE: DIED (command)", "uniquename": "c_DDE_DIED", "namespace": "dde:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DDE_DIED", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DDE_LIVE": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [], "name": "DDE: LIVE", "match": "LIVE", "type": "command", "syntaxstring": "DDE: LIVE (command)", "uniquename": "c_DDE_LIVE", "namespace": "dde:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DDE_LIVE", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HOTS": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns the agent that is currently underneath the Hand.\nNB: this command is not a real c1/c2 command, backported for convenience\n", "arguments": [], "name": "HOTS", "match": "HOTS", "type": "agent", "syntaxstring": "HOTS (agent)", "uniquename": "v_HOTS", "evalcost": {"default": 0}, "implementation": "caosVM::v_HOTS", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WIND": {"filename": "caosVM_map.cpp", "category": "map", "description": "Always returns zero, since this command was stubbed in C1.\n", "arguments": [], "name": "WIND", "match": "WIND", "type": "integer", "syntaxstring": "WIND (integer)", "uniquename": "v_WIND", "evalcost": {"default": 0}, "implementation": "caosVM::v_WIND", "pragma": {"variants": "c1"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_TEMP": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [], "name": "TEMP", "match": "TEMP", "type": "variable", "syntaxstring": "TEMP (variable)", "uniquename": "v_TEMP", "evalcost": {"default": 0}, "implementation": "caosVM::v_TEMP", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::s_TEMP", "stackdelta": 1}, "v_GNDW": {"filename": "caosVM_map.cpp", "category": "map", "description": "Return the number of horizontal pixels per piece of ground level data.\n", "arguments": [], "name": "GNDW", "match": "GNDW", "type": "integer", "syntaxstring": "GNDW (integer)", "uniquename": "v_GNDW", "evalcost": {"default": 0}, "implementation": "caosVM::v_GNDW", "pragma": {"variants": "c1"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_GRND": {"filename": "caosVM_map.cpp", "category": "map", "description": "Return the ground level data at the provided index. See GNDW to work out the index required.\n", "arguments": [{"name": "index", "type": "integer"}], "name": "GRND", "match": "GRND", "type": "integer", "syntaxstring": "GRND (integer) index (integer)", "uniquename": "v_GRND", "evalcost": {"default": 0}, "implementation": "caosVM::v_GRND", "pragma": {"variants": "c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ROOM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Create or modify a room.\n", "arguments": [{"name": "roomno", "type": "integer"}, {"name": "left", "type": "integer"}, {"name": "top", "type": "integer"}, {"name": "right", "type": "integer"}, {"name": "bottom", "type": "integer"}, {"name": "type", "type": "integer"}], "name": "ROOM", "match": "ROOM", "type": "command", "syntaxstring": "ROOM (command) roomno (integer) left (integer) top (integer) right (integer) bottom (integer) type (integer)", "uniquename": "c_ROOM", "evalcost": {"default": 1}, "implementation": "caosVM::c_ROOM", "pragma": {"variants": "c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "v_ROOM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Return some data for the specified room number.\nReturns 0 if no such room.\n\ndata: 0 is left, 1 is top, 2 is right, 3 is bottom, 4 is room type.\nfor c2: 5 is floor value, 6 is organic nutrient, 7 is inorganic nutrient,\n8 is temperature, 9 is pressure, 10 is wind x, 11 is wind y, 12 is light,\n13 is radiation, 14 is heat source, 15 is pressure source, 16 is light\nsource, 17 is radiation source, 18 is the visited flag and 19 is the\ndrop status\n", "arguments": [{"name": "roomno", "type": "integer"}, {"name": "data", "type": "integer"}], "name": "ROOM", "match": "ROOM", "type": "integer", "syntaxstring": "ROOM (integer) roomno (integer) data (integer)", "uniquename": "v_ROOM", "evalcost": {"default": 0}, "implementation": "caosVM::v_ROOM_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::v_ROOM_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_WRAP": {"filename": "caosVM_map.cpp", "category": "map", "description": "The world-wrapping flag for the specified metaroom. 1 to enable wrapping, 0 to disable.\n", "arguments": [{"name": "metaroom_id", "type": "integer"}], "name": "WRAP", "match": "WRAP", "type": "variable", "syntaxstring": "WRAP (variable) metaroom_id (integer)", "uniquename": "v_WRAP", "evalcost": {"default": 0}, "implementation": "caosVM::v_WRAP", "pragma": {"variants": "all"}, "status": "broken", "saveimpl": "caosVM::s_WRAP", "stackdelta": 0}, "c_MVTO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Places the TARG agent at the given x/y position in the world (using the upper left hand corner of the agent).\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "MVTO", "match": "MVTO", "type": "command", "syntaxstring": "MVTO (command) x (float) y (float)", "uniquename": "c_MVTO", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_MVTO", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_MVBY": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Changes the TARG agent's position by the given relative distances.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "MVBY", "match": "MVBY", "type": "command", "syntaxstring": "MVBY (command) x (float) y (float)", "uniquename": "c_MVBY", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_MVBY", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_MOVS": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns an integer representing the motion status of the TARG agent.  0 is autonomous, 1 is moving by mouse, 2 is\nfloating, 3 is inside a vehicle, and 4 is being carried.\n", "arguments": [], "name": "MOVS", "match": "MOVS", "type": "variable", "syntaxstring": "MOVS (variable)", "uniquename": "v_MOVS", "evalcost": {"default": 0}, "implementation": "caosVM::v_MOVS", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_MOVS", "stackdelta": 1}, "c_MCRT": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Remove limits from target object and move it to (x, y).\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "MCRT", "match": "MCRT", "type": "command", "syntaxstring": "MCRT (command) x (integer) y (integer)", "uniquename": "c_MCRT", "evalcost": {"default": 1}, "implementation": "caosVM::c_MCRT", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_INST": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Forces the following commands to be executed in one tick, rather than scheduling them, until SLOW or the end\nof the script is encountered.\n", "arguments": [], "name": "INST", "match": "INST", "type": "command", "syntaxstring": "INST (command)", "uniquename": "c_INST", "evalcost": {"default": 1}, "implementation": "caosVM::c_INST", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_WAIT": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Stops the script from running for the given number of ticks.\n", "arguments": [{"name": "ticks", "type": "integer"}], "name": "WAIT", "match": "WAIT", "type": "command", "syntaxstring": "WAIT (command) ticks (integer)", "uniquename": "c_WAIT", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_WAIT", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_STOP": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Aborts the script.\n", "arguments": [], "name": "STOP", "match": "STOP", "type": "command", "syntaxstring": "STOP (command)", "uniquename": "c_STOP", "evalcost": {"default": 1}, "implementation": "caosVM::c_STOP", "pragma": {"stackdelta": "any", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_SCRX": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Deletes the event script in question from the scriptoruium.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "SCRX", "match": "SCRX", "type": "command", "syntaxstring": "SCRX (command) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "c_SCRX", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCRX", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_SNDE": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Play an uncontrolled sound at the target agent's current position.\n", "arguments": [{"name": "filename", "type": "bareword"}], "name": "SNDE", "match": "SNDE", "type": "command", "syntaxstring": "SNDE (command) filename (bareword)", "uniquename": "c_SNDE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SNDE", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SNDV": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Play an uncontrolled sound at the target agent's current position.\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SNDV", "match": "SNDV", "type": "command", "syntaxstring": "SNDV (command) filename (string)", "uniquename": "c_SNDV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SNDE", "pragma": {"variants": "c1", "implementation": "caosVM::c_SNDE"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SNDC": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Start playing a controlled sound with the target agent, which will follow the agent as it moves.\n", "arguments": [{"name": "filename", "type": "bareword"}], "name": "SNDC", "match": "SNDC", "type": "command", "syntaxstring": "SNDC (command) filename (bareword)", "uniquename": "c_SNDC", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SNDC", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SNDL": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Start playing a looping controlled sound with the target agent, which will follow the agent as it moves.\n", "arguments": [{"name": "filename", "type": "bareword"}], "name": "SNDL", "match": "SNDL", "type": "command", "syntaxstring": "SNDL (command) filename (bareword)", "uniquename": "c_SNDL", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SNDL", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_FADE": {"filename": "caosVM_sounds.cpp", "category": "sound", "arguments": [], "name": "FADE", "match": "FADE", "type": "command", "syntaxstring": "FADE (command)", "uniquename": "c_FADE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_FADE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_STPC": {"filename": "caosVM_sounds.cpp", "category": "sound", "arguments": [], "name": "STPC", "match": "STPC", "type": "command", "syntaxstring": "STPC (command)", "uniquename": "c_STPC", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STPC", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PLDS": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Preload the specified sound file if TARG is visible or just offscreen.\n", "arguments": [{"name": "filename", "type": "bareword"}], "name": "PLDS", "match": "PLDS", "type": "command", "syntaxstring": "PLDS (command) filename (bareword)", "uniquename": "c_PLDS", "evalcost": {"default": 1}, "implementation": "caosVM::c_PLDS", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_VARx": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Like VAxx, but restricted to 0-9. Legacy from Creatures 1.\n", "arguments": [], "name": "VARx", "match": "VARx", "type": "variable", "syntaxstring": "VARx (variable)", "uniquename": "v_VARx", "evalcost": {"default": 0}, "implementation": "caosVM::v_VAxx", "pragma": {"variants": "c1 c2", "stackdelta": "0", "implementation": "caosVM::v_VAxx", "saveimpl": "caosVM::s_VAxx"}, "status": "maybe", "saveimpl": "caosVM::s_VAxx", "stackdelta": 0}, "c_SETV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "%% Don't enable c1 or c2 here; we activate them with horrible hacks later\n\nSets the given variable to the given decimal value.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "value", "type": "decimal"}], "name": "SETV", "match": "SETV", "type": "command", "syntaxstring": "SETV (command) var (variable) value (decimal)", "uniquename": "c_SETV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SETV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_OBVx": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Like OVxx, but restricted to 0-2 in C1, or 0-9 in C2. Legacy from Creatures 1.\n", "arguments": [], "name": "OBVx", "match": "OBVx", "type": "variable", "syntaxstring": "OBVx (variable)", "uniquename": "v_OBVx", "evalcost": {"default": 0}, "implementation": "caosVM::v_OVxx", "pragma": {"stackdelta": "0", "variants": "c1 c2", "implementation": "caosVM::v_OVxx", "saveimpl": "caosVM::s_OVxx"}, "status": "maybe", "saveimpl": "caosVM::s_OVxx", "stackdelta": 0}, "c_MODV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Divides the given variable by the given integer, and returns the remainder (var % mod).\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "mod", "type": "integer"}], "name": "MODV", "match": "MODV", "type": "command", "syntaxstring": "MODV (command) var (variable) mod (integer)", "uniquename": "c_MODV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MODV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ANDV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the result of a bitwise AND comparison of the given variable and the given integer (var & and).\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "and", "type": "integer"}], "name": "ANDV", "match": "ANDV", "type": "command", "syntaxstring": "ANDV (command) var (variable) and (integer)", "uniquename": "c_ANDV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ANDV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ORRV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the result of a bitwise OR comparison of the given variable and the given integer (var | or)\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "or", "type": "integer"}], "name": "ORRV", "match": "ORRV", "type": "command", "syntaxstring": "ORRV (command) var (variable) or (integer)", "uniquename": "c_ORRV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ORRV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ADDV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Adds the given integer to the given variable and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "add", "type": "integer"}], "name": "ADDV", "match": "ADDV", "type": "command", "syntaxstring": "ADDV (command) var (variable) add (integer)", "uniquename": "c_ADDV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ADDV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SUBV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Subtracts the given integer from the given variable and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "sub", "type": "integer"}], "name": "SUBV", "match": "SUBV", "type": "command", "syntaxstring": "SUBV (command) var (variable) sub (integer)", "uniquename": "c_SUBV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SUBV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_NEGV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the inverse of (negates) the given variable.  For example, 1 to -1, or -4 to 4.\n", "arguments": [{"name": "var", "type": "variable"}], "name": "NEGV", "match": "NEGV", "type": "command", "syntaxstring": "NEGV (command) var (variable)", "uniquename": "c_NEGV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_NEGV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DIVV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Divides the given variable by the given integer and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "div", "type": "decimal"}], "name": "DIVV", "match": "DIVV", "type": "command", "syntaxstring": "DIVV (command) var (variable) div (decimal)", "uniquename": "c_DIVV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_DIVV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_MULV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Multiplies the given variable by the given integer and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "mul", "type": "decimal"}], "name": "MULV", "match": "MULV", "type": "command", "syntaxstring": "MULV (command) var (variable) mul (decimal)", "uniquename": "c_MULV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MULV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_MODU": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns information about which modules are being used by the engine (for now, backend and audio backend names).\n", "arguments": [], "name": "MODU", "match": "MODU", "type": "string", "syntaxstring": "MODU (string)", "uniquename": "v_MODU", "evalcost": {"default": 0}, "implementation": "caosVM::v_MODU", "pragma": {"variants": "all"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_GNAM": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the currently-running game (like \"Creatures 1\" or \"Docking Station\").\n", "arguments": [], "name": "GNAM", "match": "GNAM", "type": "string", "syntaxstring": "GNAM (string)", "uniquename": "v_GNAM", "evalcost": {"default": 0}, "implementation": "caosVM::v_GNAM", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_RNDV": {"filename": "caosVM_variables.cpp", "category": "variables", "arguments": [{"name": "var", "type": "variable"}, {"name": "value1", "type": "integer"}, {"name": "value", "type": "integer"}], "name": "RNDV", "match": "RNDV", "type": "command", "syntaxstring": "RNDV (command) var (variable) value1 (integer) value (integer)", "uniquename": "c_RNDV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_RNDV", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_CABN": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [{"name": "left", "type": "integer"}, {"name": "top", "type": "integer"}, {"name": "right", "type": "integer"}, {"name": "bottom", "type": "integer"}], "name": "CABN", "match": "CABN", "type": "command", "syntaxstring": "CABN (command) left (integer) top (integer) right (integer) bottom (integer)", "uniquename": "c_CABN", "evalcost": {"default": 1}, "implementation": "caosVM::c_CABN", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_SPAS": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "description": "make specified vehicle agent pick up specified passenger\n", "arguments": [{"name": "vehicle", "type": "agent"}, {"name": "passenger", "type": "agent"}], "name": "SPAS", "match": "SPAS", "type": "command", "syntaxstring": "SPAS (command) vehicle (agent) passenger (agent)", "uniquename": "c_SPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_SPAS", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_GPAS": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [], "name": "GPAS", "match": "GPAS", "type": "command", "syntaxstring": "GPAS (command)", "uniquename": "c_GPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_GPAS_c2", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_GPAS_c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DPAS": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [], "name": "DPAS", "match": "DPAS", "type": "command", "syntaxstring": "DPAS (command)", "uniquename": "c_DPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_DPAS_c2", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_DPAS_c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_XVEC": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [], "name": "XVEC", "match": "XVEC", "type": "variable", "syntaxstring": "XVEC (variable)", "uniquename": "v_XVEC", "evalcost": {"default": 0}, "implementation": "caosVM::v_XVEC", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::s_XVEC", "stackdelta": 1}, "v_YVEC": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [], "name": "YVEC", "match": "YVEC", "type": "variable", "syntaxstring": "YVEC (variable)", "uniquename": "v_YVEC", "evalcost": {"default": 0}, "implementation": "caosVM::v_YVEC", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::s_YVEC", "stackdelta": 1}, "v_BUMP": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [], "name": "BUMP", "match": "BUMP", "type": "integer", "syntaxstring": "BUMP (integer)", "uniquename": "v_BUMP", "evalcost": {"default": 0}, "implementation": "caosVM::v_BUMP", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_TELE": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "description": "Teleport occupants of target vehicle to (x, y).\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "TELE", "match": "TELE", "type": "command", "syntaxstring": "TELE (command) x (integer) y (integer)", "uniquename": "c_TELE", "evalcost": {"default": 1}, "implementation": "caosVM::c_TELE", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}}, "c2": {"v_TOUC": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Determines whether the two given agents are touching.  Returns 0 (if not) or 1 (if so).\n", "arguments": [{"name": "first", "type": "agent"}, {"name": "second", "type": "agent"}], "name": "TOUC", "match": "TOUC", "type": "integer", "syntaxstring": "TOUC (integer) first (agent) second (agent)", "uniquename": "v_TOUC", "evalcost": {"default": 0, "c1": 0, "c2": 0}, "implementation": "caosVM::v_TOUC", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_RTAR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets TARG to a random agent with the given family/genus/species.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "RTAR", "match": "RTAR", "type": "command", "syntaxstring": "RTAR (command) family (integer) genus (integer) species (integer)", "uniquename": "c_RTAR", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_RTAR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_STAR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Locates a random agent that is visible to OWNR (see ESEE) and that\nmatches the given classifier, then sets it to TARG.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "STAR", "match": "STAR", "type": "command", "syntaxstring": "STAR (command) family (integer) genus (integer) species (integer)", "uniquename": "c_STAR", "evalcost": {"default": 1}, "implementation": "caosVM::c_STAR", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_NEW_SIMP": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "sprite_file", "type": "bareword"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "clone", "type": "integer"}], "name": "NEW: SIMP", "match": "SIMP", "type": "command", "syntaxstring": "NEW: SIMP (command) sprite_file (bareword) image_count (integer) first_image (integer) plane (integer) clone (integer)", "uniquename": "c_NEW_SIMP", "namespace": "new:", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_NEW_SIMP_c2", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_NEW_SIMP_c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_NEW_COMP": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "sprite_file", "type": "bareword"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "clone", "type": "integer"}], "name": "NEW: COMP", "match": "COMP", "type": "command", "syntaxstring": "NEW: COMP (command) sprite_file (bareword) image_count (integer) first_image (integer) clone (integer)", "uniquename": "c_NEW_COMP", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_COMP_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_NEW_COMP_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_NEW_VHCL": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "sprite_file", "type": "bareword"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}], "name": "NEW: VHCL", "match": "VHCL", "type": "command", "syntaxstring": "NEW: VHCL (command) sprite_file (bareword) image_count (integer) first_image (integer)", "uniquename": "c_NEW_VHCL", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_VHCL_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_NEW_VHCL_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_NEW_BKBD": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "sprite_file", "type": "bareword"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "background_colour", "type": "integer"}, {"name": "chalk_colour", "type": "integer"}, {"name": "alias_colour", "type": "integer"}, {"name": "textx", "type": "integer"}, {"name": "texty", "type": "integer"}], "name": "NEW: BKBD", "match": "BKBD", "type": "command", "syntaxstring": "NEW: BKBD (command) sprite_file (bareword) image_count (integer) first_image (integer) background_colour (integer) chalk_colour (integer) alias_colour (integer) textx (integer) texty (integer)", "uniquename": "c_NEW_BKBD", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_BKBD", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -8}, "c_NEW_CBUB": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "sprite_file", "type": "bareword"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "stringid", "type": "integer"}], "name": "NEW: CBUB", "match": "CBUB", "type": "command", "syntaxstring": "NEW: CBUB (command) sprite_file (bareword) image_count (integer) first_image (integer) stringid (integer)", "uniquename": "c_NEW_CBUB", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_CBUB", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_TARG": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns TARG, the currently-targeted agent.\n", "arguments": [], "name": "TARG", "match": "TARG", "type": "agent", "syntaxstring": "TARG (agent)", "uniquename": "v_TARG", "evalcost": {"default": 0}, "implementation": "caosVM::v_TARG", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_OWNR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns OWNR, the agent that is running the script.\n", "arguments": [], "name": "OWNR", "match": "OWNR", "type": "agent", "syntaxstring": "OWNR (agent)", "uniquename": "v_OWNR", "evalcost": {"default": 0, "c1": 0, "c2": 0}, "implementation": "caosVM::v_OWNR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_POSE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the displayed sprite of TARG to the frame in the sprite file with the given integer.\n", "arguments": [{"name": "pose", "type": "integer"}], "name": "POSE", "match": "POSE", "type": "command", "syntaxstring": "POSE (command) pose (integer)", "uniquename": "c_POSE", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_POSE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ATTR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Attributes of the TARG agent.\n", "arguments": [], "name": "ATTR", "match": "ATTR", "type": "variable", "syntaxstring": "ATTR (variable)", "uniquename": "v_ATTR", "evalcost": {"default": 0}, "implementation": "caosVM::v_ATTR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_ATTR", "stackdelta": 1}, "c_TICK": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Initiates the agent timer-- the Timer script will then be run once every tickrate ticks.\nSetting tickrate to zero will stop the timer.\n", "arguments": [{"name": "tickrate", "type": "integer"}], "name": "TICK", "match": "TICK", "type": "command", "syntaxstring": "TICK (command) tickrate (integer)", "uniquename": "c_TICK", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_TICK", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TARG": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets TARG (the target agent) to the given agent.\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "TARG", "match": "TARG", "type": "command", "syntaxstring": "TARG (command) agent (agent)", "uniquename": "c_TARG", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_TARG", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FROM": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the agent that sent the message being processed, or NULL if no agent was involved.\n", "arguments": [], "name": "FROM", "match": "FROM", "type": "agent", "syntaxstring": "FROM (agent)", "uniquename": "v_FROM", "evalcost": {"default": 0}, "implementation": "caosVM::v_FROM", "pragma": {"variants": "c1 c2 cv sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the number of the frame in the TARG part/agent's sprite file that is currently being displayed, or -1 if part# doesn't exist on a compound agent.\n", "arguments": [], "name": "POSE", "match": "POSE", "type": "integer", "syntaxstring": "POSE (integer)", "uniquename": "v_POSE", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_KILL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Destroys the agent in question. However, you cannot destroy PNTR.\nRemember, use DEAD first for Creatures!\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "KILL", "match": "KILL", "type": "command", "syntaxstring": "KILL (command) agent (agent)", "uniquename": "c_KILL", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_KILL", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ANIM": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the animation string for TARG, in the format '1234'.\nIf it ends with 'R', loops back to the beginning.\n", "arguments": [{"name": "animstring", "type": "string"}], "name": "ANIM", "match": "ANIM", "type": "command", "syntaxstring": "ANIM (command) animstring (string)", "uniquename": "c_ANIM", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_ANIM_c2", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_ANIM_c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_BASE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the frame in the TARG agent's spritefile that will be used as its base image.\nThis is relative to the first image set with one of the NEW: commands.\n", "arguments": [{"name": "index", "type": "integer"}], "name": "BASE", "match": "BASE", "type": "command", "syntaxstring": "BASE (command) index (integer)", "uniquename": "c_BASE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_BASE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_CARR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the agent that is carrying the OWNR agent.  If OWNR is not being carried, returns\nNULL.\n", "arguments": [], "name": "CARR", "match": "CARR", "type": "agent", "syntaxstring": "CARR (agent)", "uniquename": "v_CARR", "evalcost": {"default": 0}, "implementation": "caosVM::v_CARR_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::v_CARR_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_FMLY": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the family of the TARG agent.\n", "arguments": [], "name": "FMLY", "match": "FMLY", "type": "integer", "syntaxstring": "FMLY (integer)", "uniquename": "v_FMLY", "evalcost": {"default": 0}, "implementation": "caosVM::v_FMLY", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_GNUS": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the genus of the TARG agent.\n", "arguments": [], "name": "GNUS", "match": "GNUS", "type": "integer", "syntaxstring": "GNUS (integer)", "uniquename": "v_GNUS", "evalcost": {"default": 0}, "implementation": "caosVM::v_GNUS", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_SPCS": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the species of the TARG agent.\n", "arguments": [], "name": "SPCS", "match": "SPCS", "type": "integer", "syntaxstring": "SPCS (integer)", "uniquename": "v_SPCS", "evalcost": {"default": 0}, "implementation": "caosVM::v_SPCS", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_PNTR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the pointer agent (the Hand).\n", "arguments": [], "name": "PNTR", "match": "PNTR", "type": "agent", "syntaxstring": "PNTR (agent)", "uniquename": "v_PNTR", "evalcost": {"default": 0}, "implementation": "caosVM::v_PNTR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MESG_WRIT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sends a message of type message_id to the given agent.  FROM will be set to OWNR unless\nthere is no agent involved in sending the message.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "message_id", "type": "integer"}], "name": "MESG WRIT", "match": "WRIT", "type": "command", "syntaxstring": "MESG WRIT (command) agent (agent) message_id (integer)", "uniquename": "c_MESG_WRIT", "namespace": "mesg", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MESG_WRIT", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_MESG_WRT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sends a message of type message_id to the given agent, much like MESG WRIT, but with the\naddition of parameters.  The message will be sent after waiting the number of ticks set\nin delay (except doesn't, right now.  Delay must be set to zero for now.)\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "message_id", "type": "integer"}, {"name": "param_1", "type": "anything"}, {"name": "param_2", "type": "anything"}, {"name": "delay", "type": "integer"}], "name": "MESG WRT+", "match": "WRT+", "type": "command", "syntaxstring": "MESG WRT+ (command) agent (agent) message_id (integer) param_1 (anything) param_2 (anything) delay (integer)", "uniquename": "c_MESG_WRT", "namespace": "mesg", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MESG_WRT", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "v_TOTL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the total number of in-game agents matching the given family/genus/species.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "TOTL", "match": "TOTL", "type": "integer", "syntaxstring": "TOTL (integer) family (integer) genus (integer) species (integer)", "uniquename": "v_TOTL", "evalcost": {"default": 0}, "implementation": "caosVM::v_TOTL", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_POSX": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the X position of the TARG agent in the world.\n", "arguments": [], "name": "POSX", "match": "POSX", "type": "float", "syntaxstring": "POSX (float)", "uniquename": "v_POSX", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSX", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSY": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the Y position of the TARG agent in the world.\n", "arguments": [], "name": "POSY", "match": "POSY", "type": "float", "syntaxstring": "POSY (float)", "uniquename": "v_POSY", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSY", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_OVER": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Waits (blocks the TARG agent) until the animation of the TARG agent or PART is over.\n", "arguments": [], "name": "OVER", "match": "OVER", "type": "command", "syntaxstring": "OVER (command)", "uniquename": "c_OVER", "evalcost": {"default": 1}, "implementation": "caosVM::c_OVER", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SETV_PUHL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets relative x/y coordinates for TARG's pickup point.\nPose is -1 for all poses, or a pose relative to the first image specified in NEW: (not BASE).\n", "arguments": [{"name": "pose", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "SETV PUHL", "match": "PUHL", "type": "command", "syntaxstring": "SETV PUHL (command) pose (integer) x (integer) y (integer)", "uniquename": "c_SETV_PUHL", "namespace": "setv", "evalcost": {"default": 1}, "implementation": "caosVM::c_SETV_PUHL", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_POSL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the left side of TARG's bounding box.\n", "arguments": [], "name": "POSL", "match": "POSL", "type": "float", "syntaxstring": "POSL (float)", "uniquename": "v_POSL", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSL", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POST": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the top side of TARG's bounding box.\n", "arguments": [], "name": "POST", "match": "POST", "type": "float", "syntaxstring": "POST (float)", "uniquename": "v_POST", "evalcost": {"default": 0}, "implementation": "caosVM::v_POST", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the right side of TARG's bounding box.\n", "arguments": [], "name": "POSR", "match": "POSR", "type": "float", "syntaxstring": "POSR (float)", "uniquename": "v_POSR", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSB": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the bottom side of TARG's bounding box.\n", "arguments": [], "name": "POSB", "match": "POSB", "type": "float", "syntaxstring": "POSB (float)", "uniquename": "v_POSB", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSB", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WDTH": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the TARG agent's width.\n", "arguments": [], "name": "WDTH", "match": "WDTH", "type": "integer", "syntaxstring": "WDTH (integer)", "uniquename": "v_WDTH", "evalcost": {"default": 0}, "implementation": "caosVM::v_WDTH", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_RNGE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the TARG agent's range.\n", "arguments": [], "name": "RNGE", "match": "RNGE", "type": "variable", "syntaxstring": "RNGE (variable)", "uniquename": "v_RNGE", "evalcost": {"default": 0}, "implementation": "caosVM::v_RNGE_c2", "pragma": {"variants": "c2", "implementation": "caosVM::v_RNGE_c2"}, "status": "maybe", "saveimpl": "caosVM::s_RNGE_c2", "stackdelta": 1}, "v_HGHT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the TARG agent's height.\n", "arguments": [], "name": "HGHT", "match": "HGHT", "type": "integer", "syntaxstring": "HGHT (integer)", "uniquename": "v_HGHT", "evalcost": {"default": 0}, "implementation": "caosVM::v_HGHT", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_TICK": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Return the agent timer tick rate of the TARG agent.\n", "arguments": [], "name": "TICK", "match": "TICK", "type": "integer", "syntaxstring": "TICK (integer)", "uniquename": "v_TICK", "evalcost": {"default": 0}, "implementation": "caosVM::v_TICK", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_SETV_PUPT": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "pose", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "SETV PUPT", "match": "PUPT", "type": "command", "syntaxstring": "SETV PUPT (command) pose (integer) x (integer) y (integer)", "uniquename": "c_SETV_PUPT", "namespace": "setv", "evalcost": {"default": 1}, "implementation": "caosVM::c_SETV_PUPT", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_DCOR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Turns the display of the TARG agent's physical core on and off. Gives a general idea of\nits size and location (including invisible agents).\n", "arguments": [{"name": "core_on", "type": "integer"}], "name": "DCOR", "match": "DCOR", "type": "command", "syntaxstring": "DCOR (command) core_on (integer)", "uniquename": "c_DCOR", "evalcost": {"default": 1}, "implementation": "caosVM::c_DCOR", "pragma": {"variants": "all"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DROP": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Causes the TARG agent to drop what it is carrying in a safe location.\n", "arguments": [], "name": "DROP", "match": "DROP", "type": "command", "syntaxstring": "DROP (command)", "uniquename": "c_DROP", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_DROP", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ACTV": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "ACTV", "match": "ACTV", "type": "variable", "syntaxstring": "ACTV (variable)", "uniquename": "v_ACTV", "evalcost": {"default": 0}, "implementation": "caosVM::v_ACTV", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::s_ACTV", "stackdelta": 1}, "v_THRT": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "THRT", "match": "THRT", "type": "variable", "syntaxstring": "THRT (variable)", "uniquename": "v_THRT", "evalcost": {"default": 0}, "implementation": "caosVM::v_THRT", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::s_THRT", "stackdelta": 1}, "v_SIZE": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "SIZE", "match": "SIZE", "type": "variable", "syntaxstring": "SIZE (variable)", "uniquename": "v_SIZE", "evalcost": {"default": 0}, "implementation": "caosVM::v_SIZE", "pragma": {"variants": "c2"}, "status": "stub", "saveimpl": "caosVM::s_SIZE", "stackdelta": 1}, "v_GRAV": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "GRAV", "match": "GRAV", "type": "variable", "syntaxstring": "GRAV (variable)", "uniquename": "v_GRAV", "evalcost": {"default": 0}, "implementation": "caosVM::v_GRAV", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::s_GRAV", "stackdelta": 1}, "c_SETV_CLS2": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Creatures 2 command to set the family, genus and species of an agent.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "SETV CLS2", "match": "CLS2", "type": "command", "syntaxstring": "SETV CLS2 (command) family (integer) genus (integer) species (integer)", "uniquename": "c_SETV_CLS2", "namespace": "setv", "evalcost": {"default": 1}, "implementation": "caosVM::c_SETV_CLS2", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_SLIM": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "SLIM", "match": "SLIM", "type": "command", "syntaxstring": "SLIM (command)", "uniquename": "c_SLIM", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SLIM", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_BHVR": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "click", "type": "integer"}, {"name": "touch", "type": "integer"}], "name": "BHVR", "match": "BHVR", "type": "command", "syntaxstring": "BHVR (command) click (integer) touch (integer)", "uniquename": "c_BHVR", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_BHVR_c2", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_BHVR_c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_LIML": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "LIML", "match": "LIML", "type": "integer", "syntaxstring": "LIML (integer)", "uniquename": "v_LIML", "evalcost": {"default": 0}, "implementation": "caosVM::v_LIML", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_LIMT": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "LIMT", "match": "LIMT", "type": "integer", "syntaxstring": "LIMT (integer)", "uniquename": "v_LIMT", "evalcost": {"default": 0}, "implementation": "caosVM::v_LIMT", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_LIMR": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "LIMR", "match": "LIMR", "type": "integer", "syntaxstring": "LIMR (integer)", "uniquename": "v_LIMR", "evalcost": {"default": 0}, "implementation": "caosVM::v_LIMR", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_LIMB": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "LIMB", "match": "LIMB", "type": "integer", "syntaxstring": "LIMB (integer)", "uniquename": "v_LIMB", "evalcost": {"default": 0}, "implementation": "caosVM::v_LIMB_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::v_LIMB_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_OBJP": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "OBJP", "match": "OBJP", "type": "variable", "syntaxstring": "OBJP (variable)", "uniquename": "v_OBJP", "evalcost": {"default": 0}, "implementation": "caosVM::v_OBJP", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::s_OBJP", "stackdelta": 1}, "v_XIST": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Undocumented C2 command; returns 1 if specified agent exists, or 0 otherwise (ie, if it is null).\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "XIST", "match": "XIST", "type": "integer", "syntaxstring": "XIST (integer) agent (agent)", "uniquename": "v_XIST", "evalcost": {"default": 0}, "implementation": "caosVM::v_XIST", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_TCAR": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "TCAR", "match": "TCAR", "type": "agent", "syntaxstring": "TCAR (agent)", "uniquename": "v_TCAR", "evalcost": {"default": 0}, "implementation": "caosVM::v_TCAR", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_EDIT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Attach the target agent to the mouse cursor for positioning purposes.\n", "arguments": [], "name": "EDIT", "match": "EDIT", "type": "command", "syntaxstring": "EDIT (command)", "uniquename": "c_EDIT", "evalcost": {"default": 1}, "implementation": "caosVM::c_EDIT", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_FRZN": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "FRZN", "match": "FRZN", "type": "variable", "syntaxstring": "FRZN (variable)", "uniquename": "v_FRZN", "evalcost": {"default": 0}, "implementation": "caosVM::v_FRZN", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::s_FRZN", "stackdelta": 1}, "c_SYS_CONV": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "This is supposed to convert the provided image name to the display depth, displaying a progress dialog if show_progress is non-zero.\nHowever, it does nothing under openc2e.\n", "arguments": [{"name": "filename", "type": "bareword"}, {"name": "show_progress", "type": "integer"}], "name": "SYS: CONV", "match": "CONV", "type": "command", "syntaxstring": "SYS: CONV (command) filename (bareword) show_progress (integer)", "uniquename": "c_SYS_CONV", "namespace": "sys:", "evalcost": {"default": 1}, "implementation": "caosVM::c_SYS_CONV", "pragma": {"variants": "c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_CMRX": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the X position at the center of the current camera's view.\n", "arguments": [], "name": "CMRX", "match": "CMRX", "type": "integer", "syntaxstring": "CMRX (integer)", "uniquename": "v_CMRX", "evalcost": {"default": 0}, "implementation": "caosVM::v_CMRX", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CMRY": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the Y position at the center of the current camera's view.\n", "arguments": [], "name": "CMRY", "match": "CMRY", "type": "integer", "syntaxstring": "CMRY (integer)", "uniquename": "v_CMRY", "evalcost": {"default": 0}, "implementation": "caosVM::v_CMRY", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_SYS_CMRP": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Smooth scroll the camera so that the specified coordinates are in the center of the window.\n(Yes, this differs from what the incorrect C2 documentation says.)\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "SYS: CMRP", "match": "CMRP", "type": "command", "syntaxstring": "SYS: CMRP (command) x (integer) y (integer)", "uniquename": "c_SYS_CMRP", "namespace": "sys:", "evalcost": {"default": 1}, "implementation": "caosVM::c_SYS_CMRP", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_SYS_CMRA": {"filename": "caosVM_camera.cpp", "category": "cameras", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "SYS: CMRA", "match": "CMRA", "type": "command", "syntaxstring": "SYS: CMRA (command) x (integer) y (integer)", "uniquename": "c_SYS_CMRA", "namespace": "sys:", "evalcost": {"default": 1}, "implementation": "caosVM::c_SYS_CMRA", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_SYS_CAMT": {"filename": "caosVM_camera.cpp", "category": "cameras", "arguments": [], "name": "SYS: CAMT", "match": "CAMT", "type": "command", "syntaxstring": "SYS: CAMT (command)", "uniquename": "c_SYS_CAMT", "namespace": "sys:", "evalcost": {"default": 1}, "implementation": "caosVM::c_SYS_CAMT", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SYS_WTOP": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Move the main window to the front of the screen.\n", "arguments": [], "name": "SYS: WTOP", "match": "WTOP", "type": "command", "syntaxstring": "SYS: WTOP (command)", "uniquename": "c_SYS_WTOP", "namespace": "sys:", "evalcost": {"default": 1}, "implementation": "caosVM::c_SYS_WTOP", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PART": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Sets the part number of the TARGeted compound agent or vehicle to work on (ANIM/POSE use this,\namongst other commands).\n", "arguments": [{"name": "part_id", "type": "integer"}], "name": "PART", "match": "PART", "type": "command", "syntaxstring": "PART (command) part_id (integer)", "uniquename": "c_PART", "evalcost": {"default": 1}, "implementation": "caosVM::c_PART", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_NEW_PART": {"filename": "caosVM_compound.cpp", "category": "compound agents", "arguments": [{"name": "part", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "plane", "type": "integer"}], "name": "NEW: PART", "match": "PART", "type": "command", "syntaxstring": "NEW: PART (command) part (integer) x (integer) y (integer) first_image (integer) plane (integer)", "uniquename": "c_NEW_PART", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_PART", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_BBD_WORD": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Change the word at index to target blackboard, setting to the provided id and text.\n", "arguments": [{"name": "index", "type": "integer"}, {"name": "id", "type": "integer"}, {"name": "text", "type": "string"}], "name": "BBD: WORD", "match": "WORD", "type": "command", "syntaxstring": "BBD: WORD (command) index (integer) id (integer) text (string)", "uniquename": "c_BBD_WORD", "namespace": "bbd:", "evalcost": {"default": 1}, "implementation": "caosVM::c_BBD_WORD", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_BBD_SHOW": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "If show is 1, draw the current text onto part 0 of the target blackboard. If 0,\nremove it from the blackboard.\n", "arguments": [{"name": "show", "type": "integer"}], "name": "BBD: SHOW", "match": "SHOW", "type": "command", "syntaxstring": "BBD: SHOW (command) show (integer)", "uniquename": "c_BBD_SHOW", "namespace": "bbd:", "evalcost": {"default": 1}, "implementation": "caosVM::c_BBD_SHOW", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_BBD_EMIT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Broadcast the current word of the target blackboard. If audible is 1, broadcast\nto all nearby creatures. If 0, broadcast to all creatures looking at it.\n", "arguments": [{"name": "audible", "type": "integer"}], "name": "BBD: EMIT", "match": "EMIT", "type": "command", "syntaxstring": "BBD: EMIT (command) audible (integer)", "uniquename": "c_BBD_EMIT", "namespace": "bbd:", "evalcost": {"default": 1}, "implementation": "caosVM::c_BBD_EMIT", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_BBD_EDIT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "If allow is 1, switch target blackboard into editing mode, give it focus. If it\nis 0, remove focus from target blackboard.\n", "arguments": [{"name": "allow", "type": "integer"}], "name": "BBD: EDIT", "match": "EDIT", "type": "command", "syntaxstring": "BBD: EDIT (command) allow (integer)", "uniquename": "c_BBD_EDIT", "namespace": "bbd:", "evalcost": {"default": 1}, "implementation": "caosVM::c_BBD_EDIT", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_BBD_VOCB": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Copy count words into the blackboard word list from the global word list.\n", "arguments": [{"name": "blackboardstart", "type": "integer"}, {"name": "globalstart", "type": "integer"}, {"name": "count", "type": "integer"}], "name": "BBD: VOCB", "match": "VOCB", "type": "command", "syntaxstring": "BBD: VOCB (command) blackboardstart (integer) globalstart (integer) count (integer)", "uniquename": "c_BBD_VOCB", "namespace": "bbd:", "evalcost": {"default": 1}, "implementation": "caosVM::c_BBD_VOCB", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_NEW_BBTX": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Create a new C2 text part for a compound bubble object. Text will wrap as required to fit width.\n", "arguments": [{"name": "part", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "width", "type": "integer"}], "name": "NEW: BBTX", "match": "BBTX", "type": "command", "syntaxstring": "NEW: BBTX (command) part (integer) x (integer) y (integer) width (integer)", "uniquename": "c_NEW_BBTX", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_BBTX", "pragma": {"variants": "c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_BBTX": {"filename": "caosVM_compound.cpp", "category": "compound agents", "arguments": [{"name": "part", "type": "integer"}, {"name": "stringindex", "type": "integer"}], "name": "BBTX", "match": "BBTX", "type": "command", "syntaxstring": "BBTX (command) part (integer) stringindex (integer)", "uniquename": "c_BBTX", "evalcost": {"default": 1}, "implementation": "caosVM::c_BBTX", "pragma": {"variants": "c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_SPOT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "arguments": [{"name": "spotno", "type": "integer"}, {"name": "left", "type": "integer"}, {"name": "top", "type": "integer"}, {"name": "right", "type": "integer"}, {"name": "bottom", "type": "integer"}], "name": "SPOT", "match": "SPOT", "type": "command", "syntaxstring": "SPOT (command) spotno (integer) left (integer) top (integer) right (integer) bottom (integer)", "uniquename": "c_SPOT", "evalcost": {"default": 1}, "implementation": "caosVM::c_SPOT", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_KNOB": {"filename": "caosVM_compound.cpp", "category": "compound agents", "arguments": [{"name": "function", "type": "integer"}, {"name": "spotno", "type": "integer"}], "name": "KNOB", "match": "KNOB", "type": "command", "syntaxstring": "KNOB (command) function (integer) spotno (integer)", "uniquename": "c_KNOB", "evalcost": {"default": 1}, "implementation": "caosVM::c_KNOB", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_KMSG": {"filename": "caosVM_compound.cpp", "category": "compound agents", "arguments": [{"name": "function", "type": "integer"}, {"name": "flags", "type": "integer"}, {"name": "message", "type": "integer"}], "name": "KMSG", "match": "KMSG", "type": "command", "syntaxstring": "KMSG (command) function (integer) flags (integer) message (integer)", "uniquename": "c_KMSG", "evalcost": {"default": 1}, "implementation": "caosVM::c_KMSG", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_BBLE": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Display the given text for the given number of ticks, in a bubble (type is 0 for speech or 1 for thought).\n", "arguments": [{"name": "text", "type": "string"}, {"name": "ticks", "type": "integer"}, {"name": "type", "type": "integer"}, {"name": "track", "type": "integer"}], "name": "BBLE", "match": "BBLE", "type": "command", "syntaxstring": "BBLE (command) text (string) ticks (integer) type (integer) track (integer)", "uniquename": "c_BBLE", "evalcost": {"default": 1}, "implementation": "caosVM::c_BBLE", "pragma": {"variants": "c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_BBFD": {"filename": "caosVM_compound.cpp", "category": "compound agents", "arguments": [{"name": "part", "type": "integer"}, {"name": "red", "type": "integer"}, {"name": "green", "type": "integer"}, {"name": "blue", "type": "integer"}], "name": "BBFD", "match": "BBFD", "type": "command", "syntaxstring": "BBFD (command) part (integer) red (integer) green (integer) blue (integer)", "uniquename": "c_BBFD", "evalcost": {"default": 1}, "implementation": "caosVM::c_BBFD", "pragma": {"variants": "c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_OUTS": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Prints the given string to the output stream.  Does nothing when run inside a script.\n", "arguments": [{"name": "val", "type": "string"}], "name": "OUTS", "match": "OUTS", "type": "command", "syntaxstring": "OUTS (command) val (string)", "uniquename": "c_OUTS", "evalcost": {"default": 1}, "implementation": "caosVM::c_OUTS", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DDE_PUTS": {"filename": "caosVM_core.cpp", "category": "core functions", "arguments": [{"name": "val", "type": "bareword"}], "name": "DDE: PUTS", "match": "PUTS", "type": "command", "syntaxstring": "DDE: PUTS (command) val (bareword)", "uniquename": "c_DDE_PUTS", "namespace": "dde:", "evalcost": {"default": 1}, "implementation": "caosVM::c_OUTS", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_OUTS"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_OUTV": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Prints the given decimal value to the ouput stream.  Does nothing when run inside a script.\n", "arguments": [{"name": "val", "type": "decimal"}], "name": "OUTV", "match": "OUTV", "type": "command", "syntaxstring": "OUTV (command) val (decimal)", "uniquename": "c_OUTV", "evalcost": {"default": 1}, "implementation": "caosVM::c_OUTV", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DDE_PUTV": {"filename": "caosVM_core.cpp", "category": "core functions", "arguments": [{"name": "val", "type": "integer"}], "name": "DDE: PUTV", "match": "PUTV", "type": "command", "syntaxstring": "DDE: PUTV (command) val (integer)", "uniquename": "c_DDE_PUTV", "namespace": "dde:", "evalcost": {"default": 1}, "implementation": "caosVM::c_OUTV", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_OUTV"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SCRP": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the beginning of a normal script applying to the agent with the given classifier\ninfo.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "SCRP", "match": "SCRP", "type": "command", "syntaxstring": "SCRP (command) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "c_SCRP", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCRP", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_RSCR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the beginning of a removal script.\n", "arguments": [], "name": "RSCR", "match": "RSCR", "type": "command", "syntaxstring": "RSCR (command)", "uniquename": "c_RSCR", "evalcost": {"default": 1}, "implementation": "caosVM::c_RSCR", "pragma": {"variants": "c2 cv c3 sm"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ISCR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the beginning of an installer script.\n", "arguments": [], "name": "ISCR", "match": "ISCR", "type": "command", "syntaxstring": "ISCR (command)", "uniquename": "c_ISCR", "evalcost": {"default": 1}, "implementation": "caosVM::c_ISCR", "pragma": {"variants": "c2 cv c3 sm"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ENDM": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the end of a script.\n", "arguments": [], "name": "ENDM", "match": "ENDM", "type": "command", "syntaxstring": "ENDM (command)", "uniquename": "c_ENDM", "evalcost": {"default": 1}, "implementation": "caosVM::c_ENDM", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_VRSN": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Stop running this script unless VRSN is equal to or greater than the specified value.\n", "arguments": [{"name": "required", "type": "integer"}], "name": "VRSN", "match": "VRSN", "type": "command", "syntaxstring": "VRSN (command) required (integer)", "uniquename": "c_VRSN", "evalcost": {"default": 1}, "implementation": "caosVM::c_VRSN", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_VRSN": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Return the build version number of the engine.\n", "arguments": [], "name": "VRSN", "match": "VRSN", "type": "integer", "syntaxstring": "VRSN (integer)", "uniquename": "v_VRSN", "evalcost": {"default": 0}, "implementation": "caosVM::v_VRSN", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_TOKN": {"filename": "caosVM_core.cpp", "category": "core functions", "arguments": [{"name": "token", "type": "bareword"}], "name": "TOKN", "match": "TOKN", "type": "integer", "syntaxstring": "TOKN (integer) token (bareword)", "uniquename": "v_TOKN", "evalcost": {"default": 0}, "implementation": "caosVM::v_TOKN", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_GAME": {"filename": "caosVM_core.cpp", "category": "core functions", "arguments": [{"name": "category", "type": "integer"}, {"name": "variable", "type": "integer"}], "name": "GAME", "match": "GAME", "type": "variable", "syntaxstring": "GAME (variable) category (integer) variable (integer)", "uniquename": "v_GAME", "evalcost": {"default": 0}, "implementation": "caosVM::v_GAME_c2", "pragma": {"variants": "c2", "implementation": "caosVM::v_GAME_c2"}, "status": "stub", "saveimpl": "caosVM::s_GAME_c2", "stackdelta": -1}, "v_OC2E_DDIR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns a list of the data directories available, separated with \\n. Remember that the last one is the working directory.\n", "arguments": [], "name": "OC2E DDIR", "match": "DDIR", "type": "string", "syntaxstring": "OC2E DDIR (string)", "uniquename": "v_OC2E_DDIR", "namespace": "oc2e", "evalcost": {"default": 0}, "implementation": "caosVM::v_OC2E_DDIR", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_SYS_CMND": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Do something by providing a menu ID from the original Creatures 1 or Creatures 2 engines. This is obviously limited to the IDs that openc2e is aware of.\n", "arguments": [{"name": "menuid", "type": "integer"}], "name": "SYS: CMND", "match": "CMND", "type": "command", "syntaxstring": "SYS: CMND (command) menuid (integer)", "uniquename": "c_SYS_CMND", "namespace": "sys:", "evalcost": {"default": 1}, "implementation": "caosVM::c_SYS_CMND", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_STM_SHOU": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "stimulusno", "type": "integer"}], "name": "STM# SHOU", "match": "SHOU", "type": "command", "syntaxstring": "STM# SHOU (command) stimulusno (integer)", "uniquename": "c_STM_SHOU", "namespace": "stm#", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STM_SHOU", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_STM_SIGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "stimulusno", "type": "integer"}], "name": "STM# SIGN", "match": "SIGN", "type": "command", "syntaxstring": "STM# SIGN (command) stimulusno (integer)", "uniquename": "c_STM_SIGN", "namespace": "stm#", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STM_SIGN", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_STM_TACT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "stimulusno", "type": "integer"}], "name": "STM# TACT", "match": "TACT", "type": "command", "syntaxstring": "STM# TACT (command) stimulusno (integer)", "uniquename": "c_STM_TACT", "namespace": "stm#", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STM_TACT", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_STM_WRIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "object", "type": "agent"}, {"name": "stimulusno", "type": "integer"}], "name": "STM# WRIT", "match": "WRIT", "type": "command", "syntaxstring": "STM# WRIT (command) object (agent) stimulusno (integer)", "uniquename": "c_STM_WRIT", "namespace": "stm#", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STM_WRIT", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_STIM_SHOU": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "significance", "type": "integer"}, {"name": "input", "type": "integer"}, {"name": "intensity", "type": "integer"}, {"name": "features", "type": "integer"}, {"name": "chem0", "type": "integer"}, {"name": "amount0", "type": "integer"}, {"name": "chem1", "type": "integer"}, {"name": "amount1", "type": "integer"}, {"name": "chem2", "type": "integer"}, {"name": "amount2", "type": "integer"}, {"name": "chem3", "type": "integer"}, {"name": "amount3", "type": "integer"}], "name": "STIM SHOU", "match": "SHOU", "type": "command", "syntaxstring": "STIM SHOU (command) significance (integer) input (integer) intensity (integer) features (integer) chem0 (integer) amount0 (integer) chem1 (integer) amount1 (integer) chem2 (integer) amount2 (integer) chem3 (integer) amount3 (integer)", "uniquename": "c_STIM_SHOU", "namespace": "stim", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STIM_SHOU_c2", "pragma": {"implementation": "caosVM::c_STIM_SHOU_c2", "variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -12}, "c_STIM_SIGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "significance", "type": "integer"}, {"name": "input", "type": "integer"}, {"name": "intensity", "type": "integer"}, {"name": "features", "type": "integer"}, {"name": "chem0", "type": "integer"}, {"name": "amount0", "type": "integer"}, {"name": "chem1", "type": "integer"}, {"name": "amount1", "type": "integer"}, {"name": "chem2", "type": "integer"}, {"name": "amount2", "type": "integer"}, {"name": "chem3", "type": "integer"}, {"name": "amount3", "type": "integer"}], "name": "STIM SIGN", "match": "SIGN", "type": "command", "syntaxstring": "STIM SIGN (command) significance (integer) input (integer) intensity (integer) features (integer) chem0 (integer) amount0 (integer) chem1 (integer) amount1 (integer) chem2 (integer) amount2 (integer) chem3 (integer) amount3 (integer)", "uniquename": "c_STIM_SIGN", "namespace": "stim", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STIM_SIGN_c2", "pragma": {"implementation": "caosVM::c_STIM_SIGN_c2", "variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -12}, "c_STIM_TACT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "significance", "type": "integer"}, {"name": "input", "type": "integer"}, {"name": "intensity", "type": "integer"}, {"name": "features", "type": "integer"}, {"name": "chem0", "type": "integer"}, {"name": "amount0", "type": "integer"}, {"name": "chem1", "type": "integer"}, {"name": "amount1", "type": "integer"}, {"name": "chem2", "type": "integer"}, {"name": "amount2", "type": "integer"}, {"name": "chem3", "type": "integer"}, {"name": "amount3", "type": "integer"}], "name": "STIM TACT", "match": "TACT", "type": "command", "syntaxstring": "STIM TACT (command) significance (integer) input (integer) intensity (integer) features (integer) chem0 (integer) amount0 (integer) chem1 (integer) amount1 (integer) chem2 (integer) amount2 (integer) chem3 (integer) amount3 (integer)", "uniquename": "c_STIM_TACT", "namespace": "stim", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STIM_TACT_c2", "pragma": {"implementation": "caosVM::c_STIM_TACT_c2", "variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -12}, "c_STIM_WRIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "creature", "type": "agent"}, {"name": "significance", "type": "integer"}, {"name": "input", "type": "integer"}, {"name": "intensity", "type": "integer"}, {"name": "features", "type": "integer"}, {"name": "chem0", "type": "integer"}, {"name": "amount0", "type": "integer"}, {"name": "chem1", "type": "integer"}, {"name": "amount1", "type": "integer"}, {"name": "chem2", "type": "integer"}, {"name": "amount2", "type": "integer"}, {"name": "chem3", "type": "integer"}, {"name": "amount3", "type": "integer"}], "name": "STIM WRIT", "match": "WRIT", "type": "command", "syntaxstring": "STIM WRIT (command) creature (agent) significance (integer) input (integer) intensity (integer) features (integer) chem0 (integer) amount0 (integer) chem1 (integer) amount1 (integer) chem2 (integer) amount2 (integer) chem3 (integer) amount3 (integer)", "uniquename": "c_STIM_WRIT", "namespace": "stim", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STIM_WRIT_c2", "pragma": {"implementation": "caosVM::c_STIM_WRIT_c2", "variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -13}, "c_STIM_FROM": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "significance", "type": "integer"}, {"name": "input", "type": "integer"}, {"name": "intensity", "type": "integer"}, {"name": "features", "type": "integer"}, {"name": "chem0", "type": "integer"}, {"name": "amount0", "type": "integer"}, {"name": "chem1", "type": "integer"}, {"name": "amount1", "type": "integer"}, {"name": "chem2", "type": "integer"}, {"name": "amount2", "type": "integer"}, {"name": "chem3", "type": "integer"}, {"name": "amount3", "type": "integer"}], "name": "STIM FROM", "match": "FROM", "type": "command", "syntaxstring": "STIM FROM (command) significance (integer) input (integer) intensity (integer) features (integer) chem0 (integer) amount0 (integer) chem1 (integer) amount1 (integer) chem2 (integer) amount2 (integer) chem3 (integer) amount3 (integer)", "uniquename": "c_STIM_FROM", "namespace": "stim", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STIM_FROM_c1", "pragma": {"implementation": "caosVM::c_STIM_FROM_c1", "variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -12}, "v_DIRN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the direction the target Creatures is facing.\n", "arguments": [], "name": "DIRN", "match": "DIRN", "type": "integer", "syntaxstring": "DIRN (integer)", "uniquename": "v_DIRN", "evalcost": {"default": 0}, "implementation": "caosVM::v_DIRN", "pragma": {"variants": "c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DEAD": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Determines whether the target Creature is alive (0) or dead (255 in c1/c2, 1 otherwise).\n", "arguments": [], "name": "DEAD", "match": "DEAD", "type": "integer", "syntaxstring": "DEAD (integer)", "uniquename": "v_DEAD", "evalcost": {"default": 0}, "implementation": "caosVM::v_DEAD", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NORN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the target Creature.\n", "arguments": [], "name": "NORN", "match": "NORN", "type": "variable", "syntaxstring": "NORN (variable)", "uniquename": "v_NORN", "evalcost": {"default": 0}, "implementation": "caosVM::v_NORN", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::s_NORN", "stackdelta": 1}, "c_CHEM": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Set the level of a chemical (0 to 255) in target creature's bloodstream.\n", "arguments": [{"name": "chemical_id", "type": "integer"}, {"name": "adjust", "type": "integer"}], "name": "CHEM", "match": "CHEM", "type": "command", "syntaxstring": "CHEM (command) chemical_id (integer) adjust (integer)", "uniquename": "c_CHEM", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_CHEM_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_CHEM_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_CHEM": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the level of a chemical (0 to 255) in target creature's bloodstream.\n", "arguments": [{"name": "chemical_id", "type": "integer"}], "name": "CHEM", "match": "CHEM", "type": "integer", "syntaxstring": "CHEM (integer) chemical_id (integer)", "uniquename": "v_CHEM", "evalcost": {"default": 0}, "implementation": "caosVM::v_CHEM_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::v_CHEM_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ASLP": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "If asleep is 1, makes the target creature sleep. If asleep is 0, makes the target creature wake.\n", "arguments": [{"name": "asleep", "type": "integer"}], "name": "ASLP", "match": "ASLP", "type": "command", "syntaxstring": "ASLP (command) asleep (integer)", "uniquename": "c_ASLP", "evalcost": {"default": 1}, "implementation": "caosVM::c_ASLP", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ASLP": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Determines whether the target Creature is asleep.\n", "arguments": [], "name": "ASLP", "match": "ASLP", "type": "integer", "syntaxstring": "ASLP (integer)", "uniquename": "v_ASLP", "evalcost": {"default": 0, "c1": 0, "c2": 0}, "implementation": "caosVM::v_ASLP", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_APPR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature approach the IT agent (or if none, an agent of that category using CAs),\nblocking until it makes it there or gives up.\n", "arguments": [], "name": "APPR", "match": "APPR", "type": "command", "syntaxstring": "APPR (command)", "uniquename": "c_APPR", "evalcost": {"default": 1}, "implementation": "caosVM::c_APPR", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_UNCS": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns 1 if the target Creature is unconscious, or 0 otherwise.\n", "arguments": [], "name": "UNCS", "match": "UNCS", "type": "integer", "syntaxstring": "UNCS (integer)", "uniquename": "v_UNCS", "evalcost": {"default": 0}, "implementation": "caosVM::v_UNCS", "pragma": {"variants": "c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CAGE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the integer value of the target Creature's current life stage.\n", "arguments": [], "name": "CAGE", "match": "CAGE", "type": "integer", "syntaxstring": "CAGE (integer)", "uniquename": "v_CAGE", "evalcost": {"default": 0}, "implementation": "caosVM::v_CAGE", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v__IT_": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the agent that the OWNR creature was focused on when the\ncurrent script began running.\n", "arguments": [], "name": "_IT_", "match": "_IT_", "type": "agent", "syntaxstring": "_IT_ (agent)", "uniquename": "v__IT_", "evalcost": {"default": 0}, "implementation": "caosVM::v_IT", "pragma": {"implementation": "caosVM::v_IT", "variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_NEW_CREA": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Creates a new creature using the specified moniker for genetic data. sex is 0 for random, 1 for male or 2 for female.\n", "arguments": [{"name": "moniker", "type": "integer"}, {"name": "sex", "type": "integer"}], "name": "NEW: CREA", "match": "CREA", "type": "command", "syntaxstring": "NEW: CREA (command) moniker (integer) sex (integer)", "uniquename": "c_NEW_CREA", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_CREA_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_NEW_CREA_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_LTCY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "action", "type": "integer"}, {"name": "min", "type": "integer"}, {"name": "max", "type": "integer"}], "name": "LTCY", "match": "LTCY", "type": "command", "syntaxstring": "LTCY (command) action (integer) min (integer) max (integer)", "uniquename": "c_LTCY", "evalcost": {"default": 1}, "implementation": "caosVM::c_LTCY", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_MATE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "MATE", "match": "MATE", "type": "command", "syntaxstring": "MATE (command)", "uniquename": "c_MATE", "evalcost": {"default": 1}, "implementation": "caosVM::c_MATE", "pragma": {"variants": "c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DRV": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "DRV!", "match": "DRV!", "type": "integer", "syntaxstring": "DRV! (integer)", "uniquename": "v_DRV", "evalcost": {"default": 0}, "implementation": "caosVM::v_DRV", "pragma": {"implementation": "caosVM::v_DRV", "variants": "c1 c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_TOUC": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "TOUC", "match": "TOUC", "type": "command", "syntaxstring": "TOUC (command)", "uniquename": "c_TOUC", "evalcost": {"default": 1}, "implementation": "caosVM::c_TOUC", "pragma": {"variants": "c1 c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_WALK": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "WALK", "match": "WALK", "type": "command", "syntaxstring": "WALK (command)", "uniquename": "c_WALK", "evalcost": {"default": 1}, "implementation": "caosVM::c_WALK", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DONE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "DONE", "match": "DONE", "type": "command", "syntaxstring": "DONE (command)", "uniquename": "c_DONE", "evalcost": {"default": 1}, "implementation": "caosVM::c_DONE", "pragma": {"variants": "c1 c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SAYN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "SAYN", "match": "SAYN", "type": "command", "syntaxstring": "SAYN (command)", "uniquename": "c_SAYN", "evalcost": {"default": 1}, "implementation": "caosVM::c_SAYN", "pragma": {"variants": "c1 c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_IMPT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "nudge", "type": "integer"}], "name": "IMPT", "match": "IMPT", "type": "command", "syntaxstring": "IMPT (command) nudge (integer)", "uniquename": "c_IMPT", "evalcost": {"default": 1}, "implementation": "caosVM::c_IMPT", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_AIM": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "actionno", "type": "integer"}], "name": "AIM:", "match": "AIM:", "type": "command", "syntaxstring": "AIM: (command) actionno (integer)", "uniquename": "c_AIM", "evalcost": {"default": 1}, "implementation": "caosVM::c_AIM", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_BABY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "BABY", "match": "BABY", "type": "variable", "syntaxstring": "BABY (variable)", "uniquename": "v_BABY", "evalcost": {"default": 0}, "implementation": "caosVM::v_BABY", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::s_BABY", "stackdelta": 1}, "c_SNEZ": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "SNEZ", "match": "SNEZ", "type": "command", "syntaxstring": "SNEZ (command)", "uniquename": "c_SNEZ", "evalcost": {"default": 1}, "implementation": "caosVM::c_SNEZ", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DRIV": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the value for the specified drive of the target creature.\n", "arguments": [{"name": "drive", "type": "integer"}], "name": "DRIV", "match": "DRIV", "type": "integer", "syntaxstring": "DRIV (integer) drive (integer)", "uniquename": "v_DRIV", "evalcost": {"default": 0}, "implementation": "caosVM::v_DRIV_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::v_DRIV_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DREA": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Start dreaming and process (at most?) max instincts.\n", "arguments": [{"name": "max", "type": "integer"}], "name": "DREA", "match": "DREA", "type": "command", "syntaxstring": "DREA (command) max (integer)", "uniquename": "c_DREA", "evalcost": {"default": 1}, "implementation": "caosVM::c_DREA_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_DREA_c1"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_INJR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "organ", "type": "integer"}, {"name": "amount", "type": "integer"}], "name": "INJR", "match": "INJR", "type": "command", "syntaxstring": "INJR (command) organ (integer) amount (integer)", "uniquename": "c_INJR", "evalcost": {"default": 1}, "implementation": "caosVM::c_INJR", "pragma": {"variants": "c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_SAY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "string", "type": "string"}], "name": "SAY$", "match": "SAY$", "type": "command", "syntaxstring": "SAY$ (command) string (string)", "uniquename": "c_SAY", "evalcost": {"default": 1}, "implementation": "caosVM::c_SAY", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TRIG": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "lobe", "type": "integer"}, {"name": "cell", "type": "integer"}, {"name": "amount", "type": "integer"}], "name": "TRIG", "match": "TRIG", "type": "command", "syntaxstring": "TRIG (command) lobe (integer) cell (integer) amount (integer)", "uniquename": "c_TRIG", "evalcost": {"default": 1}, "implementation": "caosVM::c_TRIG", "pragma": {"variants": "c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_MONK": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "MONK", "match": "MONK", "type": "integer", "syntaxstring": "MONK (integer)", "uniquename": "v_MONK", "evalcost": {"default": 0}, "implementation": "caosVM::v_MONK", "pragma": {"variants": "c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_DBG_OUTS": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Outputs a string to the debug log.\n", "arguments": [{"name": "val", "type": "string"}], "name": "DBG: OUTS", "match": "OUTS", "type": "command", "syntaxstring": "DBG: OUTS (command) val (string)", "uniquename": "c_DBG_OUTS", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_OUTS", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBGM": {"filename": "caosVM_debug.cpp", "category": "debugging", "arguments": [{"name": "val", "type": "bareword"}], "name": "DBGM", "match": "DBGM", "type": "command", "syntaxstring": "DBGM (command) val (bareword)", "uniquename": "c_DBGM", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_OUTS", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_DBG_OUTS"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_OUTV": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Outputs a decimal value to the debug log.\n", "arguments": [{"name": "val", "type": "decimal"}], "name": "DBG: OUTV", "match": "OUTV", "type": "command", "syntaxstring": "DBG: OUTV (command) val (decimal)", "uniquename": "c_DBG_OUTV", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_OUTV", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBGV": {"filename": "caosVM_debug.cpp", "category": "debugging", "arguments": [{"name": "val", "type": "integer"}], "name": "DBGV", "match": "DBGV", "type": "command", "syntaxstring": "DBGV (command) val (integer)", "uniquename": "c_DBGV", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_OUTV", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_DBG_OUTV"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBUG": {"filename": "caosVM_debug.cpp", "category": "debugging", "arguments": [{"name": "val", "type": "integer"}], "name": "DBUG", "match": "DBUG", "type": "command", "syntaxstring": "DBUG (command) val (integer)", "uniquename": "c_DBUG", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBUG", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_UNID": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns the unique ID of the target agent.\nThis is currently no good for persisting.\n", "arguments": [], "name": "UNID", "match": "UNID", "type": "agent", "syntaxstring": "UNID (agent)", "uniquename": "v_UNID", "evalcost": {"default": 0}, "implementation": "caosVM::v_UNID_c2", "pragma": {"variants": "c2", "implementation": "caosVM::v_UNID_c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_DBG_DUMP": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Dumps the current script's bytecode to stderr.\n", "arguments": [], "name": "DBG: DUMP", "match": "DUMP", "type": "command", "syntaxstring": "DBG: DUMP (command)", "uniquename": "c_DBG_DUMP", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_DUMP", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_TRACE": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Sets opcode trace level. Zero disables.\n", "arguments": [{"name": "level", "type": "integer"}], "name": "DBG: TRACE", "match": "TRACE", "type": "command", "syntaxstring": "DBG: TRACE (command) level (integer)", "uniquename": "c_DBG_TRACE", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_TRACE", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_DISA": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Dumps the \"bytecode\" of the indicated script to the current output channel.\nNote that this isn't really bytecode yet (though that's a possible future\nimprovement).\n\nIf the script is not found no output will be generated.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "DBG: DISA", "match": "DISA", "type": "command", "syntaxstring": "DBG: DISA (command) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "c_DBG_DISA", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_DISA", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_DBG_ASRT": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Blows up unless the given condition is true.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "DBG: ASRT", "match": "ASRT", "type": "command", "syntaxstring": "DBG: ASRT (command) condition (condition)", "uniquename": "c_DBG_ASRT", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_ASRT", "pragma": {"parser": "new AssertParser()", "variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_ASRF": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "(openc2e-only)\nBlows up unless the given condition is false.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "DBG: ASRF", "match": "ASRF", "type": "command", "syntaxstring": "DBG: ASRF (command) condition (condition)", "uniquename": "c_DBG_ASRF", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_ASRF", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_FAIL": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "(openc2e-only)\nBlows up.\n", "arguments": [], "name": "DBG: FAIL", "match": "FAIL", "type": "command", "syntaxstring": "DBG: FAIL (command)", "uniquename": "c_DBG_FAIL", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_FAIL", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DBG_IDNT": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "(openc2e-only)\nReturn a nicely-formatted string identifying the classifier of the agent,\nusing the catalogue to find the name if possible.\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "DBG: IDNT", "match": "IDNT", "type": "string", "syntaxstring": "DBG: IDNT (string) agent (agent)", "uniquename": "v_DBG_IDNT", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_IDNT", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DBG_STOK": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns the bare token in 'bareword' as a string.\n", "arguments": [{"name": "bareword", "type": "bareword"}], "name": "DBG: STOK", "match": "STOK", "type": "string", "syntaxstring": "DBG: STOK (string) bareword (bareword)", "uniquename": "v_DBG_STOK", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_STOK", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_TSLC": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Sets the currently executing script's remaining timeslice value. This command\naffects only the current timeslice; future slices use the normal amount for\nthe dialect in question.\n", "arguments": [{"name": "timeslice", "type": "integer"}], "name": "DBG: TSLC", "match": "TSLC", "type": "command", "syntaxstring": "DBG: TSLC (command) timeslice (integer)", "uniquename": "c_DBG_TSLC", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::c_DBG_TSLC", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_DBG_TSLC": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns the number of ticks left in the current script's remaining timeslice.\n", "arguments": [], "name": "DBG: TSLC", "match": "TSLC", "type": "integer", "syntaxstring": "DBG: TSLC (integer)", "uniquename": "v_DBG_TSLC", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_TSLC", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DBG_SIZO": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns a human-readable profile of the sizes and allocation counts of\nvarious internal data structures\n", "arguments": [], "name": "DBG: SIZO", "match": "SIZO", "type": "string", "syntaxstring": "DBG: SIZO (string)", "uniquename": "v_DBG_SIZO", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_SIZO", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_DOIF": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Part of a DOIF/ELIF/ELSE/ENDI block. Jumps to the next part of the block if condition is false,\notherwise continues executing the script.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "DOIF", "match": "DOIF", "type": "command", "syntaxstring": "DOIF (command) condition (condition)", "uniquename": "c_DOIF", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_DOIF", "pragma": {"variants": "c1 c2 cv c3 sm", "stackdelta": "0"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ELIF": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Part of a DOIF/ELIF/ELSE/ENDI block. If none of the previous DOIF/ELIF conditions have been true, and condition evaluates to true, then the code in the ELIF block is executed.\nIf found outside a DOIF block, it is equivalent to a DOIF. If you take advantage of this behavior, fuzzie is of the opinion that you should be shot.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "ELIF", "match": "ELIF", "type": "command", "syntaxstring": "ELIF (command) condition (condition)", "uniquename": "c_ELIF", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ELIF", "pragma": {"variants": "all", "stackdelta": "0"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ELSE": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Part of a DOIF/ELIF/ELSE/ENDI block. If ELSE is present, it is jumped to when none of the previous DOIF/ELIF conditions are true.\n", "arguments": [], "name": "ELSE", "match": "ELSE", "type": "command", "syntaxstring": "ELSE (command)", "uniquename": "c_ELSE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ELSE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ENDI": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The end of a DOIF/ELIF/ELSE/ENDI block.\n", "arguments": [], "name": "ENDI", "match": "ENDI", "type": "command", "syntaxstring": "ENDI (command)", "uniquename": "c_ENDI", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ENDI", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_REPS": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The start of a REPS...REPE loop. The body of the loop will be executed (reps) times.\n", "arguments": [{"name": "reps", "type": "integer"}], "name": "REPS", "match": "REPS", "type": "command", "syntaxstring": "REPS (command) reps (integer)", "uniquename": "c_REPS", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_REPS", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_REPE": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The end of a REPS...REPE loop.\n", "arguments": [], "name": "REPE", "match": "REPE", "type": "command", "syntaxstring": "REPE (command)", "uniquename": "c_REPE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_REPE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_LOOP": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The start of a LOOP...EVER or LOOP...UNTL loop.\n", "arguments": [], "name": "LOOP", "match": "LOOP", "type": "command", "syntaxstring": "LOOP (command)", "uniquename": "c_LOOP", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_LOOP", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_EVER": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Jumps back to the matching LOOP, no matter what.\n", "arguments": [], "name": "EVER", "match": "EVER", "type": "command", "syntaxstring": "EVER (command)", "uniquename": "c_EVER", "evalcost": {"default": 1}, "implementation": "caosVM::c_EVER", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_UNTL": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Jumps back to the matching LOOP unless the condition evaluates to true.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "UNTL", "match": "UNTL", "type": "command", "syntaxstring": "UNTL (command) condition (condition)", "uniquename": "c_UNTL", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_UNTL", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_GSUB": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Jumps to a subroutine defined by SUBR with label (label).\n", "arguments": [{"name": "label", "type": "label"}], "name": "GSUB", "match": "GSUB", "type": "command", "syntaxstring": "GSUB (command) label (label)", "uniquename": "c_GSUB", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_GSUB", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SUBR": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Defines the start of a subroute to be called with GSUB, with label (label).\nIf the command is encountered during execution, it acts like a STOP.\n", "arguments": [{"name": "label", "type": "label"}], "name": "SUBR", "match": "SUBR", "type": "command", "syntaxstring": "SUBR (command) label (label)", "uniquename": "c_SUBR", "evalcost": {"default": 1}, "implementation": "caosVM::c_SUBR", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_RETN": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Returns from a subroutine called with GSUB.\n", "arguments": [], "name": "RETN", "match": "RETN", "type": "command", "syntaxstring": "RETN (command)", "uniquename": "c_RETN", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_RETN", "pragma": {"stackdelta": "any", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_NEXT": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The end of an ENUM...NEXT loop.\n", "arguments": [], "name": "NEXT", "match": "NEXT", "type": "command", "syntaxstring": "NEXT (command)", "uniquename": "c_NEXT", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_NEXT", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ENUM": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Loops through all agents with the given classifier.  0 on any field is a\nwildcard. The loop body is terminated by a NEXT.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "ENUM", "match": "ENUM", "type": "command", "syntaxstring": "ENUM (command) family (integer) genus (integer) species (integer)", "uniquename": "c_ENUM", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ENUM", "pragma": {"stackdelta": "any", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_ESEE": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Simular to ENUM, but iterates through agents visible to OWNR, or visible to TARG in an install script.\nAn agent can be seen if it is within the range set by RNGE, and is visible (this includes the PERM value\nof walls that lie between them, and, if the agent is a Creature, it not having the 'invisible' attribute).\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "ESEE", "match": "ESEE", "type": "command", "syntaxstring": "ESEE (command) family (integer) genus (integer) species (integer)", "uniquename": "c_ESEE", "evalcost": {"default": 1}, "implementation": "caosVM::c_ESEE", "pragma": {"stackdelta": "any", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_ETCH": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Similar to ENUM, but iterates through the agents OWNR is touching, or TARG is touching in an install script.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "ETCH", "match": "ETCH", "type": "command", "syntaxstring": "ETCH (command) family (integer) genus (integer) species (integer)", "uniquename": "c_ETCH", "evalcost": {"default": 1}, "implementation": "caosVM::c_ETCH", "pragma": {"stackdelta": "any", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_CALL": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Calls script_no on OWNR, then waits for it to return. The invoked script\nwill inherit the caller's INST setting, but any changes it makes to it will\nbe reversed once it returns - so eg if you call a script when in INST mode,\nit calls OVER and returns, you'll still be in INST.\n\nScript variables (VAxx) will not be preserved - you'll have to use OVxx\nfor any parameters.\n", "arguments": [{"name": "script_no", "type": "integer"}, {"name": "p1", "type": "any"}, {"name": "p2", "type": "any"}], "name": "CALL", "match": "CALL", "type": "command", "syntaxstring": "CALL (command) script_no (integer) p1 (any) p2 (any)", "uniquename": "c_CALL", "evalcost": {"default": 1}, "implementation": "caosVM::c_CALL", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_NEW_GENE": {"filename": "caosVM_genetics.cpp", "category": "genetics", "arguments": [{"name": "mum", "type": "integer"}, {"name": "dad", "type": "integer"}, {"name": "destination", "type": "variable"}], "name": "NEW: GENE", "match": "GENE", "type": "command", "syntaxstring": "NEW: GENE (command) mum (integer) dad (integer) destination (variable)", "uniquename": "c_NEW_GENE", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_GENE", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_EVNT": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "object", "type": "agent"}], "name": "EVNT", "match": "EVNT", "type": "command", "syntaxstring": "EVNT (command) object (agent)", "uniquename": "c_EVNT", "evalcost": {"default": 1}, "implementation": "caosVM::c_EVNT", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_RMEV": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "object", "type": "agent"}], "name": "RMEV", "match": "RMEV", "type": "command", "syntaxstring": "RMEV (command) object (agent)", "uniquename": "c_RMEV", "evalcost": {"default": 1}, "implementation": "caosVM::c_RMEV", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DDE_NEGG": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [], "name": "DDE: NEGG", "match": "NEGG", "type": "command", "syntaxstring": "DDE: NEGG (command)", "uniquename": "c_DDE_NEGG", "namespace": "dde:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DDE_NEGG", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DDE_DIED": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [], "name": "DDE: DIED", "match": "DIED", "type": "command", "syntaxstring": "DDE: DIED (command)", "uniquename": "c_DDE_DIED", "namespace": "dde:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DDE_DIED", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DDE_LIVE": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [], "name": "DDE: LIVE", "match": "LIVE", "type": "command", "syntaxstring": "DDE: LIVE (command)", "uniquename": "c_DDE_LIVE", "namespace": "dde:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DDE_LIVE", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HOTS": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns the agent that is currently underneath the Hand.\nNB: this command is not a real c1/c2 command, backported for convenience\n", "arguments": [], "name": "HOTS", "match": "HOTS", "type": "agent", "syntaxstring": "HOTS (agent)", "uniquename": "v_HOTS", "evalcost": {"default": 0}, "implementation": "caosVM::v_HOTS", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_RTYP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the room type of the room at the centre point of targ.\n", "arguments": [], "name": "RTYP", "match": "RTYP", "type": "integer", "syntaxstring": "RTYP (integer)", "uniquename": "v_RTYP", "evalcost": {"default": 0}, "implementation": "caosVM::v_RTYP_c2", "pragma": {"variants": "c2", "implementation": "caosVM::v_RTYP_c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_SETV_RTYP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Sets the type of the given room to roomtype.\n", "arguments": [{"name": "roomtype", "type": "integer"}], "name": "SETV RTYP", "match": "RTYP", "type": "command", "syntaxstring": "SETV RTYP (command) roomtype (integer)", "uniquename": "c_SETV_RTYP", "namespace": "setv", "evalcost": {"default": 1}, "implementation": "caosVM::c_SETV_RTYP", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_WALL": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the direction of the last wall the TARG agent collided with.\n", "arguments": [], "name": "WALL", "match": "WALL", "type": "integer", "syntaxstring": "WALL (integer)", "uniquename": "v_WALL", "evalcost": {"default": 0}, "implementation": "caosVM::v_WALL", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_SYS_DMAP": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "mapon", "type": "integer"}], "name": "SYS: DMAP", "match": "DMAP", "type": "command", "syntaxstring": "SYS: DMAP (command) mapon (integer)", "uniquename": "c_SYS_DMAP", "namespace": "sys:", "evalcost": {"default": 1}, "implementation": "caosVM::c_SYS_DMAP", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DELR": {"filename": "caosVM_map.cpp", "category": "map", "description": "Removes the given room from the map.\n", "arguments": [{"name": "room_id", "type": "integer"}], "name": "DELR", "match": "DELR", "type": "command", "syntaxstring": "DELR (command) room_id (integer)", "uniquename": "c_DELR", "evalcost": {"default": 1}, "implementation": "caosVM::c_DELR", "pragma": {"variants": "c2 cv c3 sm"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_TEMP": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [], "name": "TEMP", "match": "TEMP", "type": "variable", "syntaxstring": "TEMP (variable)", "uniquename": "v_TEMP", "evalcost": {"default": 0}, "implementation": "caosVM::v_TEMP", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::s_TEMP", "stackdelta": 1}, "v_LITE": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [], "name": "LITE", "match": "LITE", "type": "variable", "syntaxstring": "LITE (variable)", "uniquename": "v_LITE", "evalcost": {"default": 0}, "implementation": "caosVM::v_LITE", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::s_LITE", "stackdelta": 1}, "v_RADN": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [], "name": "RADN", "match": "RADN", "type": "variable", "syntaxstring": "RADN (variable)", "uniquename": "v_RADN", "evalcost": {"default": 0}, "implementation": "caosVM::v_RADN", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::s_RADN", "stackdelta": 1}, "v_ONTR": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [], "name": "ONTR", "match": "ONTR", "type": "variable", "syntaxstring": "ONTR (variable)", "uniquename": "v_ONTR", "evalcost": {"default": 0}, "implementation": "caosVM::v_ONTR", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::s_ONTR", "stackdelta": 1}, "v_INTR": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [], "name": "INTR", "match": "INTR", "type": "variable", "syntaxstring": "INTR (variable)", "uniquename": "v_INTR", "evalcost": {"default": 0}, "implementation": "caosVM::v_INTR", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::s_INTR", "stackdelta": 1}, "v_PRES": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [], "name": "PRES", "match": "PRES", "type": "variable", "syntaxstring": "PRES (variable)", "uniquename": "v_PRES", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRES", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::s_PRES", "stackdelta": 1}, "v_HSRC": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [], "name": "HSRC", "match": "HSRC", "type": "variable", "syntaxstring": "HSRC (variable)", "uniquename": "v_HSRC", "evalcost": {"default": 0}, "implementation": "caosVM::v_HSRC", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::s_HSRC", "stackdelta": 1}, "v_LSRC": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [], "name": "LSRC", "match": "LSRC", "type": "variable", "syntaxstring": "LSRC (variable)", "uniquename": "v_LSRC", "evalcost": {"default": 0}, "implementation": "caosVM::v_LSRC", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::s_LSRC", "stackdelta": 1}, "v_RSRC": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [], "name": "RSRC", "match": "RSRC", "type": "variable", "syntaxstring": "RSRC (variable)", "uniquename": "v_RSRC", "evalcost": {"default": 0}, "implementation": "caosVM::v_RSRC", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::s_RSRC", "stackdelta": 1}, "v_PSRC": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [], "name": "PSRC", "match": "PSRC", "type": "variable", "syntaxstring": "PSRC (variable)", "uniquename": "v_PSRC", "evalcost": {"default": 0}, "implementation": "caosVM::v_PSRC", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::s_PSRC", "stackdelta": 1}, "v_WNDX": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [], "name": "WNDX", "match": "WNDX", "type": "integer", "syntaxstring": "WNDX (integer)", "uniquename": "v_WNDX", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDX", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDY": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [], "name": "WNDY", "match": "WNDY", "type": "integer", "syntaxstring": "WNDY (integer)", "uniquename": "v_WNDY", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDY", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_SETV_DOOR": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "direction", "type": "integer"}, {"name": "room1", "type": "integer"}, {"name": "room2", "type": "integer"}, {"name": "value", "type": "integer"}], "name": "SETV DOOR", "match": "DOOR", "type": "command", "syntaxstring": "SETV DOOR (command) direction (integer) room1 (integer) room2 (integer) value (integer)", "uniquename": "c_SETV_DOOR", "namespace": "setv", "evalcost": {"default": 1}, "implementation": "caosVM::c_SETV_DOOR", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_FLOR": {"filename": "caosVM_map.cpp", "category": "map", "description": "Return y coordinate of floor below centre of target agent.\n", "arguments": [], "name": "FLOR", "match": "FLOR", "type": "integer", "syntaxstring": "FLOR (integer)", "uniquename": "v_FLOR", "evalcost": {"default": 0}, "implementation": "caosVM::v_FLOR", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_ROOM": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "roomno", "type": "integer"}, {"name": "left", "type": "integer"}, {"name": "top", "type": "integer"}, {"name": "right", "type": "integer"}, {"name": "bottom", "type": "integer"}, {"name": "type", "type": "integer"}, {"name": "floorvalue", "type": "integer"}, {"name": "organic", "type": "integer"}, {"name": "inorganic", "type": "integer"}, {"name": "temperature", "type": "integer"}, {"name": "pressure", "type": "integer"}, {"name": "light", "type": "integer"}, {"name": "radiation", "type": "integer"}, {"name": "heatsource", "type": "integer"}, {"name": "pressuresource", "type": "integer"}, {"name": "lightsource", "type": "integer"}, {"name": "radiationsource", "type": "integer"}, {"name": "dropstatus", "type": "integer"}], "name": "ROOM", "match": "ROOM", "type": "command", "syntaxstring": "ROOM (command) roomno (integer) left (integer) top (integer) right (integer) bottom (integer) type (integer) floorvalue (integer) organic (integer) inorganic (integer) temperature (integer) pressure (integer) light (integer) radiation (integer) heatsource (integer) pressuresource (integer) lightsource (integer) radiationsource (integer) dropstatus (integer)", "uniquename": "c_ROOM", "evalcost": {"default": 1}, "implementation": "caosVM::c_ROOM_c2", "pragma": {"variants": "c2", "implementation": "caosVM::c_ROOM_c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -18}, "v_ROOM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Return some data for the specified room number.\nReturns 0 if no such room.\n\ndata: 0 is left, 1 is top, 2 is right, 3 is bottom, 4 is room type.\nfor c2: 5 is floor value, 6 is organic nutrient, 7 is inorganic nutrient,\n8 is temperature, 9 is pressure, 10 is wind x, 11 is wind y, 12 is light,\n13 is radiation, 14 is heat source, 15 is pressure source, 16 is light\nsource, 17 is radiation source, 18 is the visited flag and 19 is the\ndrop status\n", "arguments": [{"name": "roomno", "type": "integer"}, {"name": "data", "type": "integer"}], "name": "ROOM", "match": "ROOM", "type": "integer", "syntaxstring": "ROOM (integer) roomno (integer) data (integer)", "uniquename": "v_ROOM", "evalcost": {"default": 0}, "implementation": "caosVM::v_ROOM_c1", "pragma": {"variants": "c1 c2", "implementation": "caosVM::v_ROOM_c1"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_WRAP": {"filename": "caosVM_map.cpp", "category": "map", "description": "The world-wrapping flag for the specified metaroom. 1 to enable wrapping, 0 to disable.\n", "arguments": [{"name": "metaroom_id", "type": "integer"}], "name": "WRAP", "match": "WRAP", "type": "variable", "syntaxstring": "WRAP (variable) metaroom_id (integer)", "uniquename": "v_WRAP", "evalcost": {"default": 0}, "implementation": "caosVM::v_WRAP", "pragma": {"variants": "all"}, "status": "broken", "saveimpl": "caosVM::s_WRAP", "stackdelta": 0}, "c_SSFC": {"filename": "caosVM_map.cpp", "category": "map", "description": "Set floor points of the specified rooms.\nYou must provide 'count' pairs of (x, y) coordinates as parameters, relative to the room, and with the y coordinates inverted (ie, 0 is the bottom of the room).\nThe coordinates must start at the left side of the room, and end on the right side.\nCount can be zero, which removes any existing floor points.\n", "arguments": [{"name": "roomno", "type": "integer"}, {"name": "count", "type": "integer"}, {"name": "x1", "type": "integer"}, {"name": "y1", "type": "integer"}], "name": "SSFC", "match": "SSFC", "type": "command", "syntaxstring": "SSFC (command) roomno (integer) count (integer) x1 (integer) y1 (integer)", "uniquename": "c_SSFC", "evalcost": {"default": 1}, "implementation": "caosVM::c_SSFC", "pragma": {"variants": "c2", "stackdelta": "any"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "v_RMNO": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [], "name": "RMNO", "match": "RMNO", "type": "integer", "syntaxstring": "RMNO (integer)", "uniquename": "v_RMNO", "evalcost": {"default": 0}, "implementation": "caosVM::v_RMNO", "pragma": {"variants": "c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_RMN": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "room", "type": "integer"}, {"name": "direction", "type": "integer"}], "name": "RMN#", "match": "RMN#", "type": "integer", "syntaxstring": "RMN# (integer) room (integer) direction (integer)", "uniquename": "v_RMN", "evalcost": {"default": 0}, "implementation": "caosVM::v_RMN", "pragma": {"variants": "c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_RMNR": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "room", "type": "integer"}, {"name": "direction", "type": "integer"}, {"name": "door", "type": "integer"}], "name": "RMNR", "match": "RMNR", "type": "variable", "syntaxstring": "RMNR (variable) room (integer) direction (integer) door (integer)", "uniquename": "v_RMNR", "evalcost": {"default": 0}, "implementation": "caosVM::v_RMNR", "pragma": {"variants": "c2"}, "status": "stub", "saveimpl": "caosVM::s_RMNR", "stackdelta": -2}, "v_RMND": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "room", "type": "integer"}, {"name": "direction", "type": "integer"}, {"name": "door", "type": "integer"}], "name": "RMND", "match": "RMND", "type": "variable", "syntaxstring": "RMND (variable) room (integer) direction (integer) door (integer)", "uniquename": "v_RMND", "evalcost": {"default": 0}, "implementation": "caosVM::v_RMND", "pragma": {"variants": "c2"}, "status": "stub", "saveimpl": "caosVM::s_RMND", "stackdelta": -2}, "c_DELN": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "room", "type": "integer"}, {"name": "direction", "type": "integer"}], "name": "DELN", "match": "DELN", "type": "command", "syntaxstring": "DELN (command) room (integer) direction (integer)", "uniquename": "c_DELN", "evalcost": {"default": 1}, "implementation": "caosVM::c_DELN_c2", "pragma": {"variants": "c2", "implementation": "caosVM::c_DELN_c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_MVTO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Places the TARG agent at the given x/y position in the world (using the upper left hand corner of the agent).\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "MVTO", "match": "MVTO", "type": "command", "syntaxstring": "MVTO (command) x (float) y (float)", "uniquename": "c_MVTO", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_MVTO", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_MVBY": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Changes the TARG agent's position by the given relative distances.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "MVBY", "match": "MVBY", "type": "command", "syntaxstring": "MVBY (command) x (float) y (float)", "uniquename": "c_MVBY", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_MVBY", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_VELX": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the current horizontal velocity, in pixels/tick, of the TARG agent.\n", "arguments": [], "name": "VELX", "match": "VELX", "type": "variable", "syntaxstring": "VELX (variable)", "uniquename": "v_VELX", "evalcost": {"default": 0}, "implementation": "caosVM::v_VELX", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_VELX", "stackdelta": 1}, "v_VELY": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the current vertical velocity, in pixels/tick, of the TARG agent.\n", "arguments": [], "name": "VELY", "match": "VELY", "type": "variable", "syntaxstring": "VELY (variable)", "uniquename": "v_VELY", "evalcost": {"default": 0}, "implementation": "caosVM::v_VELY", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_VELY", "stackdelta": 1}, "v_OBST": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the distance from the TARG agent to the nearest wall that it might collide with in the given direction.\n", "arguments": [{"name": "direction", "type": "integer"}], "name": "OBST", "match": "OBST", "type": "integer", "syntaxstring": "OBST (integer) direction (integer)", "uniquename": "v_OBST", "evalcost": {"default": 0}, "implementation": "caosVM::v_OBST_c2", "pragma": {"variants": "c2", "implementation": "caosVM::v_OBST_c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ACCG": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the TARG agent's free-fall acceleration, in pixels/tick squared.\n", "arguments": [], "name": "ACCG", "match": "ACCG", "type": "variable", "syntaxstring": "ACCG (variable)", "uniquename": "v_ACCG", "evalcost": {"default": 0}, "implementation": "caosVM::v_ACCG_c2", "pragma": {"variants": "c2", "implementation": "caosVM::v_ACCG_c2", "saveimpl": "caosVM::s_ACCG_c2"}, "status": "maybe", "saveimpl": "caosVM::s_ACCG_c2", "stackdelta": 1}, "v_AERO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the aerodynamics of the TARG agent.\n", "arguments": [], "name": "AERO", "match": "AERO", "type": "variable", "syntaxstring": "AERO (variable)", "uniquename": "v_AERO", "evalcost": {"default": 0}, "implementation": "caosVM::v_AERO_c2", "pragma": {"variants": "c2", "implementation": "caosVM::v_AERO_c2", "saveimpl": "caosVM::s_AERO_c2"}, "status": "maybe", "saveimpl": "caosVM::s_AERO_c2", "stackdelta": 1}, "v_RELX": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the relative horizontal distance between the script owner and the target agent.\n", "arguments": [], "name": "RELX", "match": "RELX", "type": "integer", "syntaxstring": "RELX (integer)", "uniquename": "v_RELX", "evalcost": {"default": 0}, "implementation": "caosVM::v_RELX_c2", "pragma": {"variants": "c2", "implementation": "caosVM::v_RELX_c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_RELY": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the relative vertical distance between the script owner and the target agent.\n", "arguments": [], "name": "RELY", "match": "RELY", "type": "integer", "syntaxstring": "RELY (integer)", "uniquename": "v_RELY", "evalcost": {"default": 0}, "implementation": "caosVM::v_RELY_c2", "pragma": {"variants": "c2", "implementation": "caosVM::v_RELY_c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MOVS": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns an integer representing the motion status of the TARG agent.  0 is autonomous, 1 is moving by mouse, 2 is\nfloating, 3 is inside a vehicle, and 4 is being carried.\n", "arguments": [], "name": "MOVS", "match": "MOVS", "type": "variable", "syntaxstring": "MOVS (variable)", "uniquename": "v_MOVS", "evalcost": {"default": 0}, "implementation": "caosVM::v_MOVS", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_MOVS", "stackdelta": 1}, "c_MCRT": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Remove limits from target object and move it to (x, y).\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "MCRT", "match": "MCRT", "type": "command", "syntaxstring": "MCRT (command) x (integer) y (integer)", "uniquename": "c_MCRT", "evalcost": {"default": 1}, "implementation": "caosVM::c_MCRT", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_REST": {"filename": "caosVM_motion.cpp", "category": "motion", "arguments": [], "name": "REST", "match": "REST", "type": "variable", "syntaxstring": "REST (variable)", "uniquename": "v_REST", "evalcost": {"default": 0}, "implementation": "caosVM::v_REST", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::s_REST", "stackdelta": 1}, "c_INST": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Forces the following commands to be executed in one tick, rather than scheduling them, until SLOW or the end\nof the script is encountered.\n", "arguments": [], "name": "INST", "match": "INST", "type": "command", "syntaxstring": "INST (command)", "uniquename": "c_INST", "evalcost": {"default": 1}, "implementation": "caosVM::c_INST", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SLOW": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Reverses the effects of INST.\n", "arguments": [], "name": "SLOW", "match": "SLOW", "type": "command", "syntaxstring": "SLOW (command)", "uniquename": "c_SLOW", "evalcost": {"default": 1}, "implementation": "caosVM::c_SLOW", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_LOCK": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Prevent the script from being interrupted by another until UNLK or the end of the script is encountered.\n", "arguments": [], "name": "LOCK", "match": "LOCK", "type": "command", "syntaxstring": "LOCK (command)", "uniquename": "c_LOCK", "evalcost": {"default": 1}, "implementation": "caosVM::c_LOCK", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_UNLK": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Reverses the effects of LOCK.\n", "arguments": [], "name": "UNLK", "match": "UNLK", "type": "command", "syntaxstring": "UNLK (command)", "uniquename": "c_UNLK", "evalcost": {"default": 1}, "implementation": "caosVM::c_UNLK", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_WAIT": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Stops the script from running for the given number of ticks.\n", "arguments": [{"name": "ticks", "type": "integer"}], "name": "WAIT", "match": "WAIT", "type": "command", "syntaxstring": "WAIT (command) ticks (integer)", "uniquename": "c_WAIT", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_WAIT", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_STOP": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Aborts the script.\n", "arguments": [], "name": "STOP", "match": "STOP", "type": "command", "syntaxstring": "STOP (command)", "uniquename": "c_STOP", "evalcost": {"default": 1}, "implementation": "caosVM::c_STOP", "pragma": {"stackdelta": "any", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_SCRX": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Deletes the event script in question from the scriptoruium.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "SCRX", "match": "SCRX", "type": "command", "syntaxstring": "SCRX (command) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "c_SCRX", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCRX", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_SNDE": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Play an uncontrolled sound at the target agent's current position.\n", "arguments": [{"name": "filename", "type": "bareword"}], "name": "SNDE", "match": "SNDE", "type": "command", "syntaxstring": "SNDE (command) filename (bareword)", "uniquename": "c_SNDE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SNDE", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SNDC": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Start playing a controlled sound with the target agent, which will follow the agent as it moves.\n", "arguments": [{"name": "filename", "type": "bareword"}], "name": "SNDC", "match": "SNDC", "type": "command", "syntaxstring": "SNDC (command) filename (bareword)", "uniquename": "c_SNDC", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SNDC", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SNDL": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Start playing a looping controlled sound with the target agent, which will follow the agent as it moves.\n", "arguments": [{"name": "filename", "type": "bareword"}], "name": "SNDL", "match": "SNDL", "type": "command", "syntaxstring": "SNDL (command) filename (bareword)", "uniquename": "c_SNDL", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SNDL", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_FADE": {"filename": "caosVM_sounds.cpp", "category": "sound", "arguments": [], "name": "FADE", "match": "FADE", "type": "command", "syntaxstring": "FADE (command)", "uniquename": "c_FADE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_FADE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_STPC": {"filename": "caosVM_sounds.cpp", "category": "sound", "arguments": [], "name": "STPC", "match": "STPC", "type": "command", "syntaxstring": "STPC (command)", "uniquename": "c_STPC", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STPC", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PLDS": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Preload the specified sound file if TARG is visible or just offscreen.\n", "arguments": [{"name": "filename", "type": "bareword"}], "name": "PLDS", "match": "PLDS", "type": "command", "syntaxstring": "PLDS (command) filename (bareword)", "uniquename": "c_PLDS", "evalcost": {"default": 1}, "implementation": "caosVM::c_PLDS", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_SEAN": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the current game world season. 0 is spring, 1 is summer, 2 is autumn and 3 is winter.\n", "arguments": [], "name": "SEAN", "match": "SEAN", "type": "integer", "syntaxstring": "SEAN (integer)", "uniquename": "v_SEAN", "evalcost": {"default": 0}, "implementation": "caosVM::v_SEAN", "pragma": {"variants": "c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_YEAR": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the number of game years elapsed in the current world.\n", "arguments": [], "name": "YEAR", "match": "YEAR", "type": "integer", "syntaxstring": "YEAR (integer)", "uniquename": "v_YEAR", "evalcost": {"default": 0}, "implementation": "caosVM::v_YEAR", "pragma": {"variants": "c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_ASEA": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "ASEA", "match": "ASEA", "type": "command", "syntaxstring": "ASEA (command)", "uniquename": "c_ASEA", "evalcost": {"default": 1}, "implementation": "caosVM::c_ASEA", "pragma": {"variants": "c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_TMOD": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "TMOD", "match": "TMOD", "type": "integer", "syntaxstring": "TMOD (integer)", "uniquename": "v_TMOD", "evalcost": {"default": 0}, "implementation": "caosVM::v_TMOD", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_SEAV": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "SEAV", "match": "SEAV", "type": "integer", "syntaxstring": "SEAV (integer)", "uniquename": "v_SEAV", "evalcost": {"default": 0}, "implementation": "caosVM::v_SEAV", "pragma": {"variants": "c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_VAxx": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Script-local variables (exist only in the current script) with xx being from 00 to 99.  Examples: VA01, VA45.\n", "arguments": [], "name": "VAxx", "match": "VAxx", "type": "variable", "syntaxstring": "VAxx (variable)", "uniquename": "v_VAxx", "evalcost": {"default": 0}, "implementation": "caosVM::v_VAxx", "pragma": {"stackdelta": "0", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_VAxx", "stackdelta": 0}, "v_VARx": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Like VAxx, but restricted to 0-9. Legacy from Creatures 1.\n", "arguments": [], "name": "VARx", "match": "VARx", "type": "variable", "syntaxstring": "VARx (variable)", "uniquename": "v_VARx", "evalcost": {"default": 0}, "implementation": "caosVM::v_VAxx", "pragma": {"variants": "c1 c2", "stackdelta": "0", "implementation": "caosVM::v_VAxx", "saveimpl": "caosVM::s_VAxx"}, "status": "maybe", "saveimpl": "caosVM::s_VAxx", "stackdelta": 0}, "c_SETV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "%% Don't enable c1 or c2 here; we activate them with horrible hacks later\n\nSets the given variable to the given decimal value.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "value", "type": "decimal"}], "name": "SETV", "match": "SETV", "type": "command", "syntaxstring": "SETV (command) var (variable) value (decimal)", "uniquename": "c_SETV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SETV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_OVxx": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Agent-local variables (exist only in the current agent's VM) from TARG, with xx being from 00 to 99.  Examples: OV01, OV45.\n", "arguments": [], "name": "OVxx", "match": "OVxx", "type": "variable", "syntaxstring": "OVxx (variable)", "uniquename": "v_OVxx", "evalcost": {"default": 0}, "implementation": "caosVM::v_OVxx", "pragma": {"stackdelta": "0", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_OVxx", "stackdelta": 0}, "v_OBVx": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Like OVxx, but restricted to 0-2 in C1, or 0-9 in C2. Legacy from Creatures 1.\n", "arguments": [], "name": "OBVx", "match": "OBVx", "type": "variable", "syntaxstring": "OBVx (variable)", "uniquename": "v_OBVx", "evalcost": {"default": 0}, "implementation": "caosVM::v_OVxx", "pragma": {"stackdelta": "0", "variants": "c1 c2", "implementation": "caosVM::v_OVxx", "saveimpl": "caosVM::s_OVxx"}, "status": "maybe", "saveimpl": "caosVM::s_OVxx", "stackdelta": 0}, "c_MODV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Divides the given variable by the given integer, and returns the remainder (var % mod).\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "mod", "type": "integer"}], "name": "MODV", "match": "MODV", "type": "command", "syntaxstring": "MODV (command) var (variable) mod (integer)", "uniquename": "c_MODV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MODV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ANDV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the result of a bitwise AND comparison of the given variable and the given integer (var & and).\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "and", "type": "integer"}], "name": "ANDV", "match": "ANDV", "type": "command", "syntaxstring": "ANDV (command) var (variable) and (integer)", "uniquename": "c_ANDV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ANDV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ORRV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the result of a bitwise OR comparison of the given variable and the given integer (var | or)\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "or", "type": "integer"}], "name": "ORRV", "match": "ORRV", "type": "command", "syntaxstring": "ORRV (command) var (variable) or (integer)", "uniquename": "c_ORRV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ORRV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ADDV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Adds the given integer to the given variable and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "add", "type": "integer"}], "name": "ADDV", "match": "ADDV", "type": "command", "syntaxstring": "ADDV (command) var (variable) add (integer)", "uniquename": "c_ADDV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ADDV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SUBV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Subtracts the given integer from the given variable and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "sub", "type": "integer"}], "name": "SUBV", "match": "SUBV", "type": "command", "syntaxstring": "SUBV (command) var (variable) sub (integer)", "uniquename": "c_SUBV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SUBV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_NEGV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the inverse of (negates) the given variable.  For example, 1 to -1, or -4 to 4.\n", "arguments": [{"name": "var", "type": "variable"}], "name": "NEGV", "match": "NEGV", "type": "command", "syntaxstring": "NEGV (command) var (variable)", "uniquename": "c_NEGV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_NEGV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DIVV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Divides the given variable by the given integer and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "div", "type": "decimal"}], "name": "DIVV", "match": "DIVV", "type": "command", "syntaxstring": "DIVV (command) var (variable) div (decimal)", "uniquename": "c_DIVV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_DIVV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_MULV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Multiplies the given variable by the given integer and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "mul", "type": "decimal"}], "name": "MULV", "match": "MULV", "type": "command", "syntaxstring": "MULV (command) var (variable) mul (decimal)", "uniquename": "c_MULV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MULV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_MODU": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns information about which modules are being used by the engine (for now, backend and audio backend names).\n", "arguments": [], "name": "MODU", "match": "MODU", "type": "string", "syntaxstring": "MODU (string)", "uniquename": "v_MODU", "evalcost": {"default": 0}, "implementation": "caosVM::v_MODU", "pragma": {"variants": "all"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_GNAM": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the currently-running game (like \"Creatures 1\" or \"Docking Station\").\n", "arguments": [], "name": "GNAM", "match": "GNAM", "type": "string", "syntaxstring": "GNAM (string)", "uniquename": "v_GNAM", "evalcost": {"default": 0}, "implementation": "caosVM::v_GNAM", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v__P1_": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "The first argument given to the current script.\n", "arguments": [], "name": "_P1_", "match": "_P1_", "type": "variable", "syntaxstring": "_P1_ (variable)", "uniquename": "v__P1_", "evalcost": {"default": 0}, "implementation": "caosVM::v_P1", "pragma": {"implementation": "caosVM::v_P1", "saveimpl": "caosVM::s_P1", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_P1", "stackdelta": 1}, "v__P2_": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "The second argument given to the current script.\n", "arguments": [], "name": "_P2_", "match": "_P2_", "type": "variable", "syntaxstring": "_P2_ (variable)", "uniquename": "v__P2_", "evalcost": {"default": 0}, "implementation": "caosVM::v_P2", "pragma": {"implementation": "caosVM::v_P2", "saveimpl": "caosVM::s_P2", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_P2", "stackdelta": 1}, "c_RNDV": {"filename": "caosVM_variables.cpp", "category": "variables", "arguments": [{"name": "var", "type": "variable"}, {"name": "value1", "type": "integer"}, {"name": "value", "type": "integer"}], "name": "RNDV", "match": "RNDV", "type": "command", "syntaxstring": "RNDV (command) var (variable) value1 (integer) value (integer)", "uniquename": "c_RNDV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_RNDV", "pragma": {"variants": "c1 c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_EGGL": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the egg limit - when there are more than this many norns in the world, eggs should not hatch.\n", "arguments": [], "name": "EGGL", "match": "EGGL", "type": "integer", "syntaxstring": "EGGL (integer)", "uniquename": "v_EGGL", "evalcost": {"default": 0}, "implementation": "caosVM::v_EGGL", "pragma": {"variants": "c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HATL": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the hatchery limit - when there are more than this many norns in the world, the hatchery should shut down.\n", "arguments": [], "name": "HATL", "match": "HATL", "type": "integer", "syntaxstring": "HATL (integer)", "uniquename": "v_HATL", "evalcost": {"default": 0}, "implementation": "caosVM::v_HATL", "pragma": {"variants": "c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_CABN": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [{"name": "left", "type": "integer"}, {"name": "top", "type": "integer"}, {"name": "right", "type": "integer"}, {"name": "bottom", "type": "integer"}], "name": "CABN", "match": "CABN", "type": "command", "syntaxstring": "CABN (command) left (integer) top (integer) right (integer) bottom (integer)", "uniquename": "c_CABN", "evalcost": {"default": 1}, "implementation": "caosVM::c_CABN", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_SPAS": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "description": "make specified vehicle agent pick up specified passenger\n", "arguments": [{"name": "vehicle", "type": "agent"}, {"name": "passenger", "type": "agent"}], "name": "SPAS", "match": "SPAS", "type": "command", "syntaxstring": "SPAS (command) vehicle (agent) passenger (agent)", "uniquename": "c_SPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_SPAS", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_GPAS": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [], "name": "GPAS", "match": "GPAS", "type": "command", "syntaxstring": "GPAS (command)", "uniquename": "c_GPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_GPAS_c2", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_GPAS_c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DPAS": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [], "name": "DPAS", "match": "DPAS", "type": "command", "syntaxstring": "DPAS (command)", "uniquename": "c_DPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_DPAS_c2", "pragma": {"variants": "c1 c2", "implementation": "caosVM::c_DPAS_c2"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_XVEC": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [], "name": "XVEC", "match": "XVEC", "type": "variable", "syntaxstring": "XVEC (variable)", "uniquename": "v_XVEC", "evalcost": {"default": 0}, "implementation": "caosVM::v_XVEC", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::s_XVEC", "stackdelta": 1}, "v_YVEC": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [], "name": "YVEC", "match": "YVEC", "type": "variable", "syntaxstring": "YVEC (variable)", "uniquename": "v_YVEC", "evalcost": {"default": 0}, "implementation": "caosVM::v_YVEC", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::s_YVEC", "stackdelta": 1}, "v_BUMP": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [], "name": "BUMP", "match": "BUMP", "type": "integer", "syntaxstring": "BUMP (integer)", "uniquename": "v_BUMP", "evalcost": {"default": 0}, "implementation": "caosVM::v_BUMP", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_TELE": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "description": "Teleport occupants of target vehicle to (x, y).\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "TELE", "match": "TELE", "type": "command", "syntaxstring": "TELE (command) x (integer) y (integer)", "uniquename": "c_TELE", "evalcost": {"default": 1}, "implementation": "caosVM::c_TELE", "pragma": {"variants": "c1 c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_DPS2": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "description": "Drop passengers of targ vehicle, like DPAS. If gravity is zero, passengers do not get gravity activated.\n", "arguments": [{"name": "gravity", "type": "integer"}], "name": "DPS2", "match": "DPS2", "type": "command", "syntaxstring": "DPS2 (command) gravity (integer)", "uniquename": "c_DPS2", "evalcost": {"default": 1}, "implementation": "caosVM::c_DPS2", "pragma": {"variants": "c2"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}}, "c3": {"v_TOUC": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Determines whether the two given agents are touching.  Returns 0 (if not) or 1 (if so).\n", "arguments": [{"name": "first", "type": "agent"}, {"name": "second", "type": "agent"}], "name": "TOUC", "match": "TOUC", "type": "integer", "syntaxstring": "TOUC (integer) first (agent) second (agent)", "uniquename": "v_TOUC", "evalcost": {"default": 0, "c1": 0, "c2": 0}, "implementation": "caosVM::v_TOUC", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_RTAR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets TARG to a random agent with the given family/genus/species.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "RTAR", "match": "RTAR", "type": "command", "syntaxstring": "RTAR (command) family (integer) genus (integer) species (integer)", "uniquename": "c_RTAR", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_RTAR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_TTAR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Locates a random agent that is touching OWNR (see ETCH) and that\nmatches the given classifier, and sets it to TARG.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "TTAR", "match": "TTAR", "type": "command", "syntaxstring": "TTAR (command) family (integer) genus (integer) species (integer)", "uniquename": "c_TTAR", "evalcost": {"default": 1}, "implementation": "caosVM::c_TTAR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_STAR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Locates a random agent that is visible to OWNR (see ESEE) and that\nmatches the given classifier, then sets it to TARG.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "STAR", "match": "STAR", "type": "command", "syntaxstring": "STAR (command) family (integer) genus (integer) species (integer)", "uniquename": "c_STAR", "evalcost": {"default": 1}, "implementation": "caosVM::c_STAR", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_NEW_SIMP": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Creates a new simple agent with given family/genus/species, given spritefile with image_count sprites\navailable starting at first_image in the spritefile, at the screen depth given by plane.\nTARG is set to the newly-created agent.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "sprite_file", "type": "string"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "plane", "type": "integer"}], "name": "NEW: SIMP", "match": "SIMP", "type": "command", "syntaxstring": "NEW: SIMP (command) family (integer) genus (integer) species (integer) sprite_file (string) image_count (integer) first_image (integer) plane (integer)", "uniquename": "c_NEW_SIMP", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_SIMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "c_NEW_COMP": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Creates a new composite agent with given family/genus/species, given spritefile with image_count sprites\navailable starting at first_image in the spritefile, with the first part at the screen depth given by plane.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "sprite_file", "type": "string"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "plane", "type": "integer"}], "name": "NEW: COMP", "match": "COMP", "type": "command", "syntaxstring": "NEW: COMP (command) family (integer) genus (integer) species (integer) sprite_file (string) image_count (integer) first_image (integer) plane (integer)", "uniquename": "c_NEW_COMP", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_COMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "c_NEW_VHCL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Creates a new vehicle agent with given family/genus/species, given spritefile with image_count sprites\navailable starting at first_image in the spritefile, with the first part at the screen depth given by plane.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "sprite_file", "type": "string"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "plane", "type": "integer"}], "name": "NEW: VHCL", "match": "VHCL", "type": "command", "syntaxstring": "NEW: VHCL (command) family (integer) genus (integer) species (integer) sprite_file (string) image_count (integer) first_image (integer) plane (integer)", "uniquename": "c_NEW_VHCL", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_VHCL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "v_TARG": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns TARG, the currently-targeted agent.\n", "arguments": [], "name": "TARG", "match": "TARG", "type": "agent", "syntaxstring": "TARG (agent)", "uniquename": "v_TARG", "evalcost": {"default": 0}, "implementation": "caosVM::v_TARG", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_OWNR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns OWNR, the agent that is running the script.\n", "arguments": [], "name": "OWNR", "match": "OWNR", "type": "agent", "syntaxstring": "OWNR (agent)", "uniquename": "v_OWNR", "evalcost": {"default": 0, "c1": 0, "c2": 0}, "implementation": "caosVM::v_OWNR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NULL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns a null (zero) agent.\n", "arguments": [], "name": "NULL", "match": "NULL", "type": "agent", "syntaxstring": "NULL (agent)", "uniquename": "v_NULL", "evalcost": {"default": 0}, "implementation": "caosVM::v_NULL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_POSE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the displayed sprite of TARG to the frame in the sprite file with the given integer.\n", "arguments": [{"name": "pose", "type": "integer"}], "name": "POSE", "match": "POSE", "type": "command", "syntaxstring": "POSE (command) pose (integer)", "uniquename": "c_POSE", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_POSE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ATTR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets attributes of the TARG agent.\n", "arguments": [{"name": "attr", "type": "integer"}], "name": "ATTR", "match": "ATTR", "type": "command", "syntaxstring": "ATTR (command) attr (integer)", "uniquename": "c_ATTR", "evalcost": {"default": 1}, "implementation": "caosVM::c_ATTR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ATTR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Attributes of the TARG agent.\n", "arguments": [], "name": "ATTR", "match": "ATTR", "type": "variable", "syntaxstring": "ATTR (variable)", "uniquename": "v_ATTR", "evalcost": {"default": 0}, "implementation": "caosVM::v_ATTR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_ATTR", "stackdelta": 1}, "c_TICK": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Initiates the agent timer-- the Timer script will then be run once every tickrate ticks.\nSetting tickrate to zero will stop the timer.\n", "arguments": [{"name": "tickrate", "type": "integer"}], "name": "TICK", "match": "TICK", "type": "command", "syntaxstring": "TICK (command) tickrate (integer)", "uniquename": "c_TICK", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_TICK", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_BHVR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the behaviour of the TARG agent.\n", "arguments": [{"name": "bhvr", "type": "integer"}], "name": "BHVR", "match": "BHVR", "type": "command", "syntaxstring": "BHVR (command) bhvr (integer)", "uniquename": "c_BHVR", "evalcost": {"default": 1}, "implementation": "caosVM::c_BHVR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TARG": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets TARG (the target agent) to the given agent.\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "TARG", "match": "TARG", "type": "command", "syntaxstring": "TARG (command) agent (agent)", "uniquename": "c_TARG", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_TARG", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FROM": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the agent that sent the message being processed, or NULL if no agent was involved.\n", "arguments": [], "name": "FROM", "match": "FROM", "type": "variable", "syntaxstring": "FROM (variable)", "uniquename": "v_FROM", "evalcost": {"default": 0}, "implementation": "caosVM::v_FROM_ds", "pragma": {"variants": "c3", "implementation": "caosVM::v_FROM_ds"}, "status": "maybe", "saveimpl": "caosVM::s_FROM_ds", "stackdelta": 1}, "v_POSE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the number of the frame in the TARG part/agent's sprite file that is currently being displayed, or -1 if part# doesn't exist on a compound agent.\n", "arguments": [], "name": "POSE", "match": "POSE", "type": "integer", "syntaxstring": "POSE (integer)", "uniquename": "v_POSE", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_KILL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Destroys the agent in question. However, you cannot destroy PNTR.\nRemember, use DEAD first for Creatures!\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "KILL", "match": "KILL", "type": "command", "syntaxstring": "KILL (command) agent (agent)", "uniquename": "c_KILL", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_KILL", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ANIM": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the animation string for TARG, in the format '1 2 3 4'.\nIf it ends with '255', loops back to beginning; if it ends with '255 X', loops back to frame X.\n\n<i>todo: compound agent stuff</i>\n", "arguments": [{"name": "poselist", "type": "bytestring"}], "name": "ANIM", "match": "ANIM", "type": "command", "syntaxstring": "ANIM (command) poselist (bytestring)", "uniquename": "c_ANIM", "evalcost": {"default": 1}, "implementation": "caosVM::c_ANIM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ANMS": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Exactly like ANIM, only using a string and not a bytestring for poselist source.\n", "arguments": [{"name": "poselist", "type": "string"}], "name": "ANMS", "match": "ANMS", "type": "command", "syntaxstring": "ANMS (command) poselist (string)", "uniquename": "c_ANMS", "evalcost": {"default": 1}, "implementation": "caosVM::c_ANMS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ABBA": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the first_image (ie, absolute base) value for the current agent/part, or -1 if part# doesn't exist on a compound agent.\n", "arguments": [], "name": "ABBA", "match": "ABBA", "type": "integer", "syntaxstring": "ABBA (integer)", "uniquename": "v_ABBA", "evalcost": {"default": 0}, "implementation": "caosVM::v_ABBA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_BASE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the frame in the TARG agent's spritefile that will be used as its base image.\nThis is relative to the first image set with one of the NEW: commands.\n", "arguments": [{"name": "index", "type": "integer"}], "name": "BASE", "match": "BASE", "type": "command", "syntaxstring": "BASE (command) index (integer)", "uniquename": "c_BASE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_BASE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_BASE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the frame in the TARG agent/part's spritefile being used as the BASE image, or -1 if part# doesn't exist on a compound agent.\n", "arguments": [], "name": "BASE", "match": "BASE", "type": "integer", "syntaxstring": "BASE (integer)", "uniquename": "v_BASE", "evalcost": {"default": 0}, "implementation": "caosVM::v_BASE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_BHVR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the behaviour of the TARG agent.\n", "arguments": [], "name": "BHVR", "match": "BHVR", "type": "integer", "syntaxstring": "BHVR (integer)", "uniquename": "v_BHVR", "evalcost": {"default": 0}, "implementation": "caosVM::v_BHVR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CARR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the agent that is carrying the TARG agent.  If TARG is not being carried, returns\nNULL.\n", "arguments": [], "name": "CARR", "match": "CARR", "type": "agent", "syntaxstring": "CARR (agent)", "uniquename": "v_CARR", "evalcost": {"default": 0}, "implementation": "caosVM::v_CARR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_FMLY": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the family of the TARG agent.\n", "arguments": [], "name": "FMLY", "match": "FMLY", "type": "integer", "syntaxstring": "FMLY (integer)", "uniquename": "v_FMLY", "evalcost": {"default": 0}, "implementation": "caosVM::v_FMLY", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_GNUS": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the genus of the TARG agent.\n", "arguments": [], "name": "GNUS", "match": "GNUS", "type": "integer", "syntaxstring": "GNUS (integer)", "uniquename": "v_GNUS", "evalcost": {"default": 0}, "implementation": "caosVM::v_GNUS", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_SPCS": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the species of the TARG agent.\n", "arguments": [], "name": "SPCS", "match": "SPCS", "type": "integer", "syntaxstring": "SPCS (integer)", "uniquename": "v_SPCS", "evalcost": {"default": 0}, "implementation": "caosVM::v_SPCS", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_PLNE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the plane (z-order) of the TARG agent.\n", "arguments": [], "name": "PLNE", "match": "PLNE", "type": "integer", "syntaxstring": "PLNE (integer)", "uniquename": "v_PLNE", "evalcost": {"default": 0}, "implementation": "caosVM::v_PLNE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_PNTR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the pointer agent (the Hand).\n", "arguments": [], "name": "PNTR", "match": "PNTR", "type": "agent", "syntaxstring": "PNTR (agent)", "uniquename": "v_PNTR", "evalcost": {"default": 0}, "implementation": "caosVM::v_PNTR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MESG_WRIT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sends a message of type message_id to the given agent.  FROM will be set to OWNR unless\nthere is no agent involved in sending the message.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "message_id", "type": "integer"}], "name": "MESG WRIT", "match": "WRIT", "type": "command", "syntaxstring": "MESG WRIT (command) agent (agent) message_id (integer)", "uniquename": "c_MESG_WRIT", "namespace": "mesg", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MESG_WRIT", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_MESG_WRT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sends a message of type message_id to the given agent, much like MESG WRIT, but with the\naddition of parameters.  The message will be sent after waiting the number of ticks set\nin delay (except doesn't, right now.  Delay must be set to zero for now.)\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "message_id", "type": "integer"}, {"name": "param_1", "type": "anything"}, {"name": "param_2", "type": "anything"}, {"name": "delay", "type": "integer"}], "name": "MESG WRT+", "match": "WRT+", "type": "command", "syntaxstring": "MESG WRT+ (command) agent (agent) message_id (integer) param_1 (anything) param_2 (anything) delay (integer)", "uniquename": "c_MESG_WRT", "namespace": "mesg", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MESG_WRT", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "v_TOTL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the total number of in-game agents matching the given family/genus/species.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "TOTL", "match": "TOTL", "type": "integer", "syntaxstring": "TOTL (integer) family (integer) genus (integer) species (integer)", "uniquename": "v_TOTL", "evalcost": {"default": 0}, "implementation": "caosVM::v_TOTL", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_SHOW": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets visibility of the TARG agent to cameras. 0 = invisible, 1 = visible.\n", "arguments": [{"name": "visibility", "type": "integer"}], "name": "SHOW", "match": "SHOW", "type": "command", "syntaxstring": "SHOW (command) visibility (integer)", "uniquename": "c_SHOW", "evalcost": {"default": 1}, "implementation": "caosVM::c_SHOW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_SHOW": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "SHOW", "match": "SHOW", "type": "integer", "syntaxstring": "SHOW (integer)", "uniquename": "v_SHOW", "evalcost": {"default": 0}, "implementation": "caosVM::v_SHOW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSX": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the X position of the TARG agent in the world.\n", "arguments": [], "name": "POSX", "match": "POSX", "type": "float", "syntaxstring": "POSX (float)", "uniquename": "v_POSX", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSX", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSY": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the Y position of the TARG agent in the world.\n", "arguments": [], "name": "POSY", "match": "POSY", "type": "float", "syntaxstring": "POSY (float)", "uniquename": "v_POSY", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSY", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FRAT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the delay between frame changes of the TARG agent or current PART.\nMust be from 1 to 255, 1 being the normal rate, 2 being half as quickly, and so on.\n", "arguments": [{"name": "framerate", "type": "integer"}], "name": "FRAT", "match": "FRAT", "type": "command", "syntaxstring": "FRAT (command) framerate (integer)", "uniquename": "c_FRAT", "evalcost": {"default": 1}, "implementation": "caosVM::c_FRAT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_OVER": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Waits (blocks the TARG agent) until the animation of the TARG agent or PART is over.\n", "arguments": [], "name": "OVER", "match": "OVER", "type": "command", "syntaxstring": "OVER (command)", "uniquename": "c_OVER", "evalcost": {"default": 1}, "implementation": "caosVM::c_OVER", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PUHL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets relative x/y coordinates for TARG's pickup point.\nPose is -1 for all poses, or a pose relative to the first image specified in NEW: (not BASE).\n", "arguments": [{"name": "pose", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "PUHL", "match": "PUHL", "type": "command", "syntaxstring": "PUHL (command) pose (integer) x (integer) y (integer)", "uniquename": "c_PUHL", "evalcost": {"default": 1}, "implementation": "caosVM::c_PUHL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_PUHL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the coordinate for TARG's pickup point. x_or_y should be 1 for x, or 2 for y.\n", "arguments": [{"name": "pose", "type": "integer"}, {"name": "x_or_y", "type": "integer"}], "name": "PUHL", "match": "PUHL", "type": "integer", "syntaxstring": "PUHL (integer) pose (integer) x_or_y (integer)", "uniquename": "v_PUHL", "evalcost": {"default": 0}, "implementation": "caosVM::v_PUHL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_POSL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the left side of TARG's bounding box.\n", "arguments": [], "name": "POSL", "match": "POSL", "type": "float", "syntaxstring": "POSL (float)", "uniquename": "v_POSL", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSL", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POST": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the top side of TARG's bounding box.\n", "arguments": [], "name": "POST", "match": "POST", "type": "float", "syntaxstring": "POST (float)", "uniquename": "v_POST", "evalcost": {"default": 0}, "implementation": "caosVM::v_POST", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the right side of TARG's bounding box.\n", "arguments": [], "name": "POSR", "match": "POSR", "type": "float", "syntaxstring": "POSR (float)", "uniquename": "v_POSR", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSB": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the bottom side of TARG's bounding box.\n", "arguments": [], "name": "POSB", "match": "POSB", "type": "float", "syntaxstring": "POSB (float)", "uniquename": "v_POSB", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSB", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WDTH": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the TARG agent's width.\n", "arguments": [], "name": "WDTH", "match": "WDTH", "type": "integer", "syntaxstring": "WDTH (integer)", "uniquename": "v_WDTH", "evalcost": {"default": 0}, "implementation": "caosVM::v_WDTH", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PLNE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the plane (the z-order) of the TARG agent.  Higher values are closer to the camera.\n", "arguments": [{"name": "depth", "type": "integer"}], "name": "PLNE", "match": "PLNE", "type": "command", "syntaxstring": "PLNE (command) depth (integer)", "uniquename": "c_PLNE", "evalcost": {"default": 1}, "implementation": "caosVM::c_PLNE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TINT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the tinting of the TARG agent to the given red, blue, and green values.\n", "arguments": [{"name": "red_tint", "type": "integer"}, {"name": "green_tint", "type": "integer"}, {"name": "blue_tint", "type": "integer"}, {"name": "rotation", "type": "integer"}, {"name": "swap", "type": "integer"}], "name": "TINT", "match": "TINT", "type": "command", "syntaxstring": "TINT (command) red_tint (integer) green_tint (integer) blue_tint (integer) rotation (integer) swap (integer)", "uniquename": "c_TINT", "evalcost": {"default": 1}, "implementation": "caosVM::c_TINT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_RNGE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the TARG agent's range (i.e., the distance it can see and hear).\n", "arguments": [{"name": "distance", "type": "float"}], "name": "RNGE", "match": "RNGE", "type": "command", "syntaxstring": "RNGE (command) distance (float)", "uniquename": "c_RNGE", "evalcost": {"default": 1}, "implementation": "caosVM::c_RNGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_RNGE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the TARG agent's range.\n", "arguments": [], "name": "RNGE", "match": "RNGE", "type": "integer", "syntaxstring": "RNGE (integer)", "uniquename": "v_RNGE", "evalcost": {"default": 0}, "implementation": "caosVM::v_RNGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_TRAN": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Tests if the pixel at (x,y) on the TARG agent is transparent.\nReturns 0 or 1.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "TRAN", "match": "TRAN", "type": "integer", "syntaxstring": "TRAN (integer) x (integer) y (integer)", "uniquename": "v_TRAN", "evalcost": {"default": 0}, "implementation": "caosVM::v_TRAN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TRAN": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the TARG agent's behaviour with regard to transparency.  If set to 1, invisible\nparts of the agent can't be clicked.  If 0, anywhere on the agent (including transparent\nparts) can be clicked.\n", "arguments": [{"name": "transparency", "type": "integer"}, {"name": "part_no", "type": "integer"}], "name": "TRAN", "match": "TRAN", "type": "command", "syntaxstring": "TRAN (command) transparency (integer) part_no (integer)", "uniquename": "c_TRAN", "evalcost": {"default": 1}, "implementation": "caosVM::c_TRAN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_HGHT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the TARG agent's height.\n", "arguments": [], "name": "HGHT", "match": "HGHT", "type": "integer", "syntaxstring": "HGHT (integer)", "uniquename": "v_HGHT", "evalcost": {"default": 0}, "implementation": "caosVM::v_HGHT", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HAND": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the name of the Hand; default is 'hand'.\n", "arguments": [], "name": "HAND", "match": "HAND", "type": "string", "syntaxstring": "HAND (string)", "uniquename": "v_HAND", "evalcost": {"default": 0}, "implementation": "caosVM::v_HAND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_HAND": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the name of the Hand.\n", "arguments": [{"name": "name", "type": "string"}], "name": "HAND", "match": "HAND", "type": "command", "syntaxstring": "HAND (command) name (string)", "uniquename": "c_HAND", "evalcost": {"default": 1}, "implementation": "caosVM::c_HAND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_TICK": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Return the agent timer tick rate of the TARG agent.\n", "arguments": [], "name": "TICK", "match": "TICK", "type": "integer", "syntaxstring": "TICK (integer)", "uniquename": "v_TICK", "evalcost": {"default": 0}, "implementation": "caosVM::v_TICK", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PUPT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets relative x/y coordinates for the location in the world where the TARG agent picks up\nobjects.  The pose is relative to the first image set in NEW: (not BASE).\n", "arguments": [{"name": "pose", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "PUPT", "match": "PUPT", "type": "command", "syntaxstring": "PUPT (command) pose (integer) x (integer) y (integer)", "uniquename": "c_PUPT", "evalcost": {"default": 1}, "implementation": "caosVM::c_PUPT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_STPT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Stop the script running in TARG, if any.\n", "arguments": [], "name": "STPT", "match": "STPT", "type": "command", "syntaxstring": "STPT (command)", "uniquename": "c_STPT", "evalcost": {"default": 1}, "implementation": "caosVM::c_STPT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DCOR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Turns the display of the TARG agent's physical core on and off. Gives a general idea of\nits size and location (including invisible agents).\n", "arguments": [{"name": "core_on", "type": "integer"}], "name": "DCOR", "match": "DCOR", "type": "command", "syntaxstring": "DCOR (command) core_on (integer)", "uniquename": "c_DCOR", "evalcost": {"default": 1}, "implementation": "caosVM::c_DCOR", "pragma": {"variants": "all"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_MIRA": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Determines whether or not the TARG agent's current sprite is mirrored. Returns 0 or 1.\n", "arguments": [], "name": "MIRA", "match": "MIRA", "type": "integer", "syntaxstring": "MIRA (integer)", "uniquename": "v_MIRA", "evalcost": {"default": 0}, "implementation": "caosVM::v_MIRA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MIRA": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Turns mirroring of the TARG agent's current sprite on or off (0 or 1).\n", "arguments": [{"name": "mirror_on", "type": "integer"}], "name": "MIRA", "match": "MIRA", "type": "command", "syntaxstring": "MIRA (command) mirror_on (integer)", "uniquename": "c_MIRA", "evalcost": {"default": 1}, "implementation": "caosVM::c_MIRA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_DISQ": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Calculates the square of the distance between the centers of the TARG agent and the given\nagent.\n", "arguments": [{"name": "other", "type": "agent"}], "name": "DISQ", "match": "DISQ", "type": "float", "syntaxstring": "DISQ (float) other (agent)", "uniquename": "v_DISQ", "evalcost": {"default": 0}, "implementation": "caosVM::v_DISQ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ALPH": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the degree of alpha blending on the TARG agent, to a value from 0 (solid) to 256\n(invisible). The second parameter will turn alpha blending on and off.\n", "arguments": [{"name": "alpha_value", "type": "integer"}, {"name": "enable", "type": "integer"}], "name": "ALPH", "match": "ALPH", "type": "command", "syntaxstring": "ALPH (command) alpha_value (integer) enable (integer)", "uniquename": "c_ALPH", "evalcost": {"default": 1}, "implementation": "caosVM::c_ALPH", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_HELD": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the agent currently held by the TARG agent, or a random one if there are more than one.\n", "arguments": [], "name": "HELD", "match": "HELD", "type": "agent", "syntaxstring": "HELD (agent)", "uniquename": "v_HELD", "evalcost": {"default": 0}, "implementation": "caosVM::v_HELD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_GALL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Changes the sprite file and first image associated with the TARG agent or current PART.\n", "arguments": [{"name": "spritefile", "type": "string"}, {"name": "first_image", "type": "integer"}], "name": "GALL", "match": "GALL", "type": "command", "syntaxstring": "GALL (command) spritefile (string) first_image (integer)", "uniquename": "c_GALL", "evalcost": {"default": 1}, "implementation": "caosVM::c_GALL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_GALL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the name of the sprite file associated with the TARG agent or current PART, or a blank string if part# is invalid on a compound agent.\n", "arguments": [], "name": "GALL", "match": "GALL", "type": "string", "syntaxstring": "GALL (string)", "uniquename": "v_GALL", "evalcost": {"default": 0}, "implementation": "caosVM::v_GALL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_SEEE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns 1 if the first agent can see the other, or 0 otherwise.\n", "arguments": [{"name": "first", "type": "agent"}, {"name": "second", "type": "agent"}], "name": "SEEE", "match": "SEEE", "type": "integer", "syntaxstring": "SEEE (integer) first (agent) second (agent)", "uniquename": "v_SEEE", "evalcost": {"default": 0}, "implementation": "caosVM::v_SEEE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_TINT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the tint value for TARG agent. Pass 1 for red, 2 for blue, 3 for green, 4 for rotation or 5 for swap.\n", "arguments": [{"name": "attribute", "type": "integer"}], "name": "TINT", "match": "TINT", "type": "integer", "syntaxstring": "TINT (integer) attribute (integer)", "uniquename": "v_TINT", "evalcost": {"default": 0}, "implementation": "caosVM::v_TINT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_TINO": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Works like the TINT command, but only applies the tint to the current frame, and discards the rest.\n", "arguments": [{"name": "red", "type": "integer"}, {"name": "green", "type": "integer"}, {"name": "blue", "type": "integer"}, {"name": "rotation", "type": "integer"}, {"name": "swap", "type": "integer"}], "name": "TINO", "match": "TINO", "type": "command", "syntaxstring": "TINO (command) red (integer) green (integer) blue (integer) rotation (integer) swap (integer)", "uniquename": "c_TINO", "evalcost": {"default": 1}, "implementation": "caosVM::c_TINO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_DROP": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Causes the TARG agent to drop what it is carrying in a safe location.\n", "arguments": [], "name": "DROP", "match": "DROP", "type": "command", "syntaxstring": "DROP (command)", "uniquename": "c_DROP", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_DROP", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_NCLS": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "previous", "type": "agent"}, {"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "NCLS", "match": "NCLS", "type": "agent", "syntaxstring": "NCLS (agent) previous (agent) family (integer) genus (integer) species (integer)", "uniquename": "v_NCLS", "evalcost": {"default": 0}, "implementation": "caosVM::v_NCLS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_PCLS": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "previous", "type": "agent"}, {"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "PCLS", "match": "PCLS", "type": "agent", "syntaxstring": "PCLS (agent) previous (agent) family (integer) genus (integer) species (integer)", "uniquename": "v_PCLS", "evalcost": {"default": 0}, "implementation": "caosVM::v_PCLS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_TCOR": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "topy", "type": "float"}, {"name": "bottomy", "type": "float"}, {"name": "leftx", "type": "float"}, {"name": "rightx", "type": "float"}], "name": "TCOR", "match": "TCOR", "type": "integer", "syntaxstring": "TCOR (integer) topy (float) bottomy (float) leftx (float) rightx (float)", "uniquename": "v_TCOR", "evalcost": {"default": 0}, "implementation": "caosVM::v_TCOR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_CORE": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "topy", "type": "float"}, {"name": "bottomy", "type": "float"}, {"name": "leftx", "type": "float"}, {"name": "rightx", "type": "float"}], "name": "CORE", "match": "CORE", "type": "command", "syntaxstring": "CORE (command) topy (float) bottomy (float) leftx (float) rightx (float)", "uniquename": "c_CORE", "evalcost": {"default": 1}, "implementation": "caosVM::c_CORE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_TWIN": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "source", "type": "agent"}, {"name": "null_vars", "type": "integer"}], "name": "TWIN", "match": "TWIN", "type": "agent", "syntaxstring": "TWIN (agent) source (agent) null_vars (integer)", "uniquename": "v_TWIN", "evalcost": {"default": 0}, "implementation": "caosVM::v_TWIN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SCLE": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "pose", "type": "integer"}, {"name": "scaleby", "type": "integer"}], "name": "SCLE", "match": "SCLE", "type": "command", "syntaxstring": "SCLE (command) pose (integer) scaleby (integer)", "uniquename": "c_SCLE", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCLE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_STRC": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Draw the current agent (or part? don't know) with the given width/height (ie, stretch the sprite). Set enable to 1 to enable, or 0 to disable.\n", "arguments": [{"name": "width", "type": "integer"}, {"name": "height", "type": "integer"}, {"name": "enable", "type": "integer"}], "name": "STRC", "match": "STRC", "type": "command", "syntaxstring": "STRC (command) width (integer) height (integer) enable (integer)", "uniquename": "c_STRC", "evalcost": {"default": 1}, "implementation": "caosVM::c_STRC", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_IMGE": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "filename", "type": "string"}], "name": "IMGE", "match": "IMGE", "type": "command", "syntaxstring": "IMGE (command) filename (string)", "uniquename": "c_IMGE", "evalcost": {"default": 1}, "implementation": "caosVM::c_IMGE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TNTW": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "index", "type": "integer"}], "name": "TNTW", "match": "TNTW", "type": "command", "syntaxstring": "TNTW (command) index (integer)", "uniquename": "c_TNTW", "evalcost": {"default": 1}, "implementation": "caosVM::c_TNTW", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PRNT": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "pose", "type": "integer"}], "name": "PRNT", "match": "PRNT", "type": "command", "syntaxstring": "PRNT (command) pose (integer)", "uniquename": "c_PRNT", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRNT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_VISI": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns 1 if the TARG agent is on camera, or 0 otherwise. If checkall is 0, only checks\nmain camera, otherwise checks all.\n", "arguments": [{"name": "checkall", "type": "integer"}], "name": "VISI", "match": "VISI", "type": "integer", "syntaxstring": "VISI (integer) checkall (integer)", "uniquename": "v_VISI", "evalcost": {"default": 0}, "implementation": "caosVM::v_VISI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ONTV": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns 1 if the specified agent is on camera, or 0 otherwise. If checkall is 0, only checks\nmain camera, otherwise checks all.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "checkall", "type": "integer"}], "name": "ONTV", "match": "ONTV", "type": "integer", "syntaxstring": "ONTV (integer) agent (agent) checkall (integer)", "uniquename": "v_ONTV", "evalcost": {"default": 0}, "implementation": "caosVM::v_ONTV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_META": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Sets the metaroom that the current camera is pointing at.  Coordinates point to top left of new\ncamera position.  Set a coordinate to -1 to use the top-left corner of the metaroom.\n\nTransition: 0 for none, 1 for flip horzizontally, 2 for burst.\n", "arguments": [{"name": "metaroom_id", "type": "integer"}, {"name": "camera_x", "type": "integer"}, {"name": "camera_y", "type": "integer"}, {"name": "transition", "type": "integer"}], "name": "META", "match": "META", "type": "command", "syntaxstring": "META (command) metaroom_id (integer) camera_x (integer) camera_y (integer) transition (integer)", "uniquename": "c_META", "evalcost": {"default": 1}, "implementation": "caosVM::c_META", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_META": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the metaroom the current camera is looking at.\n", "arguments": [], "name": "META", "match": "META", "type": "integer", "syntaxstring": "META (integer)", "uniquename": "v_META", "evalcost": {"default": 0}, "implementation": "caosVM::v_META", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_CMRT": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Focuses the current camera on the TARG agent.\n\nSet pan to 0 for no panning (jump), 1 for smooth scrolling if in the same metaroom, or 2\nfor smooth scrolling if the given location is already visible.\n", "arguments": [{"name": "pan", "type": "integer"}], "name": "CMRT", "match": "CMRT", "type": "command", "syntaxstring": "CMRT (command) pan (integer)", "uniquename": "c_CMRT", "evalcost": {"default": 1}, "implementation": "caosVM::c_CMRT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_CMRA": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Sets the position of the current camera so that the top left corner of the view is at the\ngiven coordinates.\n\nSet pan to 0 for no panning (jump), or 1 for smooth scrolling if in the same metaroom.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "pan", "type": "integer"}], "name": "CMRA", "match": "CMRA", "type": "command", "syntaxstring": "CMRA (command) x (integer) y (integer) pan (integer)", "uniquename": "c_CMRA", "evalcost": {"default": 1}, "implementation": "caosVM::c_CMRA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_CMRP": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Sets the position of the current camera so that the view centers on the given coordinates.\n\nSet pan to 0 for no panning (jump), 1 for smooth scrolling if in the same metaroom, or 2\nfor smooth scrolling if the given location is already visible.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "pan", "type": "integer"}], "name": "CMRP", "match": "CMRP", "type": "command", "syntaxstring": "CMRP (command) x (integer) y (integer) pan (integer)", "uniquename": "c_CMRP", "evalcost": {"default": 1}, "implementation": "caosVM::c_CMRP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_CMRX": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the X position at the center of the current camera's view.\n", "arguments": [], "name": "CMRX", "match": "CMRX", "type": "integer", "syntaxstring": "CMRX (integer)", "uniquename": "v_CMRX", "evalcost": {"default": 0}, "implementation": "caosVM::v_CMRX", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CMRY": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the Y position at the center of the current camera's view.\n", "arguments": [], "name": "CMRY", "match": "CMRY", "type": "integer", "syntaxstring": "CMRY (integer)", "uniquename": "v_CMRY", "evalcost": {"default": 0}, "implementation": "caosVM::v_CMRY", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDW": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the width of the current camera's view.\n", "arguments": [], "name": "WNDW", "match": "WNDW", "type": "integer", "syntaxstring": "WNDW (integer)", "uniquename": "v_WNDW", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDH": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the height of the current camera's view.\n", "arguments": [], "name": "WNDH", "match": "WNDH", "type": "integer", "syntaxstring": "WNDH (integer)", "uniquename": "v_WNDH", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDH", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDB": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the position of the bottom edge of the current camera's view.\n", "arguments": [], "name": "WNDB", "match": "WNDB", "type": "integer", "syntaxstring": "WNDB (integer)", "uniquename": "v_WNDB", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDL": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the position of the left edge of the current camera's view.\n", "arguments": [], "name": "WNDL", "match": "WNDL", "type": "integer", "syntaxstring": "WNDL (integer)", "uniquename": "v_WNDL", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDR": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the position of the right edge of the current camera's view.\n", "arguments": [], "name": "WNDR", "match": "WNDR", "type": "integer", "syntaxstring": "WNDR (integer)", "uniquename": "v_WNDR", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDT": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the position of the top edge of the current camera's view.\n", "arguments": [], "name": "WNDT", "match": "WNDT", "type": "integer", "syntaxstring": "WNDT (integer)", "uniquename": "v_WNDT", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_WDOW": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Toggles full-screen mode on and off.\n", "arguments": [], "name": "WDOW", "match": "WDOW", "type": "command", "syntaxstring": "WDOW (command)", "uniquename": "c_WDOW", "evalcost": {"default": 1}, "implementation": "caosVM::c_WDOW", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_WDOW": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns 1 if in full-screen mode, or 0 otherwise (windowed).\n", "arguments": [], "name": "WDOW", "match": "WDOW", "type": "integer", "syntaxstring": "WDOW (integer)", "uniquename": "v_WDOW", "evalcost": {"default": 0}, "implementation": "caosVM::v_WDOW", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_TRCK": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Tell the current camera to track the specified agent, or set to NULL to stop tracking.\nxpercent and ypercent define a rectangle on the screen which the camera should keep the tracked agent inside.\nStyle 0 is brittle-- tracking is broken easily.  Style 1 is flexible-- moving the camera\nback inside the rectangle resumes tracking.  Style 3 is hard-- you can't move outside the\nrectangle.\nRransition: 0 for none, 1 for flip horizontal, 2 for burst.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "xpercent", "type": "integer"}, {"name": "ypercent", "type": "integer"}, {"name": "style", "type": "integer"}, {"name": "transition", "type": "integer"}], "name": "TRCK", "match": "TRCK", "type": "command", "syntaxstring": "TRCK (command) agent (agent) xpercent (integer) ypercent (integer) style (integer) transition (integer)", "uniquename": "c_TRCK", "evalcost": {"default": 1}, "implementation": "caosVM::c_TRCK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "v_TRCK": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns agent being tracked by the current camera, if any.\n", "arguments": [], "name": "TRCK", "match": "TRCK", "type": "agent", "syntaxstring": "TRCK (agent)", "uniquename": "v_TRCK", "evalcost": {"default": 0}, "implementation": "caosVM::v_TRCK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_LINE": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Draw a line between two endpoints with the given coordinates, in the color specified by\nthe given red, green, and blue values.\n\nSet stipple_on to a number of pixels to alternate for stippling, or set stipple_off to\nturn stippling off.\n\nSetting the the endpoints to the same point will remove all lines for the agent.\n", "arguments": [{"name": "x1", "type": "integer"}, {"name": "y1", "type": "integer"}, {"name": "x2", "type": "integer"}, {"name": "y2", "type": "integer"}, {"name": "r", "type": "integer"}, {"name": "g", "type": "integer"}, {"name": "b", "type": "integer"}, {"name": "stipple_on", "type": "integer"}, {"name": "stipple_off", "type": "integer"}], "name": "LINE", "match": "LINE", "type": "command", "syntaxstring": "LINE (command) x1 (integer) y1 (integer) x2 (integer) y2 (integer) r (integer) g (integer) b (integer) stipple_on (integer) stipple_off (integer)", "uniquename": "c_LINE", "evalcost": {"default": 1}, "implementation": "caosVM::c_LINE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -9}, "v_SNAX": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Determines whether or not the given image file exists in the world\nimages directory (0 or 1).\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SNAX", "match": "SNAX", "type": "integer", "syntaxstring": "SNAX (integer) filename (string)", "uniquename": "v_SNAX", "evalcost": {"default": 0}, "implementation": "caosVM::v_SNAX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SCAM": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Sets which camera to use in camera macro commands.  If 'agent' and\n'part' are NULL, the main camera will be used.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "part", "type": "integer"}], "name": "SCAM", "match": "SCAM", "type": "command", "syntaxstring": "SCAM (command) agent (agent) part (integer)", "uniquename": "c_SCAM", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCAM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_ZOOM": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Zoom the current camera by the given number of pixels on the given x/y\ncoordinates in the world.  If the coordinates are set to -1, the\ncurrent center position of the camera's view will be used.\n", "arguments": [{"name": "pixels", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "ZOOM", "match": "ZOOM", "type": "command", "syntaxstring": "ZOOM (command) pixels (integer) x (integer) y (integer)", "uniquename": "c_ZOOM", "evalcost": {"default": 1}, "implementation": "caosVM::c_ZOOM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_SNAP": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Take a snapshot and save it to the given filename (don't include the extension). x/y are the centerpoint, width/height the size, and zoom the percentage to zoom out.\n", "arguments": [{"name": "filename", "type": "string"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "width", "type": "integer"}, {"name": "height", "type": "integer"}, {"name": "zoom", "type": "integer"}], "name": "SNAP", "match": "SNAP", "type": "command", "syntaxstring": "SNAP (command) filename (string) x (integer) y (integer) width (integer) height (integer) zoom (integer)", "uniquename": "c_SNAP", "evalcost": {"default": 1}, "implementation": "caosVM::c_SNAP", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "v_LOFT": {"filename": "caosVM_camera.cpp", "category": "cameras", "arguments": [{"name": "filename", "type": "string"}], "name": "LOFT", "match": "LOFT", "type": "integer", "syntaxstring": "LOFT (integer) filename (string)", "uniquename": "v_LOFT", "evalcost": {"default": 0}, "implementation": "caosVM::v_LOFT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_BKGD": {"filename": "caosVM_camera.cpp", "category": "cameras", "arguments": [{"name": "metaroom_id", "type": "integer"}, {"name": "background", "type": "string"}, {"name": "transition", "type": "integer"}], "name": "BKGD", "match": "BKGD", "type": "command", "syntaxstring": "BKGD (command) metaroom_id (integer) background (string) transition (integer)", "uniquename": "c_BKGD", "evalcost": {"default": 1}, "implementation": "caosVM::c_BKGD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_BKGD": {"filename": "caosVM_camera.cpp", "category": "cameras", "arguments": [{"name": "metaroom_id", "type": "integer"}], "name": "BKGD", "match": "BKGD", "type": "string", "syntaxstring": "BKGD (string) metaroom_id (integer)", "uniquename": "v_BKGD", "evalcost": {"default": 0}, "implementation": "caosVM::v_BKGD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_FRSH": {"filename": "caosVM_camera.cpp", "category": "cameras", "arguments": [], "name": "FRSH", "match": "FRSH", "type": "command", "syntaxstring": "FRSH (command)", "uniquename": "c_FRSH", "evalcost": {"default": 1}, "implementation": "caosVM::c_FRSH", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PART": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Sets the part number of the TARGeted compound agent or vehicle to work on (ANIM/POSE use this,\namongst other commands).\n", "arguments": [{"name": "part_id", "type": "integer"}], "name": "PART", "match": "PART", "type": "command", "syntaxstring": "PART (command) part_id (integer)", "uniquename": "c_PART", "evalcost": {"default": 1}, "implementation": "caosVM::c_PART", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PART": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Returns 1 if the given part number exists on the target agent, or 0 if otherwise.\n", "arguments": [{"name": "part_id", "type": "integer"}], "name": "PART", "match": "PART", "type": "integer", "syntaxstring": "PART (integer) part_id (integer)", "uniquename": "v_PART", "evalcost": {"default": 0}, "implementation": "caosVM::v_PART", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PAT_DULL": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Adds a new 'dull' part to the TARGed compound agent/vehicle which does nothing but display an image.\nPart ID numbers begin at 1. x/y/plane are relative to the agent you're working on.\n", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}], "name": "PAT: DULL", "match": "DULL", "type": "command", "syntaxstring": "PAT: DULL (command) part (integer) sprite (string) first_image (integer) x (integer) y (integer) plane (integer)", "uniquename": "c_PAT_DULL", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_DULL", "pragma": {"variants": "cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "c_PAT_BUTT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Adds a new 'button' part to the TARGed compound agent/vehicle.\nPart ID numbers begin at 1. x/y/plane are relative to the agent you're working on.\n'hoveranim' is the animation to use when the part is mouse-overed - see ANIM for details.\n'messageid' is the message sent when the button is clicked - _p1_ of the message is set to the part number.\nIf option is 1, mouseclicks/hovers only apply to non-transparent areas. otherwise, option should be 0.\n", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "image_count", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "hoveranim", "type": "byte-string"}, {"name": "messageid", "type": "integer"}, {"name": "option", "type": "integer"}], "name": "PAT: BUTT", "match": "BUTT", "type": "command", "syntaxstring": "PAT: BUTT (command) part (integer) sprite (string) first_image (integer) image_count (integer) x (integer) y (integer) plane (integer) hoveranim (byte-string) messageid (integer) option (integer)", "uniquename": "c_PAT_BUTT", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_BUTT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -10}, "c_PAT_FIXD": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Adds a new 'fixed' text part to the TARGed compound agent/vehicle,\nPart ID numbers begin at 1. x/y/plane are relative to the agent you're working on.\nThe 'first_image' frame of the given sprite file will be used underneath the text, which is set with PTXT.\n", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "fontsprite", "type": "string"}], "name": "PAT: FIXD", "match": "FIXD", "type": "command", "syntaxstring": "PAT: FIXD (command) part (integer) sprite (string) first_image (integer) x (integer) y (integer) plane (integer) fontsprite (string)", "uniquename": "c_PAT_FIXD", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_FIXD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "c_PAT_TEXT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Adds a new text entry part to the TARGed compound agent/vehicle.\nPart ID numbers begin at 1. x/y/plane are relative to the agent you're working on.\nThe 'first_image' frame of the given sprite file will be used underneath the text.  The part will\ngain the focus when FCUS is called or when it is clicked.  A message of the given type will be sent.\n", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "message_id", "type": "integer"}, {"name": "fontsprite", "type": "string"}], "name": "PAT: TEXT", "match": "TEXT", "type": "command", "syntaxstring": "PAT: TEXT (command) part (integer) sprite (string) first_image (integer) x (integer) y (integer) plane (integer) message_id (integer) fontsprite (string)", "uniquename": "c_PAT_TEXT", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_TEXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -8}, "c_PAT_CMRA": {"filename": "caosVM_compound.cpp", "category": "compound agents", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "viewwidth", "type": "integer"}, {"name": "viewheight", "type": "integer"}, {"name": "camerawidth", "type": "integer"}, {"name": "cameraheight", "type": "integer"}], "name": "PAT: CMRA", "match": "CMRA", "type": "command", "syntaxstring": "PAT: CMRA (command) part (integer) sprite (string) first_image (integer) x (integer) y (integer) plane (integer) viewwidth (integer) viewheight (integer) camerawidth (integer) cameraheight(integer)", "uniquename": "c_PAT_CMRA", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_CMRA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -10}, "c_PAT_GRPH": {"filename": "caosVM_compound.cpp", "category": "compound agents", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "numvalues", "type": "integer"}], "name": "PAT: GRPH", "match": "GRPH", "type": "command", "syntaxstring": "PAT: GRPH (command) part (integer) sprite (string) first_image (integer) x (integer) y (integer) plane (integer) numvalues (integer)", "uniquename": "c_PAT_GRPH", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_GRPH", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "c_PAT_KILL": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Kills the specified part of the TARGed compound agent or vehicle.\n", "arguments": [{"name": "part", "type": "integer"}], "name": "PAT: KILL", "match": "KILL", "type": "command", "syntaxstring": "PAT: KILL (command) part (integer)", "uniquename": "c_PAT_KILL", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_KILL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PAT_MOVE": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "move the compound part specified to the new relative position specified\n", "arguments": [{"name": "part", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "PAT: MOVE", "match": "MOVE", "type": "command", "syntaxstring": "PAT: MOVE (command) part (integer) x (integer) y (integer)", "uniquename": "c_PAT_MOVE", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_MOVE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_FCUS": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Focus the current targeted part, which must be a PAT: TEXT.\nIf the target is null, then the current part will be unfocused.\n", "arguments": [], "name": "FCUS", "match": "FCUS", "type": "command", "syntaxstring": "FCUS (command)", "uniquename": "c_FCUS", "evalcost": {"default": 1}, "implementation": "caosVM::c_FCUS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_FRMT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Alters the appearance of the target text part.  The spacing values and margins are to be specified in\npixels.  Justification can be 0 for left, 1 for right, 2 for center, 4 for bottom, 8 for middle or 16\nfor 'last page scroll' (TODO?), and you can add these together (except 0/1 are mutually exclusive, obviously).\n", "arguments": [{"name": "left_margin", "type": "integer"}, {"name": "top_margin", "type": "integer"}, {"name": "right_margin", "type": "integer"}, {"name": "button_margin", "type": "integer"}, {"name": "line_spacing", "type": "integer"}, {"name": "char_spacing", "type": "integer"}, {"name": "justification", "type": "integer"}], "name": "FRMT", "match": "FRMT", "type": "command", "syntaxstring": "FRMT (command) left_margin (integer) top_margin (integer) right_margin (integer) button_margin (integer) line_spacing (integer) char_spacing (integer) justification (integer)", "uniquename": "c_FRMT", "evalcost": {"default": 1}, "implementation": "caosVM::c_FRMT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "c_PTXT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Sets the text displayed in the current text part.\n", "arguments": [{"name": "text", "type": "string"}], "name": "PTXT", "match": "PTXT", "type": "command", "syntaxstring": "PTXT (command) text (string)", "uniquename": "c_PTXT", "evalcost": {"default": 1}, "implementation": "caosVM::c_PTXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PTXT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Returns the text displayed in the current text part.\n", "arguments": [], "name": "PTXT", "match": "PTXT", "type": "string", "syntaxstring": "PTXT (string)", "uniquename": "v_PTXT", "evalcost": {"default": 0}, "implementation": "caosVM::v_PTXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_PNXT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Returns the next part of the TARG compound agent or vehicle, (or -1 if you have reached the end, or\nthe first part if you go past -1).\n", "arguments": [{"name": "previous_part", "type": "integer"}], "name": "PNXT", "match": "PNXT", "type": "integer", "syntaxstring": "PNXT (integer) previous_part (integer)", "uniquename": "v_PNXT", "evalcost": {"default": 0}, "implementation": "caosVM::v_PNXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PAGE": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Sets the zero-based page number of the current text part.  This must be less than NPGS.\n", "arguments": [{"name": "page", "type": "integer"}], "name": "PAGE", "match": "PAGE", "type": "command", "syntaxstring": "PAGE (command) page (integer)", "uniquename": "c_PAGE", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PAGE": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Returns the zero-based page number of the current text part.\n", "arguments": [], "name": "PAGE", "match": "PAGE", "type": "integer", "syntaxstring": "PAGE (integer)", "uniquename": "v_PAGE", "evalcost": {"default": 0}, "implementation": "caosVM::v_PAGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NPGS": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Returns the number of pages for the current text part.\n", "arguments": [], "name": "NPGS", "match": "NPGS", "type": "integer", "syntaxstring": "NPGS (integer)", "uniquename": "v_NPGS", "evalcost": {"default": 0}, "implementation": "caosVM::v_NPGS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_GRPV": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Add the given value to the given line on a graph.\n", "arguments": [{"name": "line", "type": "integer"}, {"name": "value", "type": "float"}], "name": "GRPV", "match": "GRPV", "type": "command", "syntaxstring": "GRPV (command) line (integer) value (float)", "uniquename": "c_GRPV", "evalcost": {"default": 1}, "implementation": "caosVM::c_GRPV", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_GRPL": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Add a new line to a graph created with PAT: GRPH with the given\ncharacteristics.\n", "arguments": [{"name": "red", "type": "integer"}, {"name": "green", "type": "integer"}, {"name": "blue", "type": "integer"}, {"name": "min", "type": "float"}, {"name": "max", "type": "float"}], "name": "GRPL", "match": "GRPL", "type": "command", "syntaxstring": "GRPL (command) red (integer) green (integer) blue (integer) min (float) max (float)", "uniquename": "c_GRPL", "evalcost": {"default": 1}, "implementation": "caosVM::c_GRPL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_OUTX": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Prints the given string on the output stream, after first quoting it and transforming\nescapes in the string to quoted escapes.\n", "arguments": [{"name": "val", "type": "string"}], "name": "OUTX", "match": "OUTX", "type": "command", "syntaxstring": "OUTX (command) val (string)", "uniquename": "c_OUTX", "evalcost": {"default": 1}, "implementation": "caosVM::c_OUTX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_OUTS": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Prints the given string to the output stream.  Does nothing when run inside a script.\n", "arguments": [{"name": "val", "type": "string"}], "name": "OUTS", "match": "OUTS", "type": "command", "syntaxstring": "OUTS (command) val (string)", "uniquename": "c_OUTS", "evalcost": {"default": 1}, "implementation": "caosVM::c_OUTS", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_OUTV": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Prints the given decimal value to the ouput stream.  Does nothing when run inside a script.\n", "arguments": [{"name": "val", "type": "decimal"}], "name": "OUTV", "match": "OUTV", "type": "command", "syntaxstring": "OUTV (command) val (decimal)", "uniquename": "c_OUTV", "evalcost": {"default": 1}, "implementation": "caosVM::c_OUTV", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_GAME": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns the game variable with the given name.\n", "arguments": [{"name": "name", "type": "string"}], "name": "GAME", "match": "GAME", "type": "variable", "syntaxstring": "GAME (variable) name (string)", "uniquename": "v_GAME", "evalcost": {"default": 0}, "implementation": "caosVM::v_GAME", "status": "maybe", "saveimpl": "caosVM::s_GAME", "stackdelta": 0}, "v_EAME": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns the non-persistent game variable with the given name.\n", "arguments": [{"name": "name", "type": "anything"}], "name": "EAME", "match": "EAME", "type": "variable", "syntaxstring": "EAME (variable) name (anything)", "uniquename": "v_EAME", "evalcost": {"default": 0}, "implementation": "caosVM::v_EAME", "status": "maybe", "saveimpl": "caosVM::s_EAME", "stackdelta": 0}, "c_DELG": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Deletes the game variable with the given name.\n", "arguments": [{"name": "name", "type": "string"}], "name": "DELG", "match": "DELG", "type": "command", "syntaxstring": "DELG (command) name (string)", "uniquename": "c_DELG", "evalcost": {"default": 1}, "implementation": "caosVM::c_DELG", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SCRP": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the beginning of a normal script applying to the agent with the given classifier\ninfo.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "SCRP", "match": "SCRP", "type": "command", "syntaxstring": "SCRP (command) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "c_SCRP", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCRP", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_RSCR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the beginning of a removal script.\n", "arguments": [], "name": "RSCR", "match": "RSCR", "type": "command", "syntaxstring": "RSCR (command)", "uniquename": "c_RSCR", "evalcost": {"default": 1}, "implementation": "caosVM::c_RSCR", "pragma": {"variants": "c2 cv c3 sm"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ISCR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the beginning of an installer script.\n", "arguments": [], "name": "ISCR", "match": "ISCR", "type": "command", "syntaxstring": "ISCR (command)", "uniquename": "c_ISCR", "evalcost": {"default": 1}, "implementation": "caosVM::c_ISCR", "pragma": {"variants": "c2 cv c3 sm"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ENDM": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the end of a script.\n", "arguments": [], "name": "ENDM", "match": "ENDM", "type": "command", "syntaxstring": "ENDM (command)", "uniquename": "c_ENDM", "evalcost": {"default": 1}, "implementation": "caosVM::c_ENDM", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_RGAM": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Restore all game variables to their saved or default values.\n", "arguments": [], "name": "RGAM", "match": "RGAM", "type": "command", "syntaxstring": "RGAM (command)", "uniquename": "c_RGAM", "evalcost": {"default": 1}, "implementation": "caosVM::c_RGAM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MOWS": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns whether the lawn was cut last Sunday or not, in theory.\nHow the C2E engine determines this, and whose lawn, exactly, and whether or not it takes into account the fact that the lawn may have been mown on Saturday or Friday, and whether it will cut you any slack if it's winter and the grass isn't growing much, is currently unknown.\n\nIn openc2e, currently a no-op (ie, the lawn is never, ever cut properly).\n", "arguments": [], "name": "MOWS", "match": "MOWS", "type": "integer", "syntaxstring": "MOWS (integer)", "uniquename": "v_MOWS", "evalcost": {"default": 0}, "implementation": "caosVM::v_MOWS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_VMNR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns the minor version number of the engine.\n", "arguments": [], "name": "VMNR", "match": "VMNR", "type": "integer", "syntaxstring": "VMNR (integer)", "uniquename": "v_VMNR", "evalcost": {"default": 0}, "implementation": "caosVM::v_VMNR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_VMJR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns the major version number of the engine.\n", "arguments": [], "name": "VMJR", "match": "VMJR", "type": "integer", "syntaxstring": "VMJR (integer)", "uniquename": "v_VMJR", "evalcost": {"default": 0}, "implementation": "caosVM::v_VMJR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WOLF": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "This returns/sets some engine settings which are useful for 'wolfing runs', among other things.\nSet andmask for the information you want returned, and eormask for the information you want changed.\n\n1 is for display rendering (turn it off to speed up the game)\n2 is for running ticks as fast as possible, rather than according to BUZZ\n4 is for refreshing the display (when display rendering is turned off, this will update the display at the end of the tick)\n(note that 4 is unset by the engine when the display is refreshed)\n8 is autokill\n", "arguments": [{"name": "andmask", "type": "integer"}, {"name": "eormask", "type": "integer"}], "name": "WOLF", "match": "WOLF", "type": "integer", "syntaxstring": "WOLF (integer) andmask (integer) eormask (integer)", "uniquename": "v_WOLF", "evalcost": {"default": 0}, "implementation": "caosVM::v_WOLF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_LANG": {"filename": "caosVM_core.cpp", "category": "core functions", "arguments": [], "name": "LANG", "match": "LANG", "type": "string", "syntaxstring": "LANG (string)", "uniquename": "v_LANG", "evalcost": {"default": 0}, "implementation": "caosVM::v_LANG", "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_OC2E_DDIR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns a list of the data directories available, separated with \\n. Remember that the last one is the working directory.\n", "arguments": [], "name": "OC2E DDIR", "match": "DDIR", "type": "string", "syntaxstring": "OC2E DDIR (string)", "uniquename": "v_OC2E_DDIR", "namespace": "oc2e", "evalcost": {"default": 0}, "implementation": "caosVM::v_OC2E_DDIR", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_STIM_SHOU": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Send a stimulus of the given type to all Creatures who can hear OWNR.\n", "arguments": [{"name": "stimulus", "type": "integer"}, {"name": "strength", "type": "float"}], "name": "STIM SHOU", "match": "SHOU", "type": "command", "syntaxstring": "STIM SHOU (command) stimulus (integer) strength (float)", "uniquename": "c_STIM_SHOU", "namespace": "stim", "evalcost": {"default": 1}, "implementation": "caosVM::c_STIM_SHOU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_STIM_SIGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Sends a stimulus of the given type to all Creatures who can see OWNR.\n", "arguments": [{"name": "stimulus", "type": "integer"}, {"name": "strength", "type": "float"}], "name": "STIM SIGN", "match": "SIGN", "type": "command", "syntaxstring": "STIM SIGN (command) stimulus (integer) strength (float)", "uniquename": "c_STIM_SIGN", "namespace": "stim", "evalcost": {"default": 1}, "implementation": "caosVM::c_STIM_SIGN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_STIM_TACT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Sends a stimulus of the given type to all Creatures who are touching OWNR.\n", "arguments": [{"name": "stimulus", "type": "integer"}, {"name": "strength", "type": "float"}], "name": "STIM TACT", "match": "TACT", "type": "command", "syntaxstring": "STIM TACT (command) stimulus (integer) strength (float)", "uniquename": "c_STIM_TACT", "namespace": "stim", "evalcost": {"default": 1}, "implementation": "caosVM::c_STIM_TACT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_STIM_WRIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Sends a stimulus of the given type to specific Creature.\n", "arguments": [{"name": "creature", "type": "agent"}, {"name": "stimulus", "type": "integer"}, {"name": "strength", "type": "float"}], "name": "STIM WRIT", "match": "WRIT", "type": "command", "syntaxstring": "STIM WRIT (command) creature (agent) stimulus (integer) strength (float)", "uniquename": "c_STIM_WRIT", "namespace": "stim", "evalcost": {"default": 1}, "implementation": "caosVM::c_STIM_WRIT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_SWAY_SHOU": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Adjusts these four drives in all Creatures who can hear OWNR.\n", "arguments": [{"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "SWAY SHOU", "match": "SHOU", "type": "command", "syntaxstring": "SWAY SHOU (command) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float)", "uniquename": "c_SWAY_SHOU", "namespace": "sway", "evalcost": {"default": 1}, "implementation": "caosVM::c_SWAY_SHOU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -8}, "c_SWAY_SIGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Adjusts these four drives in all Creatures who can see OWNR.\n", "arguments": [{"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "SWAY SIGN", "match": "SIGN", "type": "command", "syntaxstring": "SWAY SIGN (command) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float)", "uniquename": "c_SWAY_SIGN", "namespace": "sway", "evalcost": {"default": 1}, "implementation": "caosVM::c_SWAY_SIGN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -8}, "c_SWAY_TACT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Adjusts these four drives in all Creatures who are touching OWNR.\n", "arguments": [{"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "SWAY TACT", "match": "TACT", "type": "command", "syntaxstring": "SWAY TACT (command) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float)", "uniquename": "c_SWAY_TACT", "namespace": "sway", "evalcost": {"default": 1}, "implementation": "caosVM::c_SWAY_TACT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -8}, "c_SWAY_WRIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Adjusts these four drives in the specified creature.\n", "arguments": [{"name": "creature", "type": "agent"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "SWAY WRIT", "match": "WRIT", "type": "command", "syntaxstring": "SWAY WRIT (command) creature (agent) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float)", "uniquename": "c_SWAY_WRIT", "namespace": "sway", "evalcost": {"default": 1}, "implementation": "caosVM::c_SWAY_WRIT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -9}, "c_NOHH": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Tells the target Creature to stop holding hands with the pointer.\n", "arguments": [], "name": "NOHH", "match": "NOHH", "type": "command", "syntaxstring": "NOHH (command)", "uniquename": "c_NOHH", "evalcost": {"default": 1}, "implementation": "caosVM::c_NOHH", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ZOMB": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Turns zombification of the target Creature on and off.  Set to 1 to disconnect the brain and\nmotor of the target Creature, and 0 to undo.\n", "arguments": [{"name": "zombie", "type": "integer"}], "name": "ZOMB", "match": "ZOMB", "type": "command", "syntaxstring": "ZOMB (command) zombie (integer)", "uniquename": "c_ZOMB", "evalcost": {"default": 1}, "implementation": "caosVM::c_ZOMB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ZOMB": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns 1 if target Creature is zombified, or 0 if otherwise.\n", "arguments": [], "name": "ZOMB", "match": "ZOMB", "type": "integer", "syntaxstring": "ZOMB (integer)", "uniquename": "v_ZOMB", "evalcost": {"default": 0}, "implementation": "caosVM::v_ZOMB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_DIRN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Changes the target Creature to face a different direction.\n", "arguments": [{"name": "direction", "type": "integer"}], "name": "DIRN", "match": "DIRN", "type": "command", "syntaxstring": "DIRN (command) direction (integer)", "uniquename": "c_DIRN", "evalcost": {"default": 1}, "implementation": "caosVM::c_DIRN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_DIRN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the direction the target Creatures is facing.\n", "arguments": [], "name": "DIRN", "match": "DIRN", "type": "integer", "syntaxstring": "DIRN (integer)", "uniquename": "v_DIRN", "evalcost": {"default": 0}, "implementation": "caosVM::v_DIRN", "pragma": {"variants": "c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HHLD": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns Creatures that are holding hands with pointer, or NULL if none.\n", "arguments": [], "name": "HHLD", "match": "HHLD", "type": "agent", "syntaxstring": "HHLD (agent)", "uniquename": "v_HHLD", "evalcost": {"default": 0}, "implementation": "caosVM::v_HHLD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MVFT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Move the target Creature's foot (along with the rest of the Creature, obviously) to the given\ncoordinates.  You should use this rather than MVTO for Creatures.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "MVFT", "match": "MVFT", "type": "command", "syntaxstring": "MVFT (command) x (float) y (float)", "uniquename": "c_MVFT", "evalcost": {"default": 1}, "implementation": "caosVM::c_MVFT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_CREA": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Determines whether the given agent is a creature or not (0 or 1).\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "CREA", "match": "CREA", "type": "integer", "syntaxstring": "CREA (integer) agent (agent)", "uniquename": "v_CREA", "evalcost": {"default": 0}, "implementation": "caosVM::v_CREA", "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_VOCB": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature learn all vocabulary words immediately.\n", "arguments": [], "name": "VOCB", "match": "VOCB", "type": "command", "syntaxstring": "VOCB (command)", "uniquename": "c_VOCB", "evalcost": {"default": 1}, "implementation": "caosVM::c_VOCB", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DEAD": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Kill the target Creature biologically.\n", "arguments": [], "name": "DEAD", "match": "DEAD", "type": "command", "syntaxstring": "DEAD (command)", "uniquename": "c_DEAD", "evalcost": {"default": 1}, "implementation": "caosVM::c_DEAD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DEAD": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Determines whether the target Creature is alive (0) or dead (255 in c1/c2, 1 otherwise).\n", "arguments": [], "name": "DEAD", "match": "DEAD", "type": "integer", "syntaxstring": "DEAD (integer)", "uniquename": "v_DEAD", "evalcost": {"default": 0}, "implementation": "caosVM::v_DEAD", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_NORN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Sets the target Creature to the given one.\n", "arguments": [{"name": "creature", "type": "agent"}], "name": "NORN", "match": "NORN", "type": "command", "syntaxstring": "NORN (command) creature (agent)", "uniquename": "c_NORN", "evalcost": {"default": 1}, "implementation": "caosVM::c_NORN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_NORN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the target Creature.\n", "arguments": [], "name": "NORN", "match": "NORN", "type": "agent", "syntaxstring": "NORN (agent)", "uniquename": "v_NORN", "evalcost": {"default": 0}, "implementation": "caosVM::v_NORN", "pragma": {"variants": "cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_URGE_SHOU": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Urges all Creatures who can hear OWNR to perform the given action on OWNR.\nThe two stimuli parameters can range from -1.0 (discourage) to 1.0 (encourage).\n", "arguments": [{"name": "noun_stim", "type": "float"}, {"name": "verb_id", "type": "integer"}, {"name": "verb_stim", "type": "float"}], "name": "URGE SHOU", "match": "SHOU", "type": "command", "syntaxstring": "URGE SHOU (command) noun_stim (float) verb_id (integer) verb_stim (float)", "uniquename": "c_URGE_SHOU", "namespace": "urge", "evalcost": {"default": 1}, "implementation": "caosVM::c_URGE_SHOU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_URGE_SIGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Urges all Creatures who can see OWNR to perform the given action on OWNR.\nThe two stimuli parameters can range from -1.0 (discourage) to 1.0 (encourage).\n", "arguments": [{"name": "noun_stim", "type": "float"}, {"name": "verb_id", "type": "integer"}, {"name": "verb_stim", "type": "float"}], "name": "URGE SIGN", "match": "SIGN", "type": "command", "syntaxstring": "URGE SIGN (command) noun_stim (float) verb_id (integer) verb_stim (float)", "uniquename": "c_URGE_SIGN", "namespace": "urge", "evalcost": {"default": 1}, "implementation": "caosVM::c_URGE_SIGN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_URGE_TACT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Urges all Creatures who are touching OWNR to perform the given action on OWNR.\nThe two stimuli parameters can range from -1.0 (discourage) to 1.0 (encourage).\n", "arguments": [{"name": "noun_stim", "type": "float"}, {"name": "verb_id", "type": "integer"}, {"name": "verb_stim", "type": "float"}], "name": "URGE TACT", "match": "TACT", "type": "command", "syntaxstring": "URGE TACT (command) noun_stim (float) verb_id (integer) verb_stim (float)", "uniquename": "c_URGE_TACT", "namespace": "urge", "evalcost": {"default": 1}, "implementation": "caosVM::c_URGE_TACT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_URGE_WRIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Urges the specified Creature to perform the specified action (verb) on the specified object type\n(noun).  Provide a stim greater than 1 to force, and an id of -1 and a stim greater than 1 to unforce.\n", "arguments": [{"name": "creature", "type": "agent"}, {"name": "noun_id", "type": "integer"}, {"name": "noun_stim", "type": "float"}, {"name": "verb_id", "type": "integer"}, {"name": "verb_stim", "type": "float"}], "name": "URGE WRIT", "match": "WRIT", "type": "command", "syntaxstring": "URGE WRIT (command) creature (agent) noun_id (integer) noun_stim (float) verb_id (integer) verb_stim (float)", "uniquename": "c_URGE_WRIT", "namespace": "urge", "evalcost": {"default": 1}, "implementation": "caosVM::c_URGE_WRIT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_DRIV": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Modifies the level of a drive in target Creature by the given level, which can range from -1.0 (decrease) to 1.0 (increase).\n", "arguments": [{"name": "drive_id", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "DRIV", "match": "DRIV", "type": "command", "syntaxstring": "DRIV (command) drive_id (integer) adjust (float)", "uniquename": "c_DRIV", "evalcost": {"default": 1}, "implementation": "caosVM::c_DRIV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_DRIV": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the level of a drive (0.0 to 1.0) in target Creature.\n", "arguments": [{"name": "drive_id", "type": "integer"}], "name": "DRIV", "match": "DRIV", "type": "float", "syntaxstring": "DRIV (float) drive_id (integer)", "uniquename": "v_DRIV", "evalcost": {"default": 0}, "implementation": "caosVM::v_DRIV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_CHEM": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Modifies the level of a chemical in target Creature's bloodstream by adjust, which can range from -1.0 (decrease) to 1.0 (increase).\n", "arguments": [{"name": "chemical_id", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "CHEM", "match": "CHEM", "type": "command", "syntaxstring": "CHEM (command) chemical_id (integer) adjust (float)", "uniquename": "c_CHEM", "evalcost": {"default": 1}, "implementation": "caosVM::c_CHEM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_CHEM": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the level of a chemical (0.0 to 1.0) in target creature's bloodstream.\n", "arguments": [{"name": "chemical_id", "type": "integer"}], "name": "CHEM", "match": "CHEM", "type": "float", "syntaxstring": "CHEM (float) chemical_id (integer)", "uniquename": "v_CHEM", "evalcost": {"default": 0}, "implementation": "caosVM::v_CHEM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ASLP": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "If asleep is 1, makes the target creature sleep. If asleep is 0, makes the target creature wake.\n", "arguments": [{"name": "asleep", "type": "integer"}], "name": "ASLP", "match": "ASLP", "type": "command", "syntaxstring": "ASLP (command) asleep (integer)", "uniquename": "c_ASLP", "evalcost": {"default": 1}, "implementation": "caosVM::c_ASLP", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ASLP": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Determines whether the target Creature is asleep.\n", "arguments": [], "name": "ASLP", "match": "ASLP", "type": "integer", "syntaxstring": "ASLP (integer)", "uniquename": "v_ASLP", "evalcost": {"default": 0, "c1": 0, "c2": 0}, "implementation": "caosVM::v_ASLP", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_APPR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature approach the IT agent (or if none, an agent of that category using CAs),\nblocking until it makes it there or gives up.\n", "arguments": [], "name": "APPR", "match": "APPR", "type": "command", "syntaxstring": "APPR (command)", "uniquename": "c_APPR", "evalcost": {"default": 1}, "implementation": "caosVM::c_APPR", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_UNCS": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature conscious if 0, or unconscious if 1.\n", "arguments": [{"name": "unconscious", "type": "integer"}], "name": "UNCS", "match": "UNCS", "type": "command", "syntaxstring": "UNCS (command) unconscious (integer)", "uniquename": "c_UNCS", "evalcost": {"default": 1}, "implementation": "caosVM::c_UNCS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_UNCS": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns 1 if the target Creature is unconscious, or 0 otherwise.\n", "arguments": [], "name": "UNCS", "match": "UNCS", "type": "integer", "syntaxstring": "UNCS (integer)", "uniquename": "v_UNCS", "evalcost": {"default": 0}, "implementation": "caosVM::v_UNCS", "pragma": {"variants": "c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FACE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "number", "type": "integer"}], "name": "FACE", "match": "FACE", "type": "command", "syntaxstring": "FACE (command) number (integer)", "uniquename": "c_FACE", "evalcost": {"default": 1}, "implementation": "caosVM::c_FACE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FACE_INT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the front-facing pose for the current facial expression of the target creature.\n", "arguments": [], "name": "FACE INT", "match": "INT", "type": "integer", "syntaxstring": "FACE INT (integer)", "uniquename": "v_FACE_INT", "namespace": "face", "evalcost": {"default": 0}, "implementation": "caosVM::v_FACE_INT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_FACE_STRING": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the current sprite filename for the face of the target creature.\n", "arguments": [], "name": "FACE STRING", "match": "STRING", "type": "string", "syntaxstring": "FACE STRING (string)", "uniquename": "v_FACE_STRING", "namespace": "face", "evalcost": {"default": 0}, "implementation": "caosVM::v_FACE_STRING", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_LIKE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Causes the target Creature to state an opinion about the specified Creature.\n", "arguments": [{"name": "creature", "type": "agent"}], "name": "LIKE", "match": "LIKE", "type": "command", "syntaxstring": "LIKE (command) creature (agent)", "uniquename": "c_LIKE", "evalcost": {"default": 1}, "implementation": "caosVM::c_LIKE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_LIMB": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the filename for the specified part of a Creature, substituting as necessary.\n", "arguments": [{"name": "bodypart", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "gender", "type": "integer"}, {"name": "age", "type": "integer"}, {"name": "variant", "type": "integer"}], "name": "LIMB", "match": "LIMB", "type": "string", "syntaxstring": "LIMB (string) bodypart (integer) genus (integer) gender (integer) age (integer) variant (integer)", "uniquename": "v_LIMB", "evalcost": {"default": 0}, "implementation": "caosVM::v_LIMB", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_ORDR_SHOU": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature speak the specified speech to all creatures in hearing range.\n", "arguments": [{"name": "speech", "type": "string"}], "name": "ORDR SHOU", "match": "SHOU", "type": "command", "syntaxstring": "ORDR SHOU (command) speech (string)", "uniquename": "c_ORDR_SHOU", "namespace": "ordr", "evalcost": {"default": 1}, "implementation": "caosVM::c_ORDR_SHOU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ORDR_SIGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature speak the specified speech to all creatures that can see it.\n", "arguments": [{"name": "speech", "type": "string"}], "name": "ORDR SIGN", "match": "SIGN", "type": "command", "syntaxstring": "ORDR SIGN (command) speech (string)", "uniquename": "c_ORDR_SIGN", "namespace": "ordr", "evalcost": {"default": 1}, "implementation": "caosVM::c_ORDR_SIGN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ORDR_TACT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature speak the specified speech to all creatures that are touching it.\n", "arguments": [{"name": "speech", "type": "string"}], "name": "ORDR TACT", "match": "TACT", "type": "command", "syntaxstring": "ORDR TACT (command) speech (string)", "uniquename": "c_ORDR_TACT", "namespace": "ordr", "evalcost": {"default": 1}, "implementation": "caosVM::c_ORDR_TACT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ORDR_WRIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature speak the specified speech to the specified creature.\n", "arguments": [{"name": "creature", "type": "agent"}, {"name": "speech", "type": "string"}], "name": "ORDR WRIT", "match": "WRIT", "type": "command", "syntaxstring": "ORDR WRIT (command) creature (agent) speech (string)", "uniquename": "c_ORDR_WRIT", "namespace": "ordr", "evalcost": {"default": 1}, "implementation": "caosVM::c_ORDR_WRIT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_DREA": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Turns a Creature's dreaming on and off.  A Creature's instincts are\nprocessed while it is dreaming.  If it is not asleep already, then it\nwill be made to sleep before dreaming begins.\n", "arguments": [{"name": "dream", "type": "integer"}], "name": "DREA", "match": "DREA", "type": "command", "syntaxstring": "DREA (command) dream (integer)", "uniquename": "c_DREA", "evalcost": {"default": 1}, "implementation": "caosVM::c_DREA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_DREA": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns whether or not the target Creature is dreaming (0 or 1).\n", "arguments": [], "name": "DREA", "match": "DREA", "type": "integer", "syntaxstring": "DREA (integer)", "uniquename": "v_DREA", "evalcost": {"default": 0}, "implementation": "caosVM::v_DREA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_BORN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Registers the birth of the target Creature, and sends a birth event to\nthe game.\n", "arguments": [], "name": "BORN", "match": "BORN", "type": "command", "syntaxstring": "BORN (command)", "uniquename": "c_BORN", "evalcost": {"default": 1}, "implementation": "caosVM::c_BORN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_CAGE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the integer value of the target Creature's current life stage.\n", "arguments": [], "name": "CAGE", "match": "CAGE", "type": "integer", "syntaxstring": "CAGE (integer)", "uniquename": "v_CAGE", "evalcost": {"default": 0}, "implementation": "caosVM::v_CAGE", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_BYIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Determines whether or not the target Creature can reach the IT agent (0\nor 1).\n", "arguments": [], "name": "BYIT", "match": "BYIT", "type": "integer", "syntaxstring": "BYIT (integer)", "uniquename": "v_BYIT", "evalcost": {"default": 0}, "implementation": "caosVM::v_BYIT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v__IT_": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the agent that the OWNR creature was focused on when the\ncurrent script began running.\n", "arguments": [], "name": "_IT_", "match": "_IT_", "type": "agent", "syntaxstring": "_IT_ (agent)", "uniquename": "v__IT_", "evalcost": {"default": 0}, "implementation": "caosVM::v_IT", "pragma": {"implementation": "caosVM::v_IT", "variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_NEWC": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Creates a new creature over the space of a few ticks, using the specified agent/slot for genetic data. sex is 0 for random, 1 for male or 2 for female.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "gene_agent", "type": "agent"}, {"name": "gene_slot", "type": "integer"}, {"name": "sex", "type": "integer"}, {"name": "variant", "type": "integer"}], "name": "NEWC", "match": "NEWC", "type": "command", "syntaxstring": "NEWC (command) family (integer) gene_agent (agent) gene_slot (integer) sex (integer) variant (integer)", "uniquename": "c_NEWC", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEWC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_NEW_CREA": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Creates a new creature using the specified agent/slot for genetic data. sex is 0 for random, 1 for male or 2 for female.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "gene_agent", "type": "agent"}, {"name": "gene_slot", "type": "integer"}, {"name": "sex", "type": "integer"}, {"name": "variant", "type": "integer"}], "name": "NEW: CREA", "match": "CREA", "type": "command", "syntaxstring": "NEW: CREA (command) family (integer) gene_agent (agent) gene_slot (integer) sex (integer) variant (integer)", "uniquename": "c_NEW_CREA", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_CREA", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_NEW_CRAG": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "family", "type": "integer"}, {"name": "gene_agent", "type": "agent"}, {"name": "gene_slot", "type": "integer"}, {"name": "sex", "type": "integer"}, {"name": "variant", "type": "integer"}, {"name": "sprite_file", "type": "string"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "plane", "type": "integer"}], "name": "NEW: CRAG", "match": "CRAG", "type": "command", "syntaxstring": "NEW: CRAG (command) family (integer) gene_agent (agent) gene_slot (integer) sex (integer) variant (integer) sprite_file (string) image_count (integer) first_image (integer) plane (integer)", "uniquename": "c_NEW_CRAG", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_CRAG", "pragma": {"variants": "c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -9}, "c_LTCY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "action", "type": "integer"}, {"name": "min", "type": "integer"}, {"name": "max", "type": "integer"}], "name": "LTCY", "match": "LTCY", "type": "command", "syntaxstring": "LTCY (command) action (integer) min (integer) max (integer)", "uniquename": "c_LTCY", "evalcost": {"default": 1}, "implementation": "caosVM::c_LTCY", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_MATE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "MATE", "match": "MATE", "type": "command", "syntaxstring": "MATE (command)", "uniquename": "c_MATE", "evalcost": {"default": 1}, "implementation": "caosVM::c_MATE", "pragma": {"variants": "c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DRV": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "DRV!", "match": "DRV!", "type": "integer", "syntaxstring": "DRV! (integer)", "uniquename": "v_DRV", "evalcost": {"default": 0}, "implementation": "caosVM::v_DRV", "pragma": {"implementation": "caosVM::v_DRV", "variants": "c1 c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_IITT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Return the agent which the target creature is currently focused on. Note that you should probably use _IT_ in creature scripts.\n", "arguments": [], "name": "IITT", "match": "IITT", "type": "agent", "syntaxstring": "IITT (agent)", "uniquename": "v_IITT", "evalcost": {"default": 0}, "implementation": "caosVM::v_IITT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_AGES": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Age (ie, increase the life stage of) the target creature the specified number of times.\n", "arguments": [{"name": "times", "type": "integer"}], "name": "AGES", "match": "AGES", "type": "command", "syntaxstring": "AGES (command) times (integer)", "uniquename": "c_AGES", "evalcost": {"default": 1}, "implementation": "caosVM::c_AGES", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_LOCI": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Set the value of the specified loci of the target creature. 'type' is 0 for receptor loci and 1 for emitter loci.\nSee genetics documentation for details of the parameters.\n", "arguments": [{"name": "type", "type": "integer"}, {"name": "organ", "type": "integer"}, {"name": "tissue", "type": "integer"}, {"name": "id", "type": "integer"}, {"name": "value", "type": "float"}], "name": "LOCI", "match": "LOCI", "type": "command", "syntaxstring": "LOCI (command) type (integer) organ (integer) tissue (integer) id (integer) value (float)", "uniquename": "c_LOCI", "evalcost": {"default": 1}, "implementation": "caosVM::c_LOCI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "v_LOCI": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Return the current value of the specified loci of the target creature. 'type' is 0 for receptor loci and 1 for emitter loci.\nSee genetics documentation for details of thei parameters.\n", "arguments": [{"name": "type", "type": "integer"}, {"name": "organ", "type": "integer"}, {"name": "tissue", "type": "integer"}, {"name": "id", "type": "integer"}], "name": "LOCI", "match": "LOCI", "type": "float", "syntaxstring": "LOCI (float) type (integer) organ (integer) tissue (integer) id (integer)", "uniquename": "v_LOCI", "evalcost": {"default": 0}, "implementation": "caosVM::v_LOCI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_TAGE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns age of target creature, in ticks. Only counts ticks since it was BORN.\n", "arguments": [], "name": "TAGE", "match": "TAGE", "type": "integer", "syntaxstring": "TAGE (integer)", "uniquename": "v_TAGE", "evalcost": {"default": 0}, "implementation": "caosVM::v_TAGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_ORGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Return the number of organs the target creature has.\n", "arguments": [], "name": "ORGN", "match": "ORGN", "type": "integer", "syntaxstring": "ORGN (integer)", "uniquename": "v_ORGN", "evalcost": {"default": 0}, "implementation": "caosVM::v_ORGN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_ORGF": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Return some data about the specified organ (numbered starting at zero) of the target creature.\n\nvalue should be one of the following types of data:\n0: clock rate\n1: short term life force as a proportion of the initial life force\n2: repair rate\n3: injury to apply\n4: initial life force\n5: short term life force\n6: long term life force\n7: damage rate\n8: energy cost\n9: atp damage coefficient\n\nReturns -1 if the specified organ or value is invalid.\n", "arguments": [{"name": "organ", "type": "integer"}, {"name": "value", "type": "integer"}], "name": "ORGF", "match": "ORGF", "type": "float", "syntaxstring": "ORGF (float) organ (integer) value (integer)", "uniquename": "v_ORGF", "evalcost": {"default": 0}, "implementation": "caosVM::v_ORGF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ORGI": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns a count of receptors (value 0), emitters (value 1) or reactions (value 2) in the specified organ (numbered starting at zero) of the target creature.\n\nReturns -1 if the specified organ or value is invalid.\n", "arguments": [{"name": "organ", "type": "integer"}, {"name": "value", "type": "integer"}], "name": "ORGI", "match": "ORGI", "type": "integer", "syntaxstring": "ORGI (integer) organ (integer) value (integer)", "uniquename": "v_ORGI", "evalcost": {"default": 0}, "implementation": "caosVM::v_ORGI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SOUL": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}, {"name": "on", "type": "integer"}], "name": "SOUL", "match": "SOUL", "type": "command", "syntaxstring": "SOUL (command) part (integer) on (integer)", "uniquename": "c_SOUL", "evalcost": {"default": 1}, "implementation": "caosVM::c_SOUL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_SOUL": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}], "name": "SOUL", "match": "SOUL", "type": "integer", "syntaxstring": "SOUL (integer) part (integer)", "uniquename": "v_SOUL", "evalcost": {"default": 0}, "implementation": "caosVM::v_SOUL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DECN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "DECN", "match": "DECN", "type": "integer", "syntaxstring": "DECN (integer)", "uniquename": "v_DECN", "evalcost": {"default": 0}, "implementation": "caosVM::v_DECN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_ATTN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "ATTN", "match": "ATTN", "type": "integer", "syntaxstring": "ATTN (integer)", "uniquename": "v_ATTN", "evalcost": {"default": 0}, "implementation": "caosVM::v_ATTN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_TOUC": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "TOUC", "match": "TOUC", "type": "command", "syntaxstring": "TOUC (command)", "uniquename": "c_TOUC", "evalcost": {"default": 1}, "implementation": "caosVM::c_TOUC", "pragma": {"variants": "c1 c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_FORF": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "creature", "type": "agent"}], "name": "FORF", "match": "FORF", "type": "command", "syntaxstring": "FORF (command) creature (agent)", "uniquename": "c_FORF", "evalcost": {"default": 1}, "implementation": "caosVM::c_FORF", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_WALK": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "WALK", "match": "WALK", "type": "command", "syntaxstring": "WALK (command)", "uniquename": "c_WALK", "evalcost": {"default": 1}, "implementation": "caosVM::c_WALK", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DONE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "DONE", "match": "DONE", "type": "command", "syntaxstring": "DONE (command)", "uniquename": "c_DONE", "evalcost": {"default": 1}, "implementation": "caosVM::c_DONE", "pragma": {"variants": "c1 c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SAYN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "SAYN", "match": "SAYN", "type": "command", "syntaxstring": "SAYN (command)", "uniquename": "c_SAYN", "evalcost": {"default": 1}, "implementation": "caosVM::c_SAYN", "pragma": {"variants": "c1 c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_BRED": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}], "name": "BRED", "match": "BRED", "type": "integer", "syntaxstring": "BRED (integer) part (integer)", "uniquename": "v_BRED", "evalcost": {"default": 0}, "implementation": "caosVM::v_BRED", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_BVAR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "BVAR", "match": "BVAR", "type": "integer", "syntaxstring": "BVAR (integer)", "uniquename": "v_BVAR", "evalcost": {"default": 0}, "implementation": "caosVM::v_BVAR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_EXPR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "index", "type": "integer"}, {"name": "ticks", "type": "integer"}], "name": "EXPR", "match": "EXPR", "type": "command", "syntaxstring": "EXPR (command) index (integer) ticks (integer)", "uniquename": "c_EXPR", "evalcost": {"default": 1}, "implementation": "caosVM::c_EXPR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_EXPR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "EXPR", "match": "EXPR", "type": "integer", "syntaxstring": "EXPR (integer)", "uniquename": "v_EXPR", "evalcost": {"default": 0}, "implementation": "caosVM::v_EXPR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_TNTC": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "tintindex", "type": "integer"}, {"name": "part", "type": "integer"}, {"name": "commit", "type": "integer"}], "name": "TNTC", "match": "TNTC", "type": "command", "syntaxstring": "TNTC (command) tintindex (integer) part (integer) commit (integer)", "uniquename": "c_TNTC", "evalcost": {"default": 1}, "implementation": "caosVM::c_TNTC", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_MOTR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "enable", "type": "integer"}], "name": "MOTR", "match": "MOTR", "type": "command", "syntaxstring": "MOTR (command) enable (integer)", "uniquename": "c_MOTR", "evalcost": {"default": 1}, "implementation": "caosVM::c_MOTR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_MOTR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "MOTR", "match": "MOTR", "type": "integer", "syntaxstring": "MOTR (integer)", "uniquename": "v_MOTR", "evalcost": {"default": 0}, "implementation": "caosVM::v_MOTR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MIND": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "enable", "type": "integer"}], "name": "MIND", "match": "MIND", "type": "command", "syntaxstring": "MIND (command) enable (integer)", "uniquename": "c_MIND", "evalcost": {"default": 1}, "implementation": "caosVM::c_MIND", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_MIND": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "MIND", "match": "MIND", "type": "integer", "syntaxstring": "MIND (integer)", "uniquename": "v_MIND", "evalcost": {"default": 0}, "implementation": "caosVM::v_MIND", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_STEP": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "faculty", "type": "integer"}], "name": "STEP", "match": "STEP", "type": "command", "syntaxstring": "STEP (command) faculty (integer)", "uniquename": "c_STEP", "evalcost": {"default": 1}, "implementation": "caosVM::c_STEP", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_SEEN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "category", "type": "integer"}], "name": "SEEN", "match": "SEEN", "type": "agent", "syntaxstring": "SEEN (agent) category (integer)", "uniquename": "v_SEEN", "evalcost": {"default": 0}, "implementation": "caosVM::v_SEEN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DOIN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Make the target creature process the specified number of instincts.\n", "arguments": [{"name": "noinstincts", "type": "integer"}], "name": "DOIN", "match": "DOIN", "type": "command", "syntaxstring": "DOIN (command) noinstincts (integer)", "uniquename": "c_DOIN", "evalcost": {"default": 1}, "implementation": "caosVM::c_DOIN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_INS": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Return the number of unprocessed instincts left in the instinct queue for the target creature.\n", "arguments": [], "name": "INS#", "match": "INS#", "type": "integer", "syntaxstring": "INS# (integer)", "uniquename": "v_INS", "evalcost": {"default": 0}, "implementation": "caosVM::v_INS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_BODY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "set", "type": "integer"}, {"name": "layer", "type": "integer"}], "name": "BODY", "match": "BODY", "type": "command", "syntaxstring": "BODY (command) set (integer) layer (integer)", "uniquename": "c_BODY", "evalcost": {"default": 1}, "implementation": "caosVM::c_BODY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_BODY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}], "name": "BODY", "match": "BODY", "type": "integer", "syntaxstring": "BODY (integer) part (integer)", "uniquename": "v_BODY", "evalcost": {"default": 0}, "implementation": "caosVM::v_BODY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DYED": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}, {"name": "overlay", "type": "integer"}, {"name": "set", "type": "integer"}, {"name": "layer", "type": "integer"}], "name": "DYED", "match": "DYED", "type": "command", "syntaxstring": "DYED (command) part (integer) overlay (integer) set (integer) layer (integer)", "uniquename": "c_DYED", "evalcost": {"default": 1}, "implementation": "caosVM::c_DYED", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_HAIR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "ruffleness", "type": "integer"}], "name": "HAIR", "match": "HAIR", "type": "command", "syntaxstring": "HAIR (command) ruffleness (integer)", "uniquename": "c_HAIR", "evalcost": {"default": 1}, "implementation": "caosVM::c_HAIR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_NUDE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "NUDE", "match": "NUDE", "type": "command", "syntaxstring": "NUDE (command)", "uniquename": "c_NUDE", "evalcost": {"default": 1}, "implementation": "caosVM::c_NUDE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_RSET": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "RSET", "match": "RSET", "type": "command", "syntaxstring": "RSET (command)", "uniquename": "c_RSET", "evalcost": {"default": 1}, "implementation": "caosVM::c_RSET", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_STRE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "STRE", "match": "STRE", "type": "command", "syntaxstring": "STRE (command)", "uniquename": "c_STRE", "evalcost": {"default": 1}, "implementation": "caosVM::c_STRE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SWAP": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "variant", "type": "integer"}, {"name": "part", "type": "integer"}, {"name": "commit", "type": "integer"}], "name": "SWAP", "match": "SWAP", "type": "command", "syntaxstring": "SWAP (command) variant (integer) part (integer) commit (integer)", "uniquename": "c_SWAP", "evalcost": {"default": 1}, "implementation": "caosVM::c_SWAP", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_WEAR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}, {"name": "set", "type": "integer"}, {"name": "layer", "type": "integer"}], "name": "WEAR", "match": "WEAR", "type": "command", "syntaxstring": "WEAR (command) part (integer) set (integer) layer (integer)", "uniquename": "c_WEAR", "evalcost": {"default": 1}, "implementation": "caosVM::c_WEAR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_WEAR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}, {"name": "layer", "type": "integer"}], "name": "WEAR", "match": "WEAR", "type": "integer", "syntaxstring": "WEAR (integer) part (integer) layer (integer)", "uniquename": "v_WEAR", "evalcost": {"default": 0}, "implementation": "caosVM::v_WEAR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TNTO": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "tintindex", "type": "integer"}, {"name": "part", "type": "integer"}, {"name": "set", "type": "integer"}, {"name": "layer", "type": "integer"}], "name": "TNTO", "match": "TNTO", "type": "command", "syntaxstring": "TNTO (command) tintindex (integer) part (integer) set (integer) layer (integer)", "uniquename": "c_TNTO", "evalcost": {"default": 1}, "implementation": "caosVM::c_TNTO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_DFTX": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "DFTX", "match": "DFTX", "type": "float", "syntaxstring": "DFTX (float)", "uniquename": "v_DFTX", "evalcost": {"default": 0}, "implementation": "caosVM::v_DFTX", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DFTY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "DFTY", "match": "DFTY", "type": "float", "syntaxstring": "DFTY (float)", "uniquename": "v_DFTY", "evalcost": {"default": 0}, "implementation": "caosVM::v_DFTY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_UFTX": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "UFTX", "match": "UFTX", "type": "float", "syntaxstring": "UFTX (float)", "uniquename": "v_UFTX", "evalcost": {"default": 0}, "implementation": "caosVM::v_UFTX", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_UFTY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "UFTY", "match": "UFTY", "type": "float", "syntaxstring": "UFTY (float)", "uniquename": "v_UFTY", "evalcost": {"default": 0}, "implementation": "caosVM::v_UFTY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HEDX": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "index", "type": "integer"}], "name": "HEDX", "match": "HEDX", "type": "float", "syntaxstring": "HEDX (float) index (integer)", "uniquename": "v_HEDX", "evalcost": {"default": 0}, "implementation": "caosVM::v_HEDX", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HEDY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "index", "type": "integer"}], "name": "HEDY", "match": "HEDY", "type": "float", "syntaxstring": "HEDY (float) index (integer)", "uniquename": "v_HEDY", "evalcost": {"default": 0}, "implementation": "caosVM::v_HEDY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MTHX": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "MTHX", "match": "MTHX", "type": "float", "syntaxstring": "MTHX (float)", "uniquename": "v_MTHX", "evalcost": {"default": 0}, "implementation": "caosVM::v_MTHX", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MTHY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "MTHY", "match": "MTHY", "type": "float", "syntaxstring": "MTHY (float)", "uniquename": "v_MTHY", "evalcost": {"default": 0}, "implementation": "caosVM::v_MTHY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_DBG_OUTS": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Outputs a string to the debug log.\n", "arguments": [{"name": "val", "type": "string"}], "name": "DBG: OUTS", "match": "OUTS", "type": "command", "syntaxstring": "DBG: OUTS (command) val (string)", "uniquename": "c_DBG_OUTS", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_OUTS", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_OUTV": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Outputs a decimal value to the debug log.\n", "arguments": [{"name": "val", "type": "decimal"}], "name": "DBG: OUTV", "match": "OUTV", "type": "command", "syntaxstring": "DBG: OUTV (command) val (decimal)", "uniquename": "c_DBG_OUTV", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_OUTV", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_UNID": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns the unique ID of the target agent.\nThis is currently no good for persisting.\n\nXXX: when serialization support works, this might well become good for\npersisting :)\n", "arguments": [], "name": "UNID", "match": "UNID", "type": "integer", "syntaxstring": "UNID (integer)", "uniquename": "v_UNID", "evalcost": {"default": 0}, "implementation": "caosVM::v_UNID", "pragma": {"variants": "c3 cv sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_AGNT": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns the agent with the given UNID, or NULL if agent has been deleted.\n", "arguments": [{"name": "id", "type": "integer"}], "name": "AGNT", "match": "AGNT", "type": "agent", "syntaxstring": "AGNT (agent) id (integer)", "uniquename": "v_AGNT", "evalcost": {"default": 0}, "implementation": "caosVM::v_AGNT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_MALLOC": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Dumps some random memory stats to stderr.\n", "arguments": [], "name": "DBG: MALLOC", "match": "MALLOC", "type": "command", "syntaxstring": "DBG: MALLOC (command)", "uniquename": "c_DBG_MALLOC", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_MALLOC", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_DUMP": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Dumps the current script's bytecode to stderr.\n", "arguments": [], "name": "DBG: DUMP", "match": "DUMP", "type": "command", "syntaxstring": "DBG: DUMP (command)", "uniquename": "c_DBG_DUMP", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_DUMP", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_TRACE": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Sets opcode trace level. Zero disables.\n", "arguments": [{"name": "level", "type": "integer"}], "name": "DBG: TRACE", "match": "TRACE", "type": "command", "syntaxstring": "DBG: TRACE (command) level (integer)", "uniquename": "c_DBG_TRACE", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_TRACE", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_MANN": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Looks up documentation on the given command and spits it on the current output stream.\n", "arguments": [{"name": "cmd", "type": "string"}], "name": "MANN", "match": "MANN", "type": "command", "syntaxstring": "MANN (command) cmd (string)", "uniquename": "c_MANN", "evalcost": {"default": 1}, "implementation": "caosVM::c_MANN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_DISA": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Dumps the \"bytecode\" of the indicated script to the current output channel.\nNote that this isn't really bytecode yet (though that's a possible future\nimprovement).\n\nIf the script is not found no output will be generated.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "DBG: DISA", "match": "DISA", "type": "command", "syntaxstring": "DBG: DISA (command) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "c_DBG_DISA", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_DISA", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_DBG_ASRT": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Blows up unless the given condition is true.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "DBG: ASRT", "match": "ASRT", "type": "command", "syntaxstring": "DBG: ASRT (command) condition (condition)", "uniquename": "c_DBG_ASRT", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_ASRT", "pragma": {"parser": "new AssertParser()", "variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_ASRF": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "(openc2e-only)\nBlows up unless the given condition is false.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "DBG: ASRF", "match": "ASRF", "type": "command", "syntaxstring": "DBG: ASRF (command) condition (condition)", "uniquename": "c_DBG_ASRF", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_ASRF", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_FAIL": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "(openc2e-only)\nBlows up.\n", "arguments": [], "name": "DBG: FAIL", "match": "FAIL", "type": "command", "syntaxstring": "DBG: FAIL (command)", "uniquename": "c_DBG_FAIL", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_FAIL", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DBG_IDNT": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "(openc2e-only)\nReturn a nicely-formatted string identifying the classifier of the agent,\nusing the catalogue to find the name if possible.\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "DBG: IDNT", "match": "IDNT", "type": "string", "syntaxstring": "DBG: IDNT (string) agent (agent)", "uniquename": "v_DBG_IDNT", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_IDNT", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_PROF": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Dumps the current agent profiling information to the output stream, in CSV format.\n", "arguments": [], "name": "DBG: PROF", "match": "PROF", "type": "command", "syntaxstring": "DBG: PROF (command)", "uniquename": "c_DBG_PROF", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_PROF", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_CPRO": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Clears the current agent profiling information.\n", "arguments": [], "name": "DBG: CPRO", "match": "CPRO", "type": "command", "syntaxstring": "DBG: CPRO (command)", "uniquename": "c_DBG_CPRO", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_CPRO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DBG_STOK": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns the bare token in 'bareword' as a string.\n", "arguments": [{"name": "bareword", "type": "bareword"}], "name": "DBG: STOK", "match": "STOK", "type": "string", "syntaxstring": "DBG: STOK (string) bareword (bareword)", "uniquename": "v_DBG_STOK", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_STOK", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_TSLC": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Sets the currently executing script's remaining timeslice value. This command\naffects only the current timeslice; future slices use the normal amount for\nthe dialect in question.\n", "arguments": [{"name": "timeslice", "type": "integer"}], "name": "DBG: TSLC", "match": "TSLC", "type": "command", "syntaxstring": "DBG: TSLC (command) timeslice (integer)", "uniquename": "c_DBG_TSLC", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::c_DBG_TSLC", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_DBG_TSLC": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns the number of ticks left in the current script's remaining timeslice.\n", "arguments": [], "name": "DBG: TSLC", "match": "TSLC", "type": "integer", "syntaxstring": "DBG: TSLC (integer)", "uniquename": "v_DBG_TSLC", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_TSLC", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DBG_SIZO": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns a human-readable profile of the sizes and allocation counts of\nvarious internal data structures\n", "arguments": [], "name": "DBG: SIZO", "match": "SIZO", "type": "string", "syntaxstring": "DBG: SIZO (string)", "uniquename": "v_DBG_SIZO", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_SIZO", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FILE_GLOB": {"filename": "caosVM_files.cpp", "category": "files", "description": "Globs the given journal directory (pass 0 for the world directory, or 1 for the main directory) for the\ngiven filespec (you can use wildcards, and descend into subdirectories using '..').\n\nThe result is placed on the input stream for reading with standard input commands (eg, INNI and INNL);\nthis consists of the number of results on the first line, and then the full filename paths to the matched\nfiles on the remaining lines.\n", "arguments": [{"name": "directory", "type": "integer"}, {"name": "filespec", "type": "string"}], "name": "FILE GLOB", "match": "GLOB", "type": "command", "syntaxstring": "FILE GLOB (command) directory (integer) filespec (string)", "uniquename": "c_FILE_GLOB", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_GLOB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_FILE_ICLO": {"filename": "caosVM_files.cpp", "category": "files", "description": "Disconnects everything from the input stream.\n", "arguments": [], "name": "FILE ICLO", "match": "ICLO", "type": "command", "syntaxstring": "FILE ICLO (command)", "uniquename": "c_FILE_ICLO", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_ICLO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_FILE_IOPE": {"filename": "caosVM_files.cpp", "category": "files", "description": "Puts the given filename in the given directory (pass 1 for the world directory, or 0 for the main\ndirectory) on the current VM's input stream, for use by INOK, INNL, INNI and INNF.\nIf a file is already open, it will be closed first.\n", "arguments": [{"name": "directory", "type": "integer"}, {"name": "filename", "type": "string"}], "name": "FILE IOPE", "match": "IOPE", "type": "command", "syntaxstring": "FILE IOPE (command) directory (integer) filename (string)", "uniquename": "c_FILE_IOPE", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_IOPE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_FILE_JDEL": {"filename": "caosVM_files.cpp", "category": "files", "description": "Removes the given file in the given directory (pass 1 for the world directory, or 0 for the main\ndirectory) immediately.\n", "arguments": [{"name": "directory", "type": "integer"}, {"name": "filename", "type": "string"}], "name": "FILE JDEL", "match": "JDEL", "type": "command", "syntaxstring": "FILE JDEL (command) directory (integer) filename (string)", "uniquename": "c_FILE_JDEL", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_JDEL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_FILE_OCLO": {"filename": "caosVM_files.cpp", "category": "files", "description": "Disconnects everything from the output stream.\n", "arguments": [], "name": "FILE OCLO", "match": "OCLO", "type": "command", "syntaxstring": "FILE OCLO (command)", "uniquename": "c_FILE_OCLO", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_OCLO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_FILE_OFLU": {"filename": "caosVM_files.cpp", "category": "files", "description": "Flushes the current output stream; if this is a file, all data in the buffer will be written to it.\n", "arguments": [], "name": "FILE OFLU", "match": "OFLU", "type": "command", "syntaxstring": "FILE OFLU (command)", "uniquename": "c_FILE_OFLU", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_OFLU", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_FILE_OOPE": {"filename": "caosVM_files.cpp", "category": "files", "description": "Puts the given filename in the given directory (pass 1 for the world directory, or 0 for the main\ndirectory) on the current VM's output stream.\nIf a file is already open, it will be closed first.\n", "arguments": [{"name": "directory", "type": "integer"}, {"name": "filename", "type": "string"}, {"name": "append", "type": "integer"}], "name": "FILE OOPE", "match": "OOPE", "type": "command", "syntaxstring": "FILE OOPE (command) directory (integer) filename (string) append (integer)", "uniquename": "c_FILE_OOPE", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_OOPE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_FVWM": {"filename": "caosVM_files.cpp", "category": "files", "description": "Returns an safe (not-in-use) filename for naming worlds and other saved files.\n", "arguments": [{"name": "name", "type": "string"}], "name": "FVWM", "match": "FVWM", "type": "string", "syntaxstring": "FVWM (string) name (string)", "uniquename": "v_FVWM", "evalcost": {"default": 0}, "implementation": "caosVM::v_FVWM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_INNF": {"filename": "caosVM_files.cpp", "category": "files", "description": "Fetches a float from the current input stream, or 0.0 if there is no data.\n", "arguments": [], "name": "INNF", "match": "INNF", "type": "float", "syntaxstring": "INNF (float)", "uniquename": "v_INNF", "evalcost": {"default": 0}, "implementation": "caosVM::v_INNF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_INNI": {"filename": "caosVM_files.cpp", "category": "files", "description": "Fetches an integer from the current input stream, or 0 if there is no data.\n", "arguments": [], "name": "INNI", "match": "INNI", "type": "integer", "syntaxstring": "INNI (integer)", "uniquename": "v_INNI", "evalcost": {"default": 0}, "implementation": "caosVM::v_INNI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_INNL": {"filename": "caosVM_files.cpp", "category": "files", "description": "Fetches a string of text from the input stream.\n", "arguments": [], "name": "INNL", "match": "INNL", "type": "string", "syntaxstring": "INNL (string)", "uniquename": "v_INNL", "evalcost": {"default": 0}, "implementation": "caosVM::v_INNL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_INOK": {"filename": "caosVM_files.cpp", "category": "files", "description": "Determines whether the current input stream is usable (0 or 1).\n", "arguments": [], "name": "INOK", "match": "INOK", "type": "integer", "syntaxstring": "INOK (integer)", "uniquename": "v_INOK", "evalcost": {"default": 0}, "implementation": "caosVM::v_INOK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_WEBB": {"filename": "caosVM_files.cpp", "category": "files", "description": "Launches the specified URL, prepended with 'http://' (so you'd only specify, for example, 'example.com/foo.html'), in the user's browser.\n", "arguments": [{"name": "url", "type": "string"}], "name": "WEBB", "match": "WEBB", "type": "command", "syntaxstring": "WEBB (command) url (string)", "uniquename": "c_WEBB", "evalcost": {"default": 1}, "implementation": "caosVM::c_WEBB", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DOIF": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Part of a DOIF/ELIF/ELSE/ENDI block. Jumps to the next part of the block if condition is false,\notherwise continues executing the script.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "DOIF", "match": "DOIF", "type": "command", "syntaxstring": "DOIF (command) condition (condition)", "uniquename": "c_DOIF", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_DOIF", "pragma": {"variants": "c1 c2 cv c3 sm", "stackdelta": "0"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ELIF": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Part of a DOIF/ELIF/ELSE/ENDI block. If none of the previous DOIF/ELIF conditions have been true, and condition evaluates to true, then the code in the ELIF block is executed.\nIf found outside a DOIF block, it is equivalent to a DOIF. If you take advantage of this behavior, fuzzie is of the opinion that you should be shot.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "ELIF", "match": "ELIF", "type": "command", "syntaxstring": "ELIF (command) condition (condition)", "uniquename": "c_ELIF", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ELIF", "pragma": {"variants": "all", "stackdelta": "0"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ELSE": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Part of a DOIF/ELIF/ELSE/ENDI block. If ELSE is present, it is jumped to when none of the previous DOIF/ELIF conditions are true.\n", "arguments": [], "name": "ELSE", "match": "ELSE", "type": "command", "syntaxstring": "ELSE (command)", "uniquename": "c_ELSE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ELSE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ENDI": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The end of a DOIF/ELIF/ELSE/ENDI block.\n", "arguments": [], "name": "ENDI", "match": "ENDI", "type": "command", "syntaxstring": "ENDI (command)", "uniquename": "c_ENDI", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ENDI", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_REPS": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The start of a REPS...REPE loop. The body of the loop will be executed (reps) times.\n", "arguments": [{"name": "reps", "type": "integer"}], "name": "REPS", "match": "REPS", "type": "command", "syntaxstring": "REPS (command) reps (integer)", "uniquename": "c_REPS", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_REPS", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_REPE": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The end of a REPS...REPE loop.\n", "arguments": [], "name": "REPE", "match": "REPE", "type": "command", "syntaxstring": "REPE (command)", "uniquename": "c_REPE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_REPE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_LOOP": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The start of a LOOP...EVER or LOOP...UNTL loop.\n", "arguments": [], "name": "LOOP", "match": "LOOP", "type": "command", "syntaxstring": "LOOP (command)", "uniquename": "c_LOOP", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_LOOP", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_EVER": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Jumps back to the matching LOOP, no matter what.\n", "arguments": [], "name": "EVER", "match": "EVER", "type": "command", "syntaxstring": "EVER (command)", "uniquename": "c_EVER", "evalcost": {"default": 1}, "implementation": "caosVM::c_EVER", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_UNTL": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Jumps back to the matching LOOP unless the condition evaluates to true.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "UNTL", "match": "UNTL", "type": "command", "syntaxstring": "UNTL (command) condition (condition)", "uniquename": "c_UNTL", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_UNTL", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_GSUB": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Jumps to a subroutine defined by SUBR with label (label).\n", "arguments": [{"name": "label", "type": "label"}], "name": "GSUB", "match": "GSUB", "type": "command", "syntaxstring": "GSUB (command) label (label)", "uniquename": "c_GSUB", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_GSUB", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SUBR": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Defines the start of a subroute to be called with GSUB, with label (label).\nIf the command is encountered during execution, it acts like a STOP.\n", "arguments": [{"name": "label", "type": "label"}], "name": "SUBR", "match": "SUBR", "type": "command", "syntaxstring": "SUBR (command) label (label)", "uniquename": "c_SUBR", "evalcost": {"default": 1}, "implementation": "caosVM::c_SUBR", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_RETN": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Returns from a subroutine called with GSUB.\n", "arguments": [], "name": "RETN", "match": "RETN", "type": "command", "syntaxstring": "RETN (command)", "uniquename": "c_RETN", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_RETN", "pragma": {"stackdelta": "any", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_NEXT": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The end of an ENUM...NEXT loop.\n", "arguments": [], "name": "NEXT", "match": "NEXT", "type": "command", "syntaxstring": "NEXT (command)", "uniquename": "c_NEXT", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_NEXT", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ENUM": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Loops through all agents with the given classifier.  0 on any field is a\nwildcard. The loop body is terminated by a NEXT.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "ENUM", "match": "ENUM", "type": "command", "syntaxstring": "ENUM (command) family (integer) genus (integer) species (integer)", "uniquename": "c_ENUM", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ENUM", "pragma": {"stackdelta": "any", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_ESEE": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Simular to ENUM, but iterates through agents visible to OWNR, or visible to TARG in an install script.\nAn agent can be seen if it is within the range set by RNGE, and is visible (this includes the PERM value\nof walls that lie between them, and, if the agent is a Creature, it not having the 'invisible' attribute).\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "ESEE", "match": "ESEE", "type": "command", "syntaxstring": "ESEE (command) family (integer) genus (integer) species (integer)", "uniquename": "c_ESEE", "evalcost": {"default": 1}, "implementation": "caosVM::c_ESEE", "pragma": {"stackdelta": "any", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_ETCH": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Similar to ENUM, but iterates through the agents OWNR is touching, or TARG is touching in an install script.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "ETCH", "match": "ETCH", "type": "command", "syntaxstring": "ETCH (command) family (integer) genus (integer) species (integer)", "uniquename": "c_ETCH", "evalcost": {"default": 1}, "implementation": "caosVM::c_ETCH", "pragma": {"stackdelta": "any", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_EPAS": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Similar to ENUM, but iterates through the OWNR vehicle's passengers.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "EPAS", "match": "EPAS", "type": "command", "syntaxstring": "EPAS (command) family (integer) genus (integer) species (integer)", "uniquename": "c_EPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_EPAS", "pragma": {"stackdelta": "any"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_ECON": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Loops through all the agents in the connective system containing the given agent.\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "ECON", "match": "ECON", "type": "command", "syntaxstring": "ECON (command) agent (agent)", "uniquename": "c_ECON", "evalcost": {"default": 1}, "implementation": "caosVM::c_ECON", "pragma": {"stackdelta": "any"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_CALL": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Calls script_no on OWNR, then waits for it to return. The invoked script\nwill inherit the caller's INST setting, but any changes it makes to it will\nbe reversed once it returns - so eg if you call a script when in INST mode,\nit calls OVER and returns, you'll still be in INST.\n\nScript variables (VAxx) will not be preserved - you'll have to use OVxx\nfor any parameters.\n", "arguments": [{"name": "script_no", "type": "integer"}, {"name": "p1", "type": "any"}, {"name": "p2", "type": "any"}], "name": "CALL", "match": "CALL", "type": "command", "syntaxstring": "CALL (command) script_no (integer) p1 (any) p2 (any)", "uniquename": "c_CALL", "evalcost": {"default": 1}, "implementation": "caosVM::c_CALL", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_CAOS": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Runs commands as caos code immediately. If inline, copy _IT_ VAxx TARG OWNR, etc. If state_trans, copy FROM and\nOWNR.  If an error occurs, it catches it and stuffs it in the report. (XXX: non-conforming)\n", "arguments": [{"name": "inline", "type": "integer"}, {"name": "state_trans", "type": "integer"}, {"name": "p1", "type": "anything"}, {"name": "p2", "type": "anything"}, {"name": "commands", "type": "string"}, {"name": "throws", "type": "integer"}, {"name": "catches", "type": "integer"}, {"name": "report", "type": "variable"}], "name": "CAOS", "match": "CAOS", "type": "string", "syntaxstring": "CAOS (string) inline (integer) state_trans (integer) p1 (anything) p2 (anything) commands (string) throws (integer) catches (integer) report (variable)", "uniquename": "v_CAOS", "evalcost": {"default": 0}, "implementation": "caosVM::v_CAOS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "c_GENE_CLON": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Clone a genome. A new moniker is created.\n", "arguments": [{"name": "dest_agent", "type": "agent"}, {"name": "dest_slot", "type": "integer"}, {"name": "src_agent", "type": "agent"}, {"name": "src_slot", "type": "integer"}], "name": "GENE CLON", "match": "CLON", "type": "command", "syntaxstring": "GENE CLON (command) dest_agent (agent) dest_slot (integer) src_agent (agent) src_slot (integer)", "uniquename": "c_GENE_CLON", "namespace": "gene", "evalcost": {"default": 1}, "implementation": "caosVM::c_GENE_CLON", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_GENE_CROS": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Cross two genomes, creating a new one.\n", "arguments": [{"name": "dest_agent", "type": "agent"}, {"name": "dest_slot", "type": "integer"}, {"name": "mum_agent", "type": "agent"}, {"name": "mum_slot", "type": "integer"}, {"name": "dad_agent", "type": "agent"}, {"name": "dad_slot", "type": "integer"}, {"name": "mum_mutation_chance", "type": "integer"}, {"name": "mum_mutation_degree", "type": "integer"}, {"name": "dad_mutation_chance", "type": "integer"}, {"name": "dad_mutation_degree", "type": "integer"}], "name": "GENE CROS", "match": "CROS", "type": "command", "syntaxstring": "GENE CROS (command) dest_agent (agent) dest_slot (integer) mum_agent (agent) mum_slot (integer) dad_agent (agent) dad_slot (integer) mum_mutation_chance (integer) mum_mutation_degree (integer) dad_mutation_chance (integer) dad_mutation_degree (integer)", "uniquename": "c_GENE_CROS", "namespace": "gene", "evalcost": {"default": 1}, "implementation": "caosVM::c_GENE_CROS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -10}, "c_GENE_KILL": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Delete a genome from a slot.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "slot", "type": "integer"}], "name": "GENE KILL", "match": "KILL", "type": "command", "syntaxstring": "GENE KILL (command) agent (agent) slot (integer)", "uniquename": "c_GENE_KILL", "namespace": "gene", "evalcost": {"default": 1}, "implementation": "caosVM::c_GENE_KILL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_GENE_LOAD": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Load a genome file into a slot. You can use * and ? wildcards in the filename.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "slot", "type": "integer"}, {"name": "genefile", "type": "string"}], "name": "GENE LOAD", "match": "LOAD", "type": "command", "syntaxstring": "GENE LOAD (command) agent (agent) slot (integer) genefile (string)", "uniquename": "c_GENE_LOAD", "namespace": "gene", "evalcost": {"default": 1}, "implementation": "caosVM::c_GENE_LOAD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_GENE_MOVE": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Move a genome to another slot.\n", "arguments": [{"name": "dest_agent", "type": "agent"}, {"name": "dest_slot", "type": "integer"}, {"name": "src_agent", "type": "agent"}, {"name": "src_slot", "type": "integer"}], "name": "GENE MOVE", "match": "MOVE", "type": "command", "syntaxstring": "GENE MOVE (command) dest_agent (agent) dest_slot (integer) src_agent (agent) src_slot (integer)", "uniquename": "c_GENE_MOVE", "namespace": "gene", "evalcost": {"default": 1}, "implementation": "caosVM::c_GENE_MOVE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_GTOS": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Return the moniker stored in the given gene slot of the target agent.\n", "arguments": [{"name": "slot", "type": "integer"}], "name": "GTOS", "match": "GTOS", "type": "string", "syntaxstring": "GTOS (string) slot (integer)", "uniquename": "v_GTOS", "evalcost": {"default": 0}, "implementation": "caosVM::v_GTOS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MTOA": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Return the agent which has the given moniker stored in a gene slot, or NULL if none.\n", "arguments": [{"name": "moniker", "type": "string"}], "name": "MTOA", "match": "MTOA", "type": "agent", "syntaxstring": "MTOA (agent) moniker (string)", "uniquename": "v_MTOA", "evalcost": {"default": 0}, "implementation": "caosVM::v_MTOA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MTOC": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Return the live creature with the given moniker, or NULL if none.\n", "arguments": [{"name": "moniker", "type": "string"}], "name": "MTOC", "match": "MTOC", "type": "agent", "syntaxstring": "MTOC (agent) moniker (string)", "uniquename": "v_MTOC", "evalcost": {"default": 0}, "implementation": "caosVM::v_MTOC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_CAGE": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST CAGE", "match": "CAGE", "type": "integer", "syntaxstring": "HIST CAGE (integer) moniker (string) event (integer)", "uniquename": "v_HIST_CAGE", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_CAGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_COUN": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST COUN", "match": "COUN", "type": "integer", "syntaxstring": "HIST COUN (integer) moniker (string)", "uniquename": "v_HIST_COUN", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_COUN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_CROS": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST CROS", "match": "CROS", "type": "integer", "syntaxstring": "HIST CROS (integer) moniker (string)", "uniquename": "v_HIST_CROS", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_CROS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_HIST_EVNT": {"filename": "caosVM_history.cpp", "category": "history", "description": "Fire a life event of the specified type with the specified moniker.\n", "arguments": [{"name": "moniker", "type": "string"}, {"name": "type", "type": "integer"}, {"name": "relatedmoniker1", "type": "string"}, {"name": "relatedmoniker2", "type": "string"}], "name": "HIST EVNT", "match": "EVNT", "type": "command", "syntaxstring": "HIST EVNT (command) moniker (string) type (integer) relatedmoniker1 (string) relatedmoniker2 (string)", "uniquename": "c_HIST_EVNT", "namespace": "hist", "evalcost": {"default": 1}, "implementation": "caosVM::c_HIST_EVNT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_HIST_FIND": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}, {"name": "from", "type": "integer"}], "name": "HIST FIND", "match": "FIND", "type": "integer", "syntaxstring": "HIST FIND (integer) moniker (string) event (integer) from (integer)", "uniquename": "v_HIST_FIND", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_FIND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_HIST_FINR": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}, {"name": "from", "type": "integer"}], "name": "HIST FINR", "match": "FINR", "type": "integer", "syntaxstring": "HIST FINR (integer) moniker (string) event (integer) from (integer)", "uniquename": "v_HIST_FINR", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_FINR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_HIST_FOTO": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST FOTO", "match": "FOTO", "type": "string", "syntaxstring": "HIST FOTO (string) moniker (string) event (integer)", "uniquename": "v_HIST_FOTO", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_FOTO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_HIST_FOTO": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}, {"name": "photo", "type": "string"}], "name": "HIST FOTO", "match": "FOTO", "type": "command", "syntaxstring": "HIST FOTO (command) moniker (string) event (integer) photo (string)", "uniquename": "c_HIST_FOTO", "namespace": "hist", "evalcost": {"default": 1}, "implementation": "caosVM::c_HIST_FOTO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_HIST_GEND": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST GEND", "match": "GEND", "type": "integer", "syntaxstring": "HIST GEND (integer) moniker (string)", "uniquename": "v_HIST_GEND", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_GEND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_GNUS": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST GNUS", "match": "GNUS", "type": "integer", "syntaxstring": "HIST GNUS (integer) moniker (string)", "uniquename": "v_HIST_GNUS", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_GNUS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_MON1": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST MON1", "match": "MON1", "type": "string", "syntaxstring": "HIST MON1 (string) moniker (string) event (integer)", "uniquename": "v_HIST_MON1", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_MON1", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_MON2": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST MON2", "match": "MON2", "type": "string", "syntaxstring": "HIST MON2 (string) moniker (string) event (integer)", "uniquename": "v_HIST_MON2", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_MON2", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_MUTE": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST MUTE", "match": "MUTE", "type": "integer", "syntaxstring": "HIST MUTE (integer) moniker (string)", "uniquename": "v_HIST_MUTE", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_MUTE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_NAME": {"filename": "caosVM_history.cpp", "category": "history", "description": "Return the name of the creature with the given moniker.\n", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST NAME", "match": "NAME", "type": "string", "syntaxstring": "HIST NAME (string) moniker (string)", "uniquename": "v_HIST_NAME", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_NAME", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_HIST_NAME": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "name", "type": "string"}], "name": "HIST NAME", "match": "NAME", "type": "command", "syntaxstring": "HIST NAME (command) moniker (string) name (string)", "uniquename": "c_HIST_NAME", "namespace": "hist", "evalcost": {"default": 1}, "implementation": "caosVM::c_HIST_NAME", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_HIST_NETU": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST NETU", "match": "NETU", "type": "string", "syntaxstring": "HIST NETU (string) moniker (string) event (integer)", "uniquename": "v_HIST_NETU", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_NETU", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_NEXT": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST NEXT", "match": "NEXT", "type": "string", "syntaxstring": "HIST NEXT (string) moniker (string)", "uniquename": "v_HIST_NEXT", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_NEXT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_PREV": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST PREV", "match": "PREV", "type": "string", "syntaxstring": "HIST PREV (string) moniker (string)", "uniquename": "v_HIST_PREV", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_PREV", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_RTIM": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST RTIM", "match": "RTIM", "type": "integer", "syntaxstring": "HIST RTIM (integer) moniker (string) event (integer)", "uniquename": "v_HIST_RTIM", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_RTIM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_TAGE": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST TAGE", "match": "TAGE", "type": "integer", "syntaxstring": "HIST TAGE (integer) moniker (string) event (integer)", "uniquename": "v_HIST_TAGE", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_TAGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_TYPE": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST TYPE", "match": "TYPE", "type": "integer", "syntaxstring": "HIST TYPE (integer) moniker (string) event (integer)", "uniquename": "v_HIST_TYPE", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_TYPE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_HIST_UTXT": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}, {"name": "value", "type": "string"}], "name": "HIST UTXT", "match": "UTXT", "type": "command", "syntaxstring": "HIST UTXT (command) moniker (string) event (integer) value (string)", "uniquename": "c_HIST_UTXT", "namespace": "hist", "evalcost": {"default": 1}, "implementation": "caosVM::c_HIST_UTXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_HIST_UTXT": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST UTXT", "match": "UTXT", "type": "string", "syntaxstring": "HIST UTXT (string) moniker (string) event (integer)", "uniquename": "v_HIST_UTXT", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_UTXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_VARI": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST VARI", "match": "VARI", "type": "integer", "syntaxstring": "HIST VARI (integer) moniker (string)", "uniquename": "v_HIST_VARI", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_VARI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_HIST_WIPE": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST WIPE", "match": "WIPE", "type": "command", "syntaxstring": "HIST WIPE (command) moniker (string)", "uniquename": "c_HIST_WIPE", "namespace": "hist", "evalcost": {"default": 1}, "implementation": "caosVM::c_HIST_WIPE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_WNAM": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST WNAM", "match": "WNAM", "type": "string", "syntaxstring": "HIST WNAM (string) moniker (string) event (integer)", "uniquename": "v_HIST_WNAM", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_WNAM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_WTIK": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST WTIK", "match": "WTIK", "type": "integer", "syntaxstring": "HIST WTIK (integer) moniker (string) event (integer)", "uniquename": "v_HIST_WTIK", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_WTIK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_WUID": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST WUID", "match": "WUID", "type": "string", "syntaxstring": "HIST WUID (string) moniker (string) event (integer)", "uniquename": "v_HIST_WUID", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_WUID", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_WVET": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST WVET", "match": "WVET", "type": "integer", "syntaxstring": "HIST WVET (integer) moniker (string)", "uniquename": "v_HIST_WVET", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_WVET", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_OOWW": {"filename": "caosVM_history.cpp", "category": "history", "description": "Return the current status of the given moniker.\n0 is unknown (never existed?), 1 is in slot, 2 is NEW: CREA creature, 3 is BORN creature, 4 is exported, 5 is dead, 6 is gone (no body), 7 is unreferenced.\n", "arguments": [{"name": "moniker", "type": "string"}], "name": "OOWW", "match": "OOWW", "type": "integer", "syntaxstring": "OOWW (integer) moniker (string)", "uniquename": "v_OOWW", "evalcost": {"default": 0}, "implementation": "caosVM::v_OOWW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_CLAC": {"filename": "caosVM_input.cpp", "category": "input", "description": "Sets the type of message sent to the TARG agent when clicked.  If set to -1, no message\nwill be sent.  Using this command will override and reset the value set with CLIK.\n", "arguments": [{"name": "message", "type": "integer"}], "name": "CLAC", "match": "CLAC", "type": "command", "syntaxstring": "CLAC (command) message (integer)", "uniquename": "c_CLAC", "evalcost": {"default": 1}, "implementation": "caosVM::c_CLAC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_CLAC": {"filename": "caosVM_input.cpp", "category": "input", "arguments": [], "name": "CLAC", "match": "CLAC", "type": "integer", "syntaxstring": "CLAC (integer)", "uniquename": "v_CLAC", "evalcost": {"default": 0}, "implementation": "caosVM::v_CLAC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_CLIK": {"filename": "caosVM_input.cpp", "category": "input", "description": "Sets three different message types that will sent to the TARG agent when clicked, on a\nrotating basis.  Setting any of the three types to -1 will cause it to be ignored. Using\nthis command will override and reset the value set by CLAC.\n", "arguments": [{"name": "msg1", "type": "integer"}, {"name": "msg2", "type": "integer"}, {"name": "msg3", "type": "integer"}], "name": "CLIK", "match": "CLIK", "type": "command", "syntaxstring": "CLIK (command) msg1 (integer) msg2 (integer) msg3 (integer)", "uniquename": "c_CLIK", "evalcost": {"default": 1}, "implementation": "caosVM::c_CLIK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_CLIK": {"filename": "caosVM_input.cpp", "category": "input", "arguments": [{"name": "data", "type": "integer"}], "name": "CLIK", "match": "CLIK", "type": "integer", "syntaxstring": "CLIK (integer) data (integer)", "uniquename": "v_CLIK", "evalcost": {"default": 0}, "implementation": "caosVM::v_CLIK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_IMSK": {"filename": "caosVM_input.cpp", "category": "input", "description": "Sets the input event flags for the target agent, which tell the engine which events the\nagent requires scripts to be fired for. For example, setting the \"key up\" flag means the\ntarget agent has the relevant script executed every time a key is released.\n\nAdd the following values together to calculate the flags parameter: 1 for key down, 2 for key up, 4 for mouse move, 8 for mouse down, 16 for mouse up, 32 for mouse wheel movement and 64 for (translated) keypress.\n\nTODO: link to the script details (event numbers and parameters).\n", "arguments": [{"name": "flags", "type": "integer"}], "name": "IMSK", "match": "IMSK", "type": "command", "syntaxstring": "IMSK (command) flags (integer)", "uniquename": "c_IMSK", "evalcost": {"default": 1}, "implementation": "caosVM::c_IMSK", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_IMSK": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns the input event flags for the target agent. See the IMSK command for details.\n", "arguments": [], "name": "IMSK", "match": "IMSK", "type": "integer", "syntaxstring": "IMSK (integer)", "uniquename": "v_IMSK", "evalcost": {"default": 0}, "implementation": "caosVM::v_IMSK", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_KEYD": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns 1 if the specified key is held down, or 0 otherwise.\n", "arguments": [{"name": "keycode", "type": "integer"}], "name": "KEYD", "match": "KEYD", "type": "integer", "syntaxstring": "KEYD (integer) keycode (integer)", "uniquename": "v_KEYD", "evalcost": {"default": 0}, "implementation": "caosVM::v_KEYD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HOTS": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns the agent that is currently underneath the Hand.\nNB: this command is not a real c1/c2 command, backported for convenience\n", "arguments": [], "name": "HOTS", "match": "HOTS", "type": "agent", "syntaxstring": "HOTS (agent)", "uniquename": "v_HOTS", "evalcost": {"default": 0}, "implementation": "caosVM::v_HOTS", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HOTP": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns the PART of the agent (given by HOTS) that is currently underneath the Hand.\n\nTransparency of the parts themselves is ignored.\n", "arguments": [], "name": "HOTP", "match": "HOTP", "type": "integer", "syntaxstring": "HOTP (integer)", "uniquename": "v_HOTP", "evalcost": {"default": 0}, "implementation": "caosVM::v_HOTP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PURE": {"filename": "caosVM_input.cpp", "category": "input", "description": "Turns the normal pointing and clicking behavior of the Hand on (0) and off (1).\n\nIf set to off, CLIK and CLAC will not work, and clicking events must be handled by IMSK.\n", "arguments": [{"name": "value", "type": "integer"}], "name": "PURE", "match": "PURE", "type": "command", "syntaxstring": "PURE (command) value (integer)", "uniquename": "c_PURE", "evalcost": {"default": 1}, "implementation": "caosVM::c_PURE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PURE": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns whether the normal pointing and clicking behavior of the Hand is on or off.\n", "arguments": [], "name": "PURE", "match": "PURE", "type": "integer", "syntaxstring": "PURE (integer)", "uniquename": "v_PURE", "evalcost": {"default": 0}, "implementation": "caosVM::v_PURE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MOPX": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns the current X coordinate of the Hand in the world.\n", "arguments": [], "name": "MOPX", "match": "MOPX", "type": "integer", "syntaxstring": "MOPX (integer)", "uniquename": "v_MOPX", "evalcost": {"default": 0}, "implementation": "caosVM::v_MOPX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MOPY": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns the current Y coordinate of the Hand in the world.\n", "arguments": [], "name": "MOPY", "match": "MOPY", "type": "integer", "syntaxstring": "MOPY (integer)", "uniquename": "v_MOPY", "evalcost": {"default": 0}, "implementation": "caosVM::v_MOPY", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_SCOL": {"filename": "caosVM_input.cpp", "category": "input", "arguments": [{"name": "andmask", "type": "integer"}, {"name": "eormask", "type": "integer"}, {"name": "upspeeds", "type": "bytestring"}, {"name": "downspeeds", "type": "bytestring"}], "name": "SCOL", "match": "SCOL", "type": "integer", "syntaxstring": "SCOL (integer) andmask (integer) eormask (integer) upspeeds (bytestring) downspeeds (bytestring)", "uniquename": "v_SCOL", "evalcost": {"default": 0}, "implementation": "caosVM::v_SCOL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_SCRL": {"filename": "caosVM_input.cpp", "category": "input", "description": "Turns on (1) or off (0) keyboard/mouse scrolling.\n", "arguments": [{"name": "enable", "type": "integer"}], "name": "SCRL", "match": "SCRL", "type": "command", "syntaxstring": "SCRL (command) enable (integer)", "uniquename": "c_SCRL", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCRL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_MOUS": {"filename": "caosVM_input.cpp", "category": "input", "arguments": [{"name": "behaviour", "type": "integer"}], "name": "MOUS", "match": "MOUS", "type": "command", "syntaxstring": "MOUS (command) behaviour (integer)", "uniquename": "c_MOUS", "evalcost": {"default": 1}, "implementation": "caosVM::c_MOUS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ADDM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Creates a metaroom with the given height and width, at the coordinates given.  Returns the id of the new metaroom.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "width", "type": "integer"}, {"name": "height", "type": "integer"}, {"name": "background", "type": "string"}], "name": "ADDM", "match": "ADDM", "type": "integer", "syntaxstring": "ADDM (integer) x (integer) y (integer) width (integer) height (integer) background (string)", "uniquename": "v_ADDM", "evalcost": {"default": 0}, "implementation": "caosVM::v_ADDM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_ADDB": {"filename": "caosVM_map.cpp", "category": "map", "description": "Adds a new background to an existing metaroom, to be displayed with BKGD.\n", "arguments": [{"name": "metaroom_id", "type": "integer"}, {"name": "background", "type": "string"}], "name": "ADDB", "match": "ADDB", "type": "command", "syntaxstring": "ADDB (command) metaroom_id (integer) background (string)", "uniquename": "c_ADDB", "evalcost": {"default": 1}, "implementation": "caosVM::c_ADDB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_BRMI": {"filename": "caosVM_map.cpp", "category": "map", "description": "Sets the base ID numbers for new metarooms and rooms to the given values.\n", "arguments": [{"name": "metaroom_base", "type": "integer"}, {"name": "room_base", "type": "integer"}], "name": "BRMI", "match": "BRMI", "type": "command", "syntaxstring": "BRMI (command) metaroom_base (integer) room_base (integer)", "uniquename": "c_BRMI", "evalcost": {"default": 1}, "implementation": "caosVM::c_BRMI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_MAPD": {"filename": "caosVM_map.cpp", "category": "map", "description": "Sets the world map dimensions, inside which metarooms are placed.\n", "arguments": [{"name": "width", "type": "integer"}, {"name": "height", "type": "integer"}], "name": "MAPD", "match": "MAPD", "type": "command", "syntaxstring": "MAPD (command) width (integer) height (integer)", "uniquename": "c_MAPD", "evalcost": {"default": 1}, "implementation": "caosVM::c_MAPD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_MAPW": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the width of the world map.\n", "arguments": [], "name": "MAPW", "match": "MAPW", "type": "integer", "syntaxstring": "MAPW (integer)", "uniquename": "v_MAPW", "evalcost": {"default": 0}, "implementation": "caosVM::v_MAPW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MAPH": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the height of the world map.\n", "arguments": [], "name": "MAPH", "match": "MAPH", "type": "integer", "syntaxstring": "MAPH (integer)", "uniquename": "v_MAPH", "evalcost": {"default": 0}, "implementation": "caosVM::v_MAPH", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MAPK": {"filename": "caosVM_map.cpp", "category": "map", "description": "Resets and empties the world map.\n", "arguments": [], "name": "MAPK", "match": "MAPK", "type": "command", "syntaxstring": "MAPK (command)", "uniquename": "c_MAPK", "evalcost": {"default": 1}, "implementation": "caosVM::c_MAPK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_BKDS": {"filename": "caosVM_map.cpp", "category": "map", "description": "Determines all of the background names in use by the given metaroom, and returns them in a comma-seperated string.\n", "arguments": [{"name": "metaroomid", "type": "integer"}], "name": "BKDS", "match": "BKDS", "type": "string", "syntaxstring": "BKDS (string) metaroomid (integer)", "uniquename": "v_BKDS", "evalcost": {"default": 0}, "implementation": "caosVM::v_BKDS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ADDR": {"filename": "caosVM_map.cpp", "category": "map", "description": "Makes a new room inside the given metaroom.  Rooms can have sloped floors and ceilings, but only vertical walls.\nThe id of the new room is returned.\n", "arguments": [{"name": "metaroomid", "type": "integer"}, {"name": "x_left", "type": "integer"}, {"name": "x_right", "type": "integer"}, {"name": "y_left_ceiling", "type": "integer"}, {"name": "y_right_ceiling", "type": "integer"}, {"name": "y_left_floor", "type": "integer"}, {"name": "y_right_floor", "type": "integer"}], "name": "ADDR", "match": "ADDR", "type": "integer", "syntaxstring": "ADDR (integer) metaroomid (integer) x_left (integer) x_right (integer) y_left_ceiling (integer) y_right_ceiling (integer) y_left_floor (integer) y_right_floor (integer)", "uniquename": "v_ADDR", "evalcost": {"default": 0}, "implementation": "caosVM::v_ADDR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "c_RTYP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Defines the 'type' of the given room.  The types vary with different games.\n", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "roomtype", "type": "integer"}], "name": "RTYP", "match": "RTYP", "type": "command", "syntaxstring": "RTYP (command) roomid (integer) roomtype (integer)", "uniquename": "c_RTYP", "evalcost": {"default": 1}, "implementation": "caosVM::c_RTYP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_RTYP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the 'type' of the given room, or -1 if 'roomid' is invalid.\n", "arguments": [{"name": "roomid", "type": "integer"}], "name": "RTYP", "match": "RTYP", "type": "integer", "syntaxstring": "RTYP (integer) roomid (integer)", "uniquename": "v_RTYP", "evalcost": {"default": 0}, "implementation": "caosVM::v_RTYP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DOOR": {"filename": "caosVM_map.cpp", "category": "map", "description": "Sets how permeable the door between the two given rooms will be. (See PERM).\n", "arguments": [{"name": "room1", "type": "integer"}, {"name": "room2", "type": "integer"}, {"name": "perm", "type": "integer"}], "name": "DOOR", "match": "DOOR", "type": "command", "syntaxstring": "DOOR (command) room1 (integer) room2 (integer) perm (integer)", "uniquename": "c_DOOR", "evalcost": {"default": 1}, "implementation": "caosVM::c_DOOR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_DOOR": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "room1", "type": "integer"}, {"name": "room2", "type": "integer"}], "name": "DOOR", "match": "DOOR", "type": "integer", "syntaxstring": "DOOR (integer) room1 (integer) room2 (integer)", "uniquename": "v_DOOR", "evalcost": {"default": 0}, "implementation": "caosVM::v_DOOR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_RATE": {"filename": "caosVM_map.cpp", "category": "map", "description": "Defines the rates of the given CA in the given room.  'gain' defines how easily the CA will be absorbed from\nagents inside the room, 'loss' defines how much will be lost into the air, and 'diffusion' defines how easily it\nwill spread to other rooms.\n", "arguments": [{"name": "roomtype", "type": "integer"}, {"name": "caindex", "type": "integer"}, {"name": "gain", "type": "float"}, {"name": "loss", "type": "float"}, {"name": "diffusion", "type": "float"}], "name": "RATE", "match": "RATE", "type": "command", "syntaxstring": "RATE (command) roomtype (integer) caindex (integer) gain (float) loss (float) diffusion (float)", "uniquename": "c_RATE", "evalcost": {"default": 1}, "implementation": "caosVM::c_RATE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "v_ROOM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the room that contains the given agent (jugding by its center).\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "ROOM", "match": "ROOM", "type": "integer", "syntaxstring": "ROOM (integer) agent (agent)", "uniquename": "v_ROOM", "evalcost": {"default": 0}, "implementation": "caosVM::v_ROOM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_LEFT": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the left constant (0).\n", "arguments": [], "name": "LEFT", "match": "LEFT", "type": "integer", "syntaxstring": "LEFT (integer)", "uniquename": "v_LEFT", "evalcost": {"default": 0}, "implementation": "caosVM::v_LEFT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_RGHT": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the right constant (1).\n", "arguments": [], "name": "RGHT", "match": "RGHT", "type": "integer", "syntaxstring": "RGHT (integer)", "uniquename": "v_RGHT", "evalcost": {"default": 0}, "implementation": "caosVM::v_RGHT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v__UP_": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the up constant (2).\n", "arguments": [], "name": "_UP_", "match": "_UP_", "type": "integer", "syntaxstring": "_UP_ (integer)", "uniquename": "v__UP_", "evalcost": {"default": 0}, "implementation": "caosVM::v_UP", "pragma": {"implementation": "caosVM::v_UP"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DOWN": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the down constant (3).\n", "arguments": [], "name": "DOWN", "match": "DOWN", "type": "integer", "syntaxstring": "DOWN (integer)", "uniquename": "v_DOWN", "evalcost": {"default": 0}, "implementation": "caosVM::v_DOWN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PROP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Defines the level of the given CA in the given room.  Valid settings are between 0 and 1; if higher, it will be\nreset to 1.\n", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "caindex", "type": "integer"}, {"name": "cavalue", "type": "float"}], "name": "PROP", "match": "PROP", "type": "command", "syntaxstring": "PROP (command) roomid (integer) caindex (integer) cavalue (float)", "uniquename": "c_PROP", "evalcost": {"default": 1}, "implementation": "caosVM::c_PROP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_PROP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the level of the given CA in the given room, or 0 if a roomid of -1 is passed.\n", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "caindex", "type": "integer"}], "name": "PROP", "match": "PROP", "type": "float", "syntaxstring": "PROP (float) roomid (integer) caindex (integer)", "uniquename": "v_PROP", "evalcost": {"default": 0}, "implementation": "caosVM::v_PROP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PERM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Sets the TARG agent's permiability.  Valid settings are between 1 and 100.\n", "arguments": [{"name": "perm", "type": "integer"}], "name": "PERM", "match": "PERM", "type": "command", "syntaxstring": "PERM (command) perm (integer)", "uniquename": "c_PERM", "evalcost": {"default": 1}, "implementation": "caosVM::c_PERM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PERM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the TARG agent's permiability.\n", "arguments": [], "name": "PERM", "match": "PERM", "type": "integer", "syntaxstring": "PERM (integer)", "uniquename": "v_PERM", "evalcost": {"default": 0}, "implementation": "caosVM::v_PERM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_GRAP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the id of the room at the coordinates (x, y), or -1 if nothing's there.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "GRAP", "match": "GRAP", "type": "integer", "syntaxstring": "GRAP (integer) x (float) y (float)", "uniquename": "v_GRAP", "evalcost": {"default": 0}, "implementation": "caosVM::v_GRAP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_GMAP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the id of the metaroom at the coordinates (x, y), or -1 if nothing's there.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "GMAP", "match": "GMAP", "type": "integer", "syntaxstring": "GMAP (integer) x (float) y (float)", "uniquename": "v_GMAP", "evalcost": {"default": 0}, "implementation": "caosVM::v_GMAP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_LINK": {"filename": "caosVM_map.cpp", "category": "map", "description": "Defines the permeability of the link between the two given rooms.  This is used for CA diffusion.\n", "arguments": [{"name": "room1", "type": "integer"}, {"name": "room2", "type": "integer"}, {"name": "perm", "type": "integer"}], "name": "LINK", "match": "LINK", "type": "command", "syntaxstring": "LINK (command) room1 (integer) room2 (integer) perm (integer)", "uniquename": "c_LINK", "evalcost": {"default": 1}, "implementation": "caosVM::c_LINK", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_LINK": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the permeability of the link between the given two rooms, or 0 if no link exists.\n", "arguments": [{"name": "room1", "type": "integer"}, {"name": "room2", "type": "integer"}], "name": "LINK", "match": "LINK", "type": "integer", "syntaxstring": "LINK (integer) room1 (integer) room2 (integer)", "uniquename": "v_LINK", "evalcost": {"default": 0}, "implementation": "caosVM::v_LINK", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_GRID": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the nearest adjacent room to the specified agent in the given direction (one of the direction constants), or\n-1 otherwise.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "direction", "type": "integer"}], "name": "GRID", "match": "GRID", "type": "integer", "syntaxstring": "GRID (integer) agent (agent) direction (integer)", "uniquename": "v_GRID", "evalcost": {"default": 0}, "implementation": "caosVM::v_GRID", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_EMIT": {"filename": "caosVM_map.cpp", "category": "map", "description": "Makes the TARG agent continually emit the specified amount of the specified CA into the room.\n", "arguments": [{"name": "caindex", "type": "integer"}, {"name": "amount", "type": "float"}], "name": "EMIT", "match": "EMIT", "type": "command", "syntaxstring": "EMIT (command) caindex (integer) amount (float)", "uniquename": "c_EMIT", "evalcost": {"default": 1}, "implementation": "caosVM::c_EMIT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_WALL": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the direction of the last wall the TARG agent collided with.\n", "arguments": [], "name": "WALL", "match": "WALL", "type": "integer", "syntaxstring": "WALL (integer)", "uniquename": "v_WALL", "evalcost": {"default": 0}, "implementation": "caosVM::v_WALL", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_ALTR": {"filename": "caosVM_map.cpp", "category": "map", "description": "Modifies the level of the given CA in the room specified.\nIf 'roomid' is -1, the room containing the TARG agent will be used.\n", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "caindex", "type": "integer"}, {"name": "delta", "type": "float"}], "name": "ALTR", "match": "ALTR", "type": "command", "syntaxstring": "ALTR (command) roomid (integer) caindex (integer) delta (float)", "uniquename": "c_ALTR", "evalcost": {"default": 1}, "implementation": "caosVM::c_ALTR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_RLOC": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns a string containing the location of the given room in the following format: x_left, x_right, y_left_ceiling,\ny_right_ceiling, y_left_floor, y_right_floor.\n", "arguments": [{"name": "roomid", "type": "integer"}], "name": "RLOC", "match": "RLOC", "type": "string", "syntaxstring": "RLOC (string) roomid (integer)", "uniquename": "v_RLOC", "evalcost": {"default": 0}, "implementation": "caosVM::v_RLOC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MLOC": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns a string containing the location of the given metaroom in the following format: x y width height\n", "arguments": [{"name": "metaroomid", "type": "integer"}], "name": "MLOC", "match": "MLOC", "type": "string", "syntaxstring": "MLOC (string) metaroomid (integer)", "uniquename": "v_MLOC", "evalcost": {"default": 0}, "implementation": "caosVM::v_MLOC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DMAP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Turns the debug map on and off, which shows the edges of rooms and vehicles.\n", "arguments": [{"name": "mapon", "type": "integer"}], "name": "DMAP", "match": "DMAP", "type": "command", "syntaxstring": "DMAP (command) mapon (integer)", "uniquename": "c_DMAP", "evalcost": {"default": 1}, "implementation": "caosVM::c_DMAP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ERID": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns a space-seperated list of all room id's contained by the given metaroom.\n", "arguments": [{"name": "metaroom_id", "type": "integer"}], "name": "ERID", "match": "ERID", "type": "string", "syntaxstring": "ERID (string) metaroom_id (integer)", "uniquename": "v_ERID", "evalcost": {"default": 0}, "implementation": "caosVM::v_ERID", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DELR": {"filename": "caosVM_map.cpp", "category": "map", "description": "Removes the given room from the map.\n", "arguments": [{"name": "room_id", "type": "integer"}], "name": "DELR", "match": "DELR", "type": "command", "syntaxstring": "DELR (command) room_id (integer)", "uniquename": "c_DELR", "evalcost": {"default": 1}, "implementation": "caosVM::c_DELR", "pragma": {"variants": "c2 cv c3 sm"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DELM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Removes the given metaroom from the map.\n", "arguments": [{"name": "metaroom_id", "type": "integer"}], "name": "DELM", "match": "DELM", "type": "command", "syntaxstring": "DELM (command) metaroom_id (integer)", "uniquename": "c_DELM", "evalcost": {"default": 1}, "implementation": "caosVM::c_DELM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIRP": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "caindex", "type": "integer"}, {"name": "direction", "type": "integer"}], "name": "HIRP", "match": "HIRP", "type": "integer", "syntaxstring": "HIRP (integer) roomid (integer) caindex (integer) direction (integer)", "uniquename": "v_HIRP", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIRP", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_LORP": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "caindex", "type": "integer"}, {"name": "direction", "type": "integer"}], "name": "LORP", "match": "LORP", "type": "integer", "syntaxstring": "LORP (integer) roomid (integer) caindex (integer) direction (integer)", "uniquename": "v_LORP", "evalcost": {"default": 0}, "implementation": "caosVM::v_LORP", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_TORX": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "roomid", "type": "integer"}], "name": "TORX", "match": "TORX", "type": "float", "syntaxstring": "TORX (float) roomid (integer)", "uniquename": "v_TORX", "evalcost": {"default": 0}, "implementation": "caosVM::v_TORX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_TORY": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "roomid", "type": "integer"}], "name": "TORY", "match": "TORY", "type": "float", "syntaxstring": "TORY (float) roomid (integer)", "uniquename": "v_TORY", "evalcost": {"default": 0}, "implementation": "caosVM::v_TORY", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_CACL": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "caindex", "type": "integer"}], "name": "CACL", "match": "CACL", "type": "command", "syntaxstring": "CACL (command) family (integer) genus (integer) species (integer) caindex (integer)", "uniquename": "c_CACL", "evalcost": {"default": 1}, "implementation": "caosVM::c_CACL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_DOCA": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "times", "type": "integer"}], "name": "DOCA", "match": "DOCA", "type": "command", "syntaxstring": "DOCA (command) times (integer)", "uniquename": "c_DOCA", "evalcost": {"default": 1}, "implementation": "caosVM::c_DOCA", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_WRAP": {"filename": "caosVM_map.cpp", "category": "map", "description": "The world-wrapping flag for the specified metaroom. 1 to enable wrapping, 0 to disable.\n", "arguments": [{"name": "metaroom_id", "type": "integer"}], "name": "WRAP", "match": "WRAP", "type": "variable", "syntaxstring": "WRAP (variable) metaroom_id (integer)", "uniquename": "v_WRAP", "evalcost": {"default": 0}, "implementation": "caosVM::v_WRAP", "pragma": {"variants": "all"}, "status": "broken", "saveimpl": "caosVM::s_WRAP", "stackdelta": 0}, "c_ELAS": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the elasticity (in other words, bounciness) of the TARG agent.\n", "arguments": [{"name": "elas", "type": "integer"}], "name": "ELAS", "match": "ELAS", "type": "command", "syntaxstring": "ELAS (command) elas (integer)", "uniquename": "c_ELAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_ELAS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ELAS": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the elasticity of the TARG agent.\n", "arguments": [], "name": "ELAS", "match": "ELAS", "type": "integer", "syntaxstring": "ELAS (integer)", "uniquename": "v_ELAS", "evalcost": {"default": 0}, "implementation": "caosVM::v_ELAS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MVTO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Places the TARG agent at the given x/y position in the world (using the upper left hand corner of the agent).\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "MVTO", "match": "MVTO", "type": "command", "syntaxstring": "MVTO (command) x (float) y (float)", "uniquename": "c_MVTO", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_MVTO", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_MVBY": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Changes the TARG agent's position by the given relative distances.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "MVBY", "match": "MVBY", "type": "command", "syntaxstring": "MVBY (command) x (float) y (float)", "uniquename": "c_MVBY", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_MVBY", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_VELX": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the current horizontal velocity, in pixels/tick, of the TARG agent.\n", "arguments": [], "name": "VELX", "match": "VELX", "type": "variable", "syntaxstring": "VELX (variable)", "uniquename": "v_VELX", "evalcost": {"default": 0}, "implementation": "caosVM::v_VELX", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_VELX", "stackdelta": 1}, "v_VELY": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the current vertical velocity, in pixels/tick, of the TARG agent.\n", "arguments": [], "name": "VELY", "match": "VELY", "type": "variable", "syntaxstring": "VELY (variable)", "uniquename": "v_VELY", "evalcost": {"default": 0}, "implementation": "caosVM::v_VELY", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_VELY", "stackdelta": 1}, "v_OBST": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the distance from the TARG agent to the nearest wall that it might collide with in the given direction.\n(except right now it just gives the direction to the nearest wall at world edge - fuzzie)\n", "arguments": [{"name": "direction", "type": "integer"}], "name": "OBST", "match": "OBST", "type": "float", "syntaxstring": "OBST (float) direction (integer)", "uniquename": "v_OBST", "evalcost": {"default": 0}, "implementation": "caosVM::v_OBST", "pragma": {"variants": "cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_TMVB": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns 1 if the TARG agent could move by (deltax, deltay) and still be in room system, or 0 otherwise.\n", "arguments": [{"name": "deltax", "type": "float"}, {"name": "deltay", "type": "float"}], "name": "TMVB", "match": "TMVB", "type": "integer", "syntaxstring": "TMVB (integer) deltax (float) deltay (float)", "uniquename": "v_TMVB", "evalcost": {"default": 0}, "implementation": "caosVM::v_TMVB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_TMVT": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns 1 if the TARG agent could move to (x, y) and still be in room system, or 0 if otherwise.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "TMVT", "match": "TMVT", "type": "integer", "syntaxstring": "TMVT (integer) x (float) y (float)", "uniquename": "v_TMVT", "evalcost": {"default": 0}, "implementation": "caosVM::v_TMVT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_TMVF": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns 1 if the TARG Creature could move foot to (x, y) and still be in room system, or 0 if otherwise.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "TMVF", "match": "TMVF", "type": "integer", "syntaxstring": "TMVF (integer) x (float) y (float)", "uniquename": "v_TMVF", "evalcost": {"default": 0}, "implementation": "caosVM::v_TMVF", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ACCG": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the TARG agent's free-fall acceleration, in pixels/tick squared.\n", "arguments": [{"name": "accel", "type": "float"}], "name": "ACCG", "match": "ACCG", "type": "command", "syntaxstring": "ACCG (command) accel (float)", "uniquename": "c_ACCG", "evalcost": {"default": 1}, "implementation": "caosVM::c_ACCG", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ACCG": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the TARG agent's free-fall acceleration, in pixels/tick squared.\n", "arguments": [], "name": "ACCG", "match": "ACCG", "type": "float", "syntaxstring": "ACCG (float)", "uniquename": "v_ACCG", "evalcost": {"default": 0}, "implementation": "caosVM::v_ACCG", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_AERO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the aerodynamics of the TARG agent to the given float value.\n", "arguments": [{"name": "aero", "type": "float"}], "name": "AERO", "match": "AERO", "type": "command", "syntaxstring": "AERO (command) aero (float)", "uniquename": "c_AERO", "evalcost": {"default": 1}, "implementation": "caosVM::c_AERO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_AERO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the aerodynamics of the TARG agent.\n", "arguments": [], "name": "AERO", "match": "AERO", "type": "float", "syntaxstring": "AERO (float)", "uniquename": "v_AERO", "evalcost": {"default": 0}, "implementation": "caosVM::v_AERO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_RELX": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the relative horizontal distance between the centers of the two given agents.\n", "arguments": [{"name": "first", "type": "agent"}, {"name": "second", "type": "agent"}], "name": "RELX", "match": "RELX", "type": "float", "syntaxstring": "RELX (float) first (agent) second (agent)", "uniquename": "v_RELX", "evalcost": {"default": 0}, "implementation": "caosVM::v_RELX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_RELY": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the relative vertical distance between the centers of the two given agents.\n", "arguments": [{"name": "first", "type": "agent"}, {"name": "second", "type": "agent"}], "name": "RELY", "match": "RELY", "type": "float", "syntaxstring": "RELY (float) first (agent) second (agent)", "uniquename": "v_RELY", "evalcost": {"default": 0}, "implementation": "caosVM::v_RELY", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_VELO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the horizontal and vertical velocity of the TARG agent, in pixels/tick.\n", "arguments": [{"name": "xvel", "type": "float"}, {"name": "yvel", "type": "float"}], "name": "VELO", "match": "VELO", "type": "command", "syntaxstring": "VELO (command) xvel (float) yvel (float)", "uniquename": "c_VELO", "evalcost": {"default": 1}, "implementation": "caosVM::c_VELO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_MVSF": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Move the target agent to an area inside the room system at about (x, y).\nThis allows 'safe' moves.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "MVSF", "match": "MVSF", "type": "command", "syntaxstring": "MVSF (command) x (float) y (float)", "uniquename": "c_MVSF", "evalcost": {"default": 1}, "implementation": "caosVM::c_MVSF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_FRIC": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the TARG agent's coefficient of friction as a percentage.\n", "arguments": [], "name": "FRIC", "match": "FRIC", "type": "float", "syntaxstring": "FRIC (float)", "uniquename": "v_FRIC", "evalcost": {"default": 0}, "implementation": "caosVM::v_FRIC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FRIC": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the TARG agent's coefficient of friction, or the percentage of motion that will be lost as it slides on a\nsurface.\n", "arguments": [{"name": "friction", "type": "integer"}], "name": "FRIC", "match": "FRIC", "type": "command", "syntaxstring": "FRIC (command) friction (integer)", "uniquename": "c_FRIC", "evalcost": {"default": 1}, "implementation": "caosVM::c_FRIC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FALL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns 1 if the TARG agent is moving due to gravity, or 0 if otherwise.\n", "arguments": [], "name": "FALL", "match": "FALL", "type": "integer", "syntaxstring": "FALL (integer)", "uniquename": "v_FALL", "evalcost": {"default": 0}, "implementation": "caosVM::v_FALL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MOVS": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns an integer representing the motion status of the TARG agent.  0 is autonomous, 1 is moving by mouse, 2 is\nfloating, 3 is inside a vehicle, and 4 is being carried.\n", "arguments": [], "name": "MOVS", "match": "MOVS", "type": "variable", "syntaxstring": "MOVS (variable)", "uniquename": "v_MOVS", "evalcost": {"default": 0}, "implementation": "caosVM::v_MOVS", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_MOVS", "stackdelta": 1}, "c_FLTO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the TARG agent to float its top-left corner (x, y) away from the top-left corner of the FREL agent.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "FLTO", "match": "FLTO", "type": "command", "syntaxstring": "FLTO (command) x (float) y (float)", "uniquename": "c_FLTO", "evalcost": {"default": 1}, "implementation": "caosVM::c_FLTO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_FREL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the agent the TARG agent floats relative to. You must set the 'floatable' attribute for this to work.\nThe default is NULL, which means the target agent floats relative to the main camera.\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "FREL", "match": "FREL", "type": "command", "syntaxstring": "FREL (command) agent (agent)", "uniquename": "c_FREL", "evalcost": {"default": 1}, "implementation": "caosVM::c_FREL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FLTX": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the x value of the TARG agent's floating vector.\n", "arguments": [], "name": "FLTX", "match": "FLTX", "type": "float", "syntaxstring": "FLTX (float)", "uniquename": "v_FLTX", "evalcost": {"default": 0}, "implementation": "caosVM::v_FLTX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_FLTY": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the y value of the TARG agent's floating vector.\n", "arguments": [], "name": "FLTY", "match": "FLTY", "type": "float", "syntaxstring": "FLTY (float)", "uniquename": "v_FLTY", "evalcost": {"default": 0}, "implementation": "caosVM::v_FLTY", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_AVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the angular velocity for the target agent.\n", "arguments": [{"name": "angularvelocity", "type": "float"}], "name": "AVEL", "match": "AVEL", "type": "command", "syntaxstring": "AVEL (command) angularvelocity (float)", "uniquename": "c_AVEL", "evalcost": {"default": 1}, "implementation": "caosVM::c_AVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_AVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the angular velocity for the target agent.\n", "arguments": [], "name": "AVEL", "match": "AVEL", "type": "float", "syntaxstring": "AVEL (float)", "uniquename": "v_AVEL", "evalcost": {"default": 0}, "implementation": "caosVM::v_AVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the forward velocity for the target agent.\n", "arguments": [{"name": "forwardvelocity", "type": "float"}], "name": "FVEL", "match": "FVEL", "type": "command", "syntaxstring": "FVEL (command) forwardvelocity (float)", "uniquename": "c_FVEL", "evalcost": {"default": 1}, "implementation": "caosVM::c_FVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the forward velocity for the target agent.\n", "arguments": [], "name": "FVEL", "match": "FVEL", "type": "float", "syntaxstring": "FVEL (float)", "uniquename": "v_FVEL", "evalcost": {"default": 0}, "implementation": "caosVM::v_FVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_SVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the sideways velocity for the target agent.\n", "arguments": [{"name": "sidewaysvelocity", "type": "float"}], "name": "SVEL", "match": "SVEL", "type": "command", "syntaxstring": "SVEL (command) sidewaysvelocity (float)", "uniquename": "c_SVEL", "evalcost": {"default": 1}, "implementation": "caosVM::c_SVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_SVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the sideways velocity for the target agent.\n", "arguments": [], "name": "SVEL", "match": "SVEL", "type": "float", "syntaxstring": "SVEL (float)", "uniquename": "v_SVEL", "evalcost": {"default": 0}, "implementation": "caosVM::v_SVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_ADMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the angular damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [{"name": "angulardamping", "type": "float"}], "name": "ADMP", "match": "ADMP", "type": "command", "syntaxstring": "ADMP (command) angulardamping (float)", "uniquename": "c_ADMP", "evalcost": {"default": 1}, "implementation": "caosVM::c_ADMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ADMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the angular damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [], "name": "ADMP", "match": "ADMP", "type": "float", "syntaxstring": "ADMP (float)", "uniquename": "v_ADMP", "evalcost": {"default": 0}, "implementation": "caosVM::v_ADMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FDMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the forward damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [{"name": "forwarddamping", "type": "float"}], "name": "FDMP", "match": "FDMP", "type": "command", "syntaxstring": "FDMP (command) forwarddamping (float)", "uniquename": "c_FDMP", "evalcost": {"default": 1}, "implementation": "caosVM::c_FDMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FDMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the forward damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [], "name": "FDMP", "match": "FDMP", "type": "float", "syntaxstring": "FDMP (float)", "uniquename": "v_FDMP", "evalcost": {"default": 0}, "implementation": "caosVM::v_FDMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_SDMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the sideways damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [{"name": "sidewaysdamping", "type": "float"}], "name": "SDMP", "match": "SDMP", "type": "command", "syntaxstring": "SDMP (command) sidewaysdamping (float)", "uniquename": "c_SDMP", "evalcost": {"default": 1}, "implementation": "caosVM::c_SDMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_SDMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the sideways damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [], "name": "SDMP", "match": "SDMP", "type": "float", "syntaxstring": "SDMP (float)", "uniquename": "v_SDMP", "evalcost": {"default": 0}, "implementation": "caosVM::v_SDMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_SPIN": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the angle (from 0.0 to 1.0) the target agent is facing.\nTODO: This seems to not affect velocity in original c2e, sometimes. Needs more investigation.\n", "arguments": [{"name": "angle", "type": "float"}], "name": "SPIN", "match": "SPIN", "type": "command", "syntaxstring": "SPIN (command) angle (float)", "uniquename": "c_SPIN", "evalcost": {"default": 1}, "implementation": "caosVM::c_SPIN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_SPIN": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the angle (from 0.0 to 1.0) the target agent is facing.\n", "arguments": [], "name": "SPIN", "match": "SPIN", "type": "float", "syntaxstring": "SPIN (float)", "uniquename": "v_SPIN", "evalcost": {"default": 0}, "implementation": "caosVM::v_SPIN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_ANGL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Calculates the angle (from 0.0 to 1.0) between the target agent and the specified coordinates.\nTODO: This seems not to work in original c2e unless there's been an angular calculation on the target agent. Needs more investigation.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "ANGL", "match": "ANGL", "type": "float", "syntaxstring": "ANGL (float) x (float) y (float)", "uniquename": "v_ANGL", "evalcost": {"default": 0}, "implementation": "caosVM::v_ANGL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ROTN": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Enable automatic sprite adjustments for the current agent (by changing the BASE of part 0), based on the current rotation (SPIN).\n'sprites' specifies the number of sprites for each rotation.\n'rotations' specifies the number of different angles provided in the sprite file. They should begin facing north and continue clockwise.\nThe total number of sprites used will be sprites * rotations.\n", "arguments": [{"name": "sprites", "type": "integer"}, {"name": "rotations", "type": "integer"}], "name": "ROTN", "match": "ROTN", "type": "command", "syntaxstring": "ROTN (command) sprites (integer) rotations (integer)", "uniquename": "c_ROTN", "evalcost": {"default": 1}, "implementation": "caosVM::c_ROTN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_NET_PASS": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "nick_name", "type": "string"}, {"name": "password", "type": "string"}], "name": "NET: PASS", "match": "PASS", "type": "command", "syntaxstring": "NET: PASS (command) nick_name (string) password (string)", "uniquename": "c_NET_PASS", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_PASS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_NET_PASS": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so always returns \"nobody\".\n", "arguments": [], "name": "NET: PASS", "match": "PASS", "type": "string", "syntaxstring": "NET: PASS (string)", "uniquename": "v_NET_PASS", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_PASS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_NET_LINE": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "connect", "type": "integer"}], "name": "NET: LINE", "match": "LINE", "type": "command", "syntaxstring": "NET: LINE (command) connect (integer)", "uniquename": "c_NET_LINE", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_LINE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_NET_LINE": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so always returns 1.\n", "arguments": [], "name": "NET: LINE", "match": "LINE", "type": "integer", "syntaxstring": "NET: LINE (integer)", "uniquename": "v_NET_LINE", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_LINE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NET_ERRA": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so always returns 0.\n", "arguments": [], "name": "NET: ERRA", "match": "ERRA", "type": "integer", "syntaxstring": "NET: ERRA (integer)", "uniquename": "v_NET_ERRA", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_ERRA", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NET_ULIN": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so always returns 0.\n", "arguments": [{"name": "username", "type": "string"}], "name": "NET: ULIN", "match": "ULIN", "type": "integer", "syntaxstring": "NET: ULIN (integer) username (string)", "uniquename": "v_NET_ULIN", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_ULIN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_WHOZ": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [], "name": "NET: WHOZ", "match": "WHOZ", "type": "command", "syntaxstring": "NET: WHOZ (command)", "uniquename": "c_NET_WHOZ", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_WHOZ", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_WHON": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "username", "type": "string"}], "name": "NET: WHON", "match": "WHON", "type": "command", "syntaxstring": "NET: WHON (command) username (string)", "uniquename": "c_NET_WHON", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_WHON", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_NET_USER": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so returns an empty string.\n", "arguments": [], "name": "NET: USER", "match": "USER", "type": "string", "syntaxstring": "NET: USER (string)", "uniquename": "v_NET_USER", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_USER", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NET_FROM": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so returns an empty string.\n", "arguments": [{"name": "resource_name", "type": "string"}], "name": "NET: FROM", "match": "FROM", "type": "string", "syntaxstring": "NET: FROM (string) resource_name (string)", "uniquename": "v_NET_FROM", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_FROM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_NET_EXPO": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so always returns 0.\n", "arguments": [{"name": "chunk_type", "type": "string"}, {"name": "dest_user", "type": "string"}], "name": "NET: EXPO", "match": "EXPO", "type": "integer", "syntaxstring": "NET: EXPO (integer) chunk_type (string) dest_user (string)", "uniquename": "v_NET_EXPO", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_EXPO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_NET_RUSO": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so sets result to an empty string.\n", "arguments": [{"name": "result", "type": "variable"}], "name": "NET: RUSO", "match": "RUSO", "type": "command", "syntaxstring": "NET: RUSO (command) result (variable)", "uniquename": "c_NET_RUSO", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_RUSO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_HEAD": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [], "name": "NET: HEAD", "match": "HEAD", "type": "command", "syntaxstring": "NET: HEAD (command)", "uniquename": "c_NET_HEAD", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_HEAD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_HEAR": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "channel", "type": "string"}], "name": "NET: HEAR", "match": "HEAR", "type": "command", "syntaxstring": "NET: HEAR (command) channel (string)", "uniquename": "c_NET_HEAR", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_HEAR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_NET_HOST": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so returns an empty string.\n", "arguments": [], "name": "NET: HOST", "match": "HOST", "type": "string", "syntaxstring": "NET: HOST (string)", "uniquename": "v_NET_HOST", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_HOST", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NET_RAWE": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so returns zero.\n", "arguments": [], "name": "NET: RAWE", "match": "RAWE", "type": "integer", "syntaxstring": "NET: RAWE (integer)", "uniquename": "v_NET_RAWE", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_RAWE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_NET_STAT": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so sets everything to -1.\n", "arguments": [{"name": "timeonline", "type": "variable"}, {"name": "usersonline", "type": "variable"}, {"name": "bytesreceived", "type": "variable"}, {"name": "bytessent", "type": "variable"}], "name": "NET: STAT", "match": "STAT", "type": "command", "syntaxstring": "NET: STAT (command) timeonline (variable) usersonline (variable) bytesreceived (variable) bytessent (variable)", "uniquename": "c_NET_STAT", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_STAT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_UNIK": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so sets result to an empty string.\n", "arguments": [{"name": "userid", "type": "string"}, {"name": "result", "type": "variable"}], "name": "NET: UNIK", "match": "UNIK", "type": "command", "syntaxstring": "NET: UNIK (command) userid (string) result (variable)", "uniquename": "c_NET_UNIK", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_UNIK", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_NET_WHAT": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so return an empty string.\n", "arguments": [], "name": "NET: WHAT", "match": "WHAT", "type": "string", "syntaxstring": "NET: WHAT (string)", "uniquename": "v_NET_WHAT", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_WHAT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_NET_WHOD": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [], "name": "NET: WHOD", "match": "WHOD", "type": "command", "syntaxstring": "NET: WHOD (command)", "uniquename": "c_NET_WHOD", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_WHOD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_WHOF": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "user", "type": "string"}], "name": "NET: WHOF", "match": "WHOF", "type": "command", "syntaxstring": "NET: WHOF (command) user (string)", "uniquename": "c_NET_WHOF", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_WHOF", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_NET_WRIT": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "userid", "type": "string"}, {"name": "channel", "type": "string"}, {"name": "messageid", "type": "string"}, {"name": "param1", "type": "anything"}, {"name": "param2", "type": "anything"}], "name": "NET: WRIT", "match": "WRIT", "type": "command", "syntaxstring": "NET: WRIT (command) userid (string) channel (string) messageid (string) param1 (anything) param2 (anything)", "uniquename": "c_NET_WRIT", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_WRIT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_PRT_BANG": {"filename": "caosVM_ports.cpp", "category": "ports", "arguments": [{"name": "strength", "type": "integer"}], "name": "PRT: BANG", "match": "BANG", "type": "command", "syntaxstring": "PRT: BANG (command) strength (integer)", "uniquename": "c_PRT_BANG", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_BANG", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRT_FRMA": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Returns agent to which the specified input port is connected, NULL if not\nconnected or the port doesn't exist.\n", "arguments": [{"name": "inputport", "type": "integer"}], "name": "PRT: FRMA", "match": "FRMA", "type": "agent", "syntaxstring": "PRT: FRMA (agent) inputport (integer)", "uniquename": "v_PRT_FRMA", "namespace": "prt:", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRT_FRMA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PRT_FROM": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Returns the output port id on the source agent connected to the specified\ninput port. Returns a negative value if the port is not connected or if the\nsource agent does not exist.\n", "arguments": [{"name": "inputport", "type": "integer"}], "name": "PRT: FROM", "match": "FROM", "type": "integer", "syntaxstring": "PRT: FROM (integer) inputport (integer)", "uniquename": "v_PRT_FROM", "namespace": "prt:", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRT_FROM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PRT_INEW": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Creates a new input port on targ. The message msgnum will be sent to the agent\nwhen a signal arrives through the port. _P1_ of that message will be the data\nof the signal.\n", "arguments": [{"name": "id", "type": "integer"}, {"name": "name", "type": "string"}, {"name": "desc", "type": "string"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "msgnum", "type": "integer"}], "name": "PRT: INEW", "match": "INEW", "type": "command", "syntaxstring": "PRT: INEW (command) id (integer) name (string) desc (string) x (integer) y (integer) msgnum (integer)", "uniquename": "c_PRT_INEW", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_INEW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "v_PRT_ITOT": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Returns the total number of input ports.\n", "arguments": [], "name": "PRT: ITOT", "match": "ITOT", "type": "integer", "syntaxstring": "PRT: ITOT (integer)", "uniquename": "v_PRT_ITOT", "namespace": "prt:", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRT_ITOT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PRT_IZAP": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Removes the input port with given id.\n", "arguments": [{"name": "id", "type": "integer"}], "name": "PRT: IZAP", "match": "IZAP", "type": "command", "syntaxstring": "PRT: IZAP (command) id (integer)", "uniquename": "c_PRT_IZAP", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_IZAP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PRT_JOIN": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Joins the output port from source to the input port of dest.\n", "arguments": [{"name": "source", "type": "agent"}, {"name": "outputport", "type": "integer"}, {"name": "dest", "type": "agent"}, {"name": "inputport", "type": "integer"}], "name": "PRT: JOIN", "match": "JOIN", "type": "command", "syntaxstring": "PRT: JOIN (command) source (agent) outputport (integer) dest (agent) inputport (integer)", "uniquename": "c_PRT_JOIN", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_JOIN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_PRT_KRAK": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Breaks a connection on agent. If is_outport, kill all connections connected to\nthe port. Else, kill the connection to the inport.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "is_outport", "type": "integer"}, {"name": "port", "type": "integer"}], "name": "PRT: KRAK", "match": "KRAK", "type": "command", "syntaxstring": "PRT: KRAK (command) agent (agent) is_outport (integer) port (integer)", "uniquename": "c_PRT_KRAK", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_KRAK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_PRT_NAME": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Returns the name of the specified port. Returns \"\" if the port doesn't exist.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "is_outport", "type": "integer"}, {"name": "port", "type": "integer"}], "name": "PRT: NAME", "match": "NAME", "type": "string", "syntaxstring": "PRT: NAME (string) agent (agent) is_outport (integer) port (integer)", "uniquename": "v_PRT_NAME", "namespace": "prt:", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRT_NAME", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_PRT_ONEW": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Creates a new output port on targ.\n", "arguments": [{"name": "id", "type": "integer"}, {"name": "name", "type": "string"}, {"name": "desc", "type": "string"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "PRT: ONEW", "match": "ONEW", "type": "command", "syntaxstring": "PRT: ONEW (command) id (integer) name (string) desc (string) x (integer) y (integer)", "uniquename": "c_PRT_ONEW", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_ONEW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "v_PRT_OTOT": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Returns the total number of output ports.\n", "arguments": [], "name": "PRT: OTOT", "match": "OTOT", "type": "integer", "syntaxstring": "PRT: OTOT (integer)", "uniquename": "v_PRT_OTOT", "namespace": "prt:", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRT_OTOT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PRT_OZAP": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Destroys output port with given id.\n", "arguments": [{"name": "id", "type": "integer"}], "name": "PRT: OZAP", "match": "OZAP", "type": "command", "syntaxstring": "PRT: OZAP (command) id (integer)", "uniquename": "c_PRT_OZAP", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_OZAP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PRT_SEND": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Sends information over targ's output port.\n", "arguments": [{"name": "id", "type": "integer"}, {"name": "data", "type": "anything"}], "name": "PRT: SEND", "match": "SEND", "type": "command", "syntaxstring": "PRT: SEND (command) id (integer) data (anything)", "uniquename": "c_PRT_SEND", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_SEND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_AGTI": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "using the specified resource, returns the integer value associated with the given tag,\nor default if the tag doesn't exist\n", "arguments": [{"name": "resource", "type": "string"}, {"name": "tag", "type": "string"}, {"name": "default", "type": "integer"}], "name": "PRAY AGTI", "match": "AGTI", "type": "integer", "syntaxstring": "PRAY AGTI (integer) resource (string) tag (string) default (integer)", "uniquename": "v_PRAY_AGTI", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_AGTI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_AGTS": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "using the specified resource, returns the string value associated with the given tag,\nor default if the tag doesn't exist\n", "arguments": [{"name": "resource", "type": "string"}, {"name": "tag", "type": "string"}, {"name": "default", "type": "string"}], "name": "PRAY AGTS", "match": "AGTS", "type": "string", "syntaxstring": "PRAY AGTS (string) resource (string) tag (string) default (string)", "uniquename": "v_PRAY_AGTS", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_AGTS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_BACK": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "returns the name of the resource of the specified type which is immediately previous to last\nsee PRAY PREV if you want to loop around\n", "arguments": [{"name": "type", "type": "string"}, {"name": "last", "type": "string"}], "name": "PRAY BACK", "match": "BACK", "type": "string", "syntaxstring": "PRAY BACK (string) type (string) last (string)", "uniquename": "v_PRAY_BACK", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_BACK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRAY_COUN": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "return the number of resources of the specified type available\n", "arguments": [{"name": "type", "type": "string"}], "name": "PRAY COUN", "match": "COUN", "type": "integer", "syntaxstring": "PRAY COUN (integer) type (string)", "uniquename": "v_PRAY_COUN", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_COUN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PRAY_DEPS": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "name", "type": "string"}, {"name": "install", "type": "integer"}], "name": "PRAY DEPS", "match": "DEPS", "type": "integer", "syntaxstring": "PRAY DEPS (integer) name (string) install (integer)", "uniquename": "v_PRAY_DEPS", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_DEPS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRAY_EXPO": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "type", "type": "string"}], "name": "PRAY EXPO", "match": "EXPO", "type": "integer", "syntaxstring": "PRAY EXPO (integer) type (string)", "uniquename": "v_PRAY_EXPO", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_EXPO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PRAY_FILE": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "install a file with given resource name and type\nif install is 0, the install doesn't actually happen, it's just tested\nreturns 0 on success, 1 on failure\n", "arguments": [{"name": "name", "type": "integer"}, {"name": "type", "type": "integer"}, {"name": "install", "type": "integer"}], "name": "PRAY FILE", "match": "FILE", "type": "integer", "syntaxstring": "PRAY FILE (integer) name (integer) type (integer) install (integer)", "uniquename": "v_PRAY_FILE", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_FILE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_FORE": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "returns the name of the resource of the specified type which is immediately after last\nsee PRAY NEXT if you want to loop around\n", "arguments": [{"name": "type", "type": "string"}, {"name": "last", "type": "string"}], "name": "PRAY FORE", "match": "FORE", "type": "string", "syntaxstring": "PRAY FORE (string) type (string) last (string)", "uniquename": "v_PRAY_FORE", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_FORE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PRAY_GARB": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "if force is 0, make the pray manager garbage-collect resources\notherwise, make the pray manager empty its cache entirely\n\nrecommended to be called after intensive PRAY usage, eg agent installation\n", "arguments": [{"name": "force", "type": "integer"}], "name": "PRAY GARB", "match": "GARB", "type": "command", "syntaxstring": "PRAY GARB (command) force (integer)", "uniquename": "c_PRAY_GARB", "namespace": "pray", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRAY_GARB", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRAY_IMPO": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "moniker", "type": "string"}, {"name": "doit", "type": "integer"}, {"name": "keepfile", "type": "integer"}], "name": "PRAY IMPO", "match": "IMPO", "type": "integer", "syntaxstring": "PRAY IMPO (integer) moniker (string) doit (integer) keepfile (integer)", "uniquename": "v_PRAY_IMPO", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_IMPO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_INJT": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "name", "type": "string"}, {"name": "install", "type": "integer"}, {"name": "report", "type": "variable"}], "name": "PRAY INJT", "match": "INJT", "type": "integer", "syntaxstring": "PRAY INJT (integer) name (string) install (integer) report (variable)", "uniquename": "v_PRAY_INJT", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_INJT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRAY_KILL": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "deletes from disk the file containing the given resource\n\nreturns 1 upon success, or 0 upon failure (typically no such resource)\n", "arguments": [{"name": "resource", "type": "string"}], "name": "PRAY KILL", "match": "KILL", "type": "integer", "syntaxstring": "PRAY KILL (integer) resource (string)", "uniquename": "v_PRAY_KILL", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_KILL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PRAY_MAKE": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "journalspot", "type": "integer"}, {"name": "journalname", "type": "string"}, {"name": "prayspot", "type": "integer"}, {"name": "name", "type": "string"}, {"name": "report", "type": "variable"}], "name": "PRAY MAKE", "match": "MAKE", "type": "integer", "syntaxstring": "PRAY MAKE (integer) journalspot (integer) journalname (string) prayspot (integer) name (string) report (variable)", "uniquename": "v_PRAY_MAKE", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_MAKE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_NET_MAKE": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "Networking is not supported in openc2e, so conveniently fails.\n", "arguments": [{"name": "journalspot", "type": "integer"}, {"name": "journalname", "type": "integer"}, {"name": "user", "type": "string"}, {"name": "report", "type": "variable"}], "name": "NET: MAKE", "match": "MAKE", "type": "integer", "syntaxstring": "NET: MAKE (integer) journalspot (integer) journalname (integer) user (string) report (variable)", "uniquename": "v_NET_MAKE", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_MAKE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_NEXT": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "returns the name of the resource of the specified type which is immediately after last\nsee PRAY FORE if you don't want to loop around\n", "arguments": [{"name": "type", "type": "string"}, {"name": "last", "type": "string"}], "name": "PRAY NEXT", "match": "NEXT", "type": "string", "syntaxstring": "PRAY NEXT (string) type (string) last (string)", "uniquename": "v_PRAY_NEXT", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_NEXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRAY_PREV": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "returns the name of the resource of the specified type which is immediately previous to last\nsee PRAY BACK if you don't want to loop around\n", "arguments": [{"name": "type", "type": "string"}, {"name": "last", "type": "string"}], "name": "PRAY PREV", "match": "PREV", "type": "string", "syntaxstring": "PRAY PREV (string) type (string) last (string)", "uniquename": "v_PRAY_PREV", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_PREV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PRAY_REFR": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "make the pray manager check for deleted/new files in the resource directory\n", "arguments": [], "name": "PRAY REFR", "match": "REFR", "type": "command", "syntaxstring": "PRAY REFR (command)", "uniquename": "c_PRAY_REFR", "namespace": "pray", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRAY_REFR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PRAY_TEST": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "name", "type": "string"}], "name": "PRAY TEST", "match": "TEST", "type": "integer", "syntaxstring": "PRAY TEST (integer) name (string)", "uniquename": "v_PRAY_TEST", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_TEST", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_INST": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Forces the following commands to be executed in one tick, rather than scheduling them, until SLOW or the end\nof the script is encountered.\n", "arguments": [], "name": "INST", "match": "INST", "type": "command", "syntaxstring": "INST (command)", "uniquename": "c_INST", "evalcost": {"default": 1}, "implementation": "caosVM::c_INST", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SLOW": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Reverses the effects of INST.\n", "arguments": [], "name": "SLOW", "match": "SLOW", "type": "command", "syntaxstring": "SLOW (command)", "uniquename": "c_SLOW", "evalcost": {"default": 1}, "implementation": "caosVM::c_SLOW", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_LOCK": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Prevent the script from being interrupted by another until UNLK or the end of the script is encountered.\n", "arguments": [], "name": "LOCK", "match": "LOCK", "type": "command", "syntaxstring": "LOCK (command)", "uniquename": "c_LOCK", "evalcost": {"default": 1}, "implementation": "caosVM::c_LOCK", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_UNLK": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Reverses the effects of LOCK.\n", "arguments": [], "name": "UNLK", "match": "UNLK", "type": "command", "syntaxstring": "UNLK (command)", "uniquename": "c_UNLK", "evalcost": {"default": 1}, "implementation": "caosVM::c_UNLK", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_WAIT": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Stops the script from running for the given number of ticks.\n", "arguments": [{"name": "ticks", "type": "integer"}], "name": "WAIT", "match": "WAIT", "type": "command", "syntaxstring": "WAIT (command) ticks (integer)", "uniquename": "c_WAIT", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_WAIT", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_STOP": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Aborts the script.\n", "arguments": [], "name": "STOP", "match": "STOP", "type": "command", "syntaxstring": "STOP (command)", "uniquename": "c_STOP", "evalcost": {"default": 1}, "implementation": "caosVM::c_STOP", "pragma": {"stackdelta": "any", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_SCRX": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Deletes the event script in question from the scriptoruium.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "SCRX", "match": "SCRX", "type": "command", "syntaxstring": "SCRX (command) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "c_SCRX", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCRX", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_CODE": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Returns script number running in the TARG agent. Returns -1 if target is not\nrunning anything (or if it's running something that's not an event script).\n", "arguments": [], "name": "CODE", "match": "CODE", "type": "integer", "syntaxstring": "CODE (integer)", "uniquename": "v_CODE", "evalcost": {"default": 0}, "implementation": "caosVM::v_CODE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CODF": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Returns script family running in the TARG agent. Returns -1 if target is not\nrunning anything (or if it's running something that's not an event script).\n", "arguments": [], "name": "CODF", "match": "CODF", "type": "integer", "syntaxstring": "CODF (integer)", "uniquename": "v_CODF", "evalcost": {"default": 0}, "implementation": "caosVM::v_CODF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CODG": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Returns script genus running in the target. Returns -1 if target is not\nrunning anything (or if it's running something that's not an event script).\n", "arguments": [], "name": "CODG", "match": "CODG", "type": "integer", "syntaxstring": "CODG (integer)", "uniquename": "v_CODG", "evalcost": {"default": 0}, "implementation": "caosVM::v_CODG", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CODS": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Returns script species running in the target. Returns -1 if target is not\nrunning anything (or if it's running something that's not an event script).\n", "arguments": [], "name": "CODS", "match": "CODS", "type": "integer", "syntaxstring": "CODS (integer)", "uniquename": "v_CODS", "evalcost": {"default": 0}, "implementation": "caosVM::v_CODS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_JECT": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Inject a script from the current bootstrap. 'file' must be the full filename.\nFlags can be 1 for remove script, 2 for event scripts and 4 for install script.\n", "arguments": [{"name": "file", "type": "string"}, {"name": "flags", "type": "integer"}], "name": "JECT", "match": "JECT", "type": "command", "syntaxstring": "JECT (command) file (string) flags (integer)", "uniquename": "c_JECT", "evalcost": {"default": 1}, "implementation": "caosVM::c_JECT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_SORQ": {"filename": "caosVM_scripts.cpp", "category": "scripts", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "SORQ", "match": "SORQ", "type": "integer", "syntaxstring": "SORQ (integer) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "v_SORQ", "evalcost": {"default": 0}, "implementation": "caosVM::v_SORQ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_SERS_MAPP": {"filename": "caosVM_ser_stub.cpp", "category": "unknown", "description": "Saves the map to the specified file.\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SERS MAPP", "match": "MAPP", "type": "command", "syntaxstring": "SERS MAPP (command) filename (string)", "uniquename": "c_SERS_MAPP", "namespace": "sers", "evalcost": {"default": 1}, "implementation": "caosVM::c_SERS_MAPP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SERL_MAPP": {"filename": "caosVM_ser_stub.cpp", "category": "unknown", "description": "Loads the map from the specified file\n\nMay explode if anything at all exists.\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SERL MAPP", "match": "MAPP", "type": "command", "syntaxstring": "SERL MAPP (command) filename (string)", "uniquename": "c_SERL_MAPP", "namespace": "serl", "evalcost": {"default": 1}, "implementation": "caosVM::c_SERL_MAPP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SERS_SCRP": {"filename": "caosVM_ser_stub.cpp", "category": "unknown", "description": "Saves the scriptorium to the specified file\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SERS SCRP", "match": "SCRP", "type": "command", "syntaxstring": "SERS SCRP (command) filename (string)", "uniquename": "c_SERS_SCRP", "namespace": "sers", "evalcost": {"default": 1}, "implementation": "caosVM::c_SERS_SCRP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SERL_SCRP": {"filename": "caosVM_ser_stub.cpp", "category": "unknown", "description": "Loads the scriptorium from the specified file\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SERL SCRP", "match": "SCRP", "type": "command", "syntaxstring": "SERL SCRP (command) filename (string)", "uniquename": "c_SERL_SCRP", "namespace": "serl", "evalcost": {"default": 1}, "implementation": "caosVM::c_SERL_SCRP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SNDE": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Play an uncontrolled sound at the target agent's current position.\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SNDE", "match": "SNDE", "type": "command", "syntaxstring": "SNDE (command) filename (string)", "uniquename": "c_SNDE", "evalcost": {"default": 1}, "implementation": "caosVM::c_SNDE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SNDC": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Start playing a controlled sound with the target agent, which will follow the agent as it moves.\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SNDC", "match": "SNDC", "type": "command", "syntaxstring": "SNDC (command) filename (string)", "uniquename": "c_SNDC", "evalcost": {"default": 1}, "implementation": "caosVM::c_SNDC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SNDL": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Start playing a looping controlled sound with the target agent, which will follow the agent as it moves.\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SNDL", "match": "SNDL", "type": "command", "syntaxstring": "SNDL (command) filename (string)", "uniquename": "c_SNDL", "evalcost": {"default": 1}, "implementation": "caosVM::c_SNDL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_MMSC": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Set the music track to be played in the metaroom containing the given coordinates.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "track_name", "type": "string"}], "name": "MMSC", "match": "MMSC", "type": "command", "syntaxstring": "MMSC (command) x (integer) y (integer) track_name (string)", "uniquename": "c_MMSC", "evalcost": {"default": 1}, "implementation": "caosVM::c_MMSC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_MMSC": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Returns the music track to be played in the metaroom containing the given coordinates.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "MMSC", "match": "MMSC", "type": "string", "syntaxstring": "MMSC (string) x (integer) y (integer)", "uniquename": "v_MMSC", "evalcost": {"default": 0}, "implementation": "caosVM::v_MMSC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_RMSC": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Set the music track to be played in the room containing the given coordinates.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "track_name", "type": "string"}], "name": "RMSC", "match": "RMSC", "type": "command", "syntaxstring": "RMSC (command) x (integer) y (integer) track_name (string)", "uniquename": "c_RMSC", "evalcost": {"default": 1}, "implementation": "caosVM::c_RMSC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_RMSC": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Returns the music track to be played in the room containing the given coordinates.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "RMSC", "match": "RMSC", "type": "string", "syntaxstring": "RMSC (string) x (integer) y (integer)", "uniquename": "v_RMSC", "evalcost": {"default": 0}, "implementation": "caosVM::v_RMSC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_FADE": {"filename": "caosVM_sounds.cpp", "category": "sound", "arguments": [], "name": "FADE", "match": "FADE", "type": "command", "syntaxstring": "FADE (command)", "uniquename": "c_FADE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_FADE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_STPC": {"filename": "caosVM_sounds.cpp", "category": "sound", "arguments": [], "name": "STPC", "match": "STPC", "type": "command", "syntaxstring": "STPC (command)", "uniquename": "c_STPC", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STPC", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_STRK": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Play the specified music track. It will play for at least latency seconds.\n", "arguments": [{"name": "latency", "type": "integer"}, {"name": "track", "type": "string"}], "name": "STRK", "match": "STRK", "type": "command", "syntaxstring": "STRK (command) latency (integer) track (string)", "uniquename": "c_STRK", "evalcost": {"default": 1}, "implementation": "caosVM::c_STRK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_VOLM": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Changes the volume of the specified type of audio; 0 for sound effects, 1 for midi or 2 for dynamic music.\nVolume is from -10000 (silent) to 0 (maximum).\n", "arguments": [{"name": "type", "type": "integer"}, {"name": "volume", "type": "integer"}], "name": "VOLM", "match": "VOLM", "type": "command", "syntaxstring": "VOLM (command) type (integer) volume (integer)", "uniquename": "c_VOLM", "evalcost": {"default": 1}, "implementation": "caosVM::c_VOLM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_VOLM": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Return the volumne of the specified type of audio; 0 for sound effects, 1 for midi or 2 for dynamic music.\nVolume is from -10000 (silent) to 0 (maximum).\n", "arguments": [{"name": "type", "type": "integer"}], "name": "VOLM", "match": "VOLM", "type": "integer", "syntaxstring": "VOLM (integer) type (integer)", "uniquename": "v_VOLM", "evalcost": {"default": 0}, "implementation": "caosVM::v_VOLM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MUTE": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "This returns/sets information about which types of in-game audio are muted.\nSet andmask for the information you want returned, and eormask for the information you want changed.\n1 is for normal sound, and 2 is for music (so 3 is for both combined).\n", "arguments": [{"name": "andmask", "type": "integer"}, {"name": "eormask", "type": "integer"}], "name": "MUTE", "match": "MUTE", "type": "integer", "syntaxstring": "MUTE (integer) andmask (integer) eormask (integer)", "uniquename": "v_MUTE", "evalcost": {"default": 0}, "implementation": "caosVM::v_MUTE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SEZZ": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Tells the target agent to speak the specified text.\n", "arguments": [{"name": "text", "type": "string"}], "name": "SEZZ", "match": "SEZZ", "type": "command", "syntaxstring": "SEZZ (command) text (string)", "uniquename": "c_SEZZ", "evalcost": {"default": 1}, "implementation": "caosVM::c_SEZZ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_VOIS": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Set the voice of the target agent to the specified voice (a catalogue tag).\n", "arguments": [{"name": "voice", "type": "string"}], "name": "VOIS", "match": "VOIS", "type": "command", "syntaxstring": "VOIS (command) voice (string)", "uniquename": "c_VOIS", "evalcost": {"default": 1}, "implementation": "caosVM::c_VOIS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_MIDI": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Plays the MIDI file specified, or stops playing if passed an empty string.\n", "arguments": [{"name": "midifile", "type": "string"}], "name": "MIDI", "match": "MIDI", "type": "command", "syntaxstring": "MIDI (command) midifile (string)", "uniquename": "c_MIDI", "evalcost": {"default": 1}, "implementation": "caosVM::c_MIDI", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_SINE": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Plays a sine wave coming from TARG\n\ntrack = 0 to fix the source at TARG's current location; track = 1 to follow\nview, track = 2 to inject it into the BGM source\n", "arguments": [{"name": "rate", "type": "integer"}, {"name": "stereo", "type": "integer"}, {"name": "track", "type": "integer"}, {"name": "amplitude", "type": "integer"}], "name": "DBG: SINE", "match": "SINE", "type": "command", "syntaxstring": "DBG: SINE (command) rate (integer) stereo (integer) track (integer) amplitude (integer)", "uniquename": "c_DBG_SINE", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_SINE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_DBG_SBGM": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Stops the BGM source. This probably doesn't do what you want it to do.\nDon't touch.\n", "arguments": [], "name": "DBG: SBGM", "match": "SBGM", "type": "command", "syntaxstring": "DBG: SBGM (command)", "uniquename": "c_DBG_SBGM", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_SBGM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PACE": {"filename": "caosVM_time.cpp", "category": "time", "description": "return speed factor of last ten ticks.\n\n< 1.0 = engine is ticking faster than BUZZ rating. > 1.0 = engine is ticking slower.\n\nYou might want to use this to reduce the amount of agents created or the amount of processing done if the speed factor is above 1.0.\n", "arguments": [], "name": "PACE", "match": "PACE", "type": "float", "syntaxstring": "PACE (float)", "uniquename": "v_PACE", "evalcost": {"default": 0}, "implementation": "caosVM::v_PACE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_BUZZ": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [{"name": "interval", "type": "integer"}], "name": "BUZZ", "match": "BUZZ", "type": "command", "syntaxstring": "BUZZ (command) interval (integer)", "uniquename": "c_BUZZ", "evalcost": {"default": 1}, "implementation": "caosVM::c_BUZZ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_BUZZ": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "BUZZ", "match": "BUZZ", "type": "integer", "syntaxstring": "BUZZ (integer)", "uniquename": "v_BUZZ", "evalcost": {"default": 0}, "implementation": "caosVM::v_BUZZ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DATE": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the day in the season of the current game world, starting at 0.\n", "arguments": [], "name": "DATE", "match": "DATE", "type": "integer", "syntaxstring": "DATE (integer)", "uniquename": "v_DATE", "evalcost": {"default": 0}, "implementation": "caosVM::v_DATE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HIST_DATE": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the day in the season of the current game world at the specified world tick, starting at 0. See DATE.\n", "arguments": [{"name": "tick", "type": "integer"}], "name": "HIST DATE", "match": "DATE", "type": "integer", "syntaxstring": "HIST DATE (integer) tick (integer)", "uniquename": "v_HIST_DATE", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_DATE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_SEAN": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the current game world season. 0 is spring, 1 is summer, 2 is autumn and 3 is winter.\n", "arguments": [], "name": "SEAN", "match": "SEAN", "type": "integer", "syntaxstring": "SEAN (integer)", "uniquename": "v_SEAN", "evalcost": {"default": 0}, "implementation": "caosVM::v_SEAN", "pragma": {"variants": "c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HIST_SEAN": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the current game world season at the specified world tick. 0 is spring, 1 is summer, 2 is autumn and 3 is winter. See SEAN.\n", "arguments": [{"name": "tick", "type": "integer"}], "name": "HIST SEAN", "match": "SEAN", "type": "integer", "syntaxstring": "HIST SEAN (integer) tick (integer)", "uniquename": "v_HIST_SEAN", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_SEAN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_TIME": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the time of day in the current game world. 0 is dawn, 1 is morning, 2 is afternoon, 3 is evening and 4 is night.\n", "arguments": [], "name": "TIME", "match": "TIME", "type": "integer", "syntaxstring": "TIME (integer)", "uniquename": "v_TIME", "evalcost": {"default": 0}, "implementation": "caosVM::v_TIME", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HIST_TIME": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the time of day in the current game world at the specified world tick. 0 is dawn, 1 is morning, 2 is afternoon, 3 is evening and 4 is night. See TIME.\n", "arguments": [{"name": "tick", "type": "integer"}], "name": "HIST TIME", "match": "TIME", "type": "integer", "syntaxstring": "HIST TIME (integer) tick (integer)", "uniquename": "v_HIST_TIME", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_TIME", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_YEAR": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the number of game years elapsed in the current world.\n", "arguments": [], "name": "YEAR", "match": "YEAR", "type": "integer", "syntaxstring": "YEAR (integer)", "uniquename": "v_YEAR", "evalcost": {"default": 0}, "implementation": "caosVM::v_YEAR", "pragma": {"variants": "c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HIST_YEAR": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the number of game years elapsed at the specified world tick. See YEAR.\n", "arguments": [{"name": "tick", "type": "integer"}], "name": "HIST YEAR", "match": "YEAR", "type": "integer", "syntaxstring": "HIST YEAR (integer) tick (integer)", "uniquename": "v_HIST_YEAR", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_YEAR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MSEC": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "MSEC", "match": "MSEC", "type": "integer", "syntaxstring": "MSEC (integer)", "uniquename": "v_MSEC", "evalcost": {"default": 0}, "implementation": "caosVM::v_MSEC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_WPAU": {"filename": "caosVM_time.cpp", "category": "time", "description": "If paused is 0, enable world ticks, otherwise (1) disable them.\n", "arguments": [{"name": "paused", "type": "integer"}], "name": "WPAU", "match": "WPAU", "type": "command", "syntaxstring": "WPAU (command) paused (integer)", "uniquename": "c_WPAU", "evalcost": {"default": 1}, "implementation": "caosVM::c_WPAU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_WPAU": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns 1 if world ticks are paused, or 0 otherwise.\n", "arguments": [], "name": "WPAU", "match": "WPAU", "type": "integer", "syntaxstring": "WPAU (integer)", "uniquename": "v_WPAU", "evalcost": {"default": 0}, "implementation": "caosVM::v_WPAU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PAUS": {"filename": "caosVM_time.cpp", "category": "time", "description": "If paused is 0, unpause target agent, otherwise (1) pause it.\n", "arguments": [{"name": "paused", "type": "integer"}], "name": "PAUS", "match": "PAUS", "type": "command", "syntaxstring": "PAUS (command) paused (integer)", "uniquename": "c_PAUS", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAUS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PAUS": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns 1 if target agent is paused, or 0 otherwise.\n", "arguments": [], "name": "PAUS", "match": "PAUS", "type": "integer", "syntaxstring": "PAUS (integer)", "uniquename": "v_PAUS", "evalcost": {"default": 0}, "implementation": "caosVM::v_PAUS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_RTIF": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the result of strftime with the current timestamp and format.\n", "arguments": [{"name": "timestamp", "type": "integer"}, {"name": "format", "type": "string"}], "name": "RTIF", "match": "RTIF", "type": "string", "syntaxstring": "RTIF (string) timestamp (integer) format (string)", "uniquename": "v_RTIF", "evalcost": {"default": 0}, "implementation": "caosVM::v_RTIF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_RTIM": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "RTIM", "match": "RTIM", "type": "integer", "syntaxstring": "RTIM (integer)", "uniquename": "v_RTIM", "evalcost": {"default": 0}, "implementation": "caosVM::v_RTIM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WTIK": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "WTIK", "match": "WTIK", "type": "integer", "syntaxstring": "WTIK (integer)", "uniquename": "v_WTIK", "evalcost": {"default": 0}, "implementation": "caosVM::v_WTIK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_RACE": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "RACE", "match": "RACE", "type": "integer", "syntaxstring": "RACE (integer)", "uniquename": "v_RACE", "evalcost": {"default": 0}, "implementation": "caosVM::v_RACE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_ETIK": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "ETIK", "match": "ETIK", "type": "integer", "syntaxstring": "ETIK (integer)", "uniquename": "v_ETIK", "evalcost": {"default": 0}, "implementation": "caosVM::v_ETIK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DAYT": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "DAYT", "match": "DAYT", "type": "integer", "syntaxstring": "DAYT (integer)", "uniquename": "v_DAYT", "evalcost": {"default": 0}, "implementation": "caosVM::v_DAYT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MONT": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "MONT", "match": "MONT", "type": "integer", "syntaxstring": "MONT (integer)", "uniquename": "v_MONT", "evalcost": {"default": 0}, "implementation": "caosVM::v_MONT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_VAxx": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Script-local variables (exist only in the current script) with xx being from 00 to 99.  Examples: VA01, VA45.\n", "arguments": [], "name": "VAxx", "match": "VAxx", "type": "variable", "syntaxstring": "VAxx (variable)", "uniquename": "v_VAxx", "evalcost": {"default": 0}, "implementation": "caosVM::v_VAxx", "pragma": {"stackdelta": "0", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_VAxx", "stackdelta": 0}, "v_MVxx": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Like OVxx, only for OWNR, not TARG.\n", "arguments": [], "name": "MVxx", "match": "MVxx", "type": "variable", "syntaxstring": "MVxx (variable)", "uniquename": "v_MVxx", "evalcost": {"default": 0}, "implementation": "caosVM::v_MVxx", "pragma": {"stackdelta": "0"}, "status": "maybe", "saveimpl": "caosVM::s_MVxx", "stackdelta": 0}, "c_ADDS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Append the given string to the given variable.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "value", "type": "string"}], "name": "ADDS", "match": "ADDS", "type": "command", "syntaxstring": "ADDS (command) var (variable) value (string)", "uniquename": "c_ADDS", "evalcost": {"default": 1}, "implementation": "caosVM::c_ADDS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SETS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Sets the given variable to the given string.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "value", "type": "string"}], "name": "SETS", "match": "SETS", "type": "command", "syntaxstring": "SETS (command) var (variable) value (string)", "uniquename": "c_SETS", "evalcost": {"default": 1}, "implementation": "caosVM::c_SETS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SETV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "%% Don't enable c1 or c2 here; we activate them with horrible hacks later\n\nSets the given variable to the given decimal value.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "value", "type": "decimal"}], "name": "SETV", "match": "SETV", "type": "command", "syntaxstring": "SETV (command) var (variable) value (decimal)", "uniquename": "c_SETV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SETV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SETA": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Sets the given variable to the given agent.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "value", "type": "agent"}], "name": "SETA", "match": "SETA", "type": "command", "syntaxstring": "SETA (command) var (variable) value (agent)", "uniquename": "c_SETA", "evalcost": {"default": 1}, "implementation": "caosVM::c_SETA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_OVxx": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Agent-local variables (exist only in the current agent's VM) from TARG, with xx being from 00 to 99.  Examples: OV01, OV45.\n", "arguments": [], "name": "OVxx", "match": "OVxx", "type": "variable", "syntaxstring": "OVxx (variable)", "uniquename": "v_OVxx", "evalcost": {"default": 0}, "implementation": "caosVM::v_OVxx", "pragma": {"stackdelta": "0", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_OVxx", "stackdelta": 0}, "v_TYPE": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns a integer value representing the type of data in 'value'.  0 is integer, 1 is float, 2 is string, 3 is agent.\n", "arguments": [{"name": "value", "type": "anything"}], "name": "TYPE", "match": "TYPE", "type": "integer", "syntaxstring": "TYPE (integer) value (anything)", "uniquename": "v_TYPE", "evalcost": {"default": 0}, "implementation": "caosVM::v_TYPE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_MODV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Divides the given variable by the given integer, and returns the remainder (var % mod).\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "mod", "type": "integer"}], "name": "MODV", "match": "MODV", "type": "command", "syntaxstring": "MODV (command) var (variable) mod (integer)", "uniquename": "c_MODV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MODV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ANDV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the result of a bitwise AND comparison of the given variable and the given integer (var & and).\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "and", "type": "integer"}], "name": "ANDV", "match": "ANDV", "type": "command", "syntaxstring": "ANDV (command) var (variable) and (integer)", "uniquename": "c_ANDV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ANDV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ORRV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the result of a bitwise OR comparison of the given variable and the given integer (var | or)\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "or", "type": "integer"}], "name": "ORRV", "match": "ORRV", "type": "command", "syntaxstring": "ORRV (command) var (variable) or (integer)", "uniquename": "c_ORRV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ORRV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ADDV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Adds the given integer to the given variable and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "add", "type": "integer"}], "name": "ADDV", "match": "ADDV", "type": "command", "syntaxstring": "ADDV (command) var (variable) add (integer)", "uniquename": "c_ADDV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ADDV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SUBV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Subtracts the given integer from the given variable and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "sub", "type": "integer"}], "name": "SUBV", "match": "SUBV", "type": "command", "syntaxstring": "SUBV (command) var (variable) sub (integer)", "uniquename": "c_SUBV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SUBV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_NEGV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the inverse of (negates) the given variable.  For example, 1 to -1, or -4 to 4.\n", "arguments": [{"name": "var", "type": "variable"}], "name": "NEGV", "match": "NEGV", "type": "command", "syntaxstring": "NEGV (command) var (variable)", "uniquename": "c_NEGV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_NEGV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DIVV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Divides the given variable by the given integer and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "div", "type": "decimal"}], "name": "DIVV", "match": "DIVV", "type": "command", "syntaxstring": "DIVV (command) var (variable) div (decimal)", "uniquename": "c_DIVV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_DIVV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_MULV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Multiplies the given variable by the given integer and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "mul", "type": "decimal"}], "name": "MULV", "match": "MULV", "type": "command", "syntaxstring": "MULV (command) var (variable) mul (decimal)", "uniquename": "c_MULV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MULV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_RAND": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns a random integer between 'value1' and 'value2', inclusive.\n", "arguments": [{"name": "value1", "type": "integer"}, {"name": "value2", "type": "integer"}], "name": "RAND", "match": "RAND", "type": "integer", "syntaxstring": "RAND (integer) value1 (integer) value2 (integer)", "uniquename": "v_RAND", "evalcost": {"default": 0}, "implementation": "caosVM::v_RAND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_REAF": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Re-reads all catalogue files.\n", "arguments": [], "name": "REAF", "match": "REAF", "type": "command", "syntaxstring": "REAF (command)", "uniquename": "c_REAF", "evalcost": {"default": 1}, "implementation": "caosVM::c_REAF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_UFOS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns 'uname -a' on platforms which support it, or OS details in another format otherwise.\n", "arguments": [], "name": "UFOS", "match": "UFOS", "type": "string", "syntaxstring": "UFOS (string)", "uniquename": "v_UFOS", "evalcost": {"default": 0}, "implementation": "caosVM::v_UFOS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MODU": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns information about which modules are being used by the engine (for now, backend and audio backend names).\n", "arguments": [], "name": "MODU", "match": "MODU", "type": "string", "syntaxstring": "MODU (string)", "uniquename": "v_MODU", "evalcost": {"default": 0}, "implementation": "caosVM::v_MODU", "pragma": {"variants": "all"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_GNAM": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the currently-running game (like \"Creatures 1\" or \"Docking Station\").\n", "arguments": [], "name": "GNAM", "match": "GNAM", "type": "string", "syntaxstring": "GNAM (string)", "uniquename": "v_GNAM", "evalcost": {"default": 0}, "implementation": "caosVM::v_GNAM", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_ABSV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Modifies the given variable, if negative, so that its value is positive (absolute value).\n", "arguments": [{"name": "var", "type": "variable"}], "name": "ABSV", "match": "ABSV", "type": "command", "syntaxstring": "ABSV (command) var (variable)", "uniquename": "c_ABSV", "evalcost": {"default": 1}, "implementation": "caosVM::c_ABSV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ACOS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the arccosine of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "ACOS", "match": "ACOS", "type": "float", "syntaxstring": "ACOS (float) x (float)", "uniquename": "v_ACOS", "evalcost": {"default": 0}, "implementation": "caosVM::v_ACOS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ASIN": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the arcsine of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "ASIN", "match": "ASIN", "type": "float", "syntaxstring": "ASIN (float) x (float)", "uniquename": "v_ASIN", "evalcost": {"default": 0}, "implementation": "caosVM::v_ASIN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ATAN": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the arctangent of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "ATAN", "match": "ATAN", "type": "float", "syntaxstring": "ATAN (float) x (float)", "uniquename": "v_ATAN", "evalcost": {"default": 0}, "implementation": "caosVM::v_ATAN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_COS_": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the cosine of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "COS_", "match": "COS_", "type": "float", "syntaxstring": "COS_ (float) x (float)", "uniquename": "v_COS_", "evalcost": {"default": 0}, "implementation": "caosVM::v_COS_", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_SIN_": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the sine of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "SIN_", "match": "SIN_", "type": "float", "syntaxstring": "SIN_ (float) x (float)", "uniquename": "v_SIN_", "evalcost": {"default": 0}, "implementation": "caosVM::v_SIN_", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_TAN_": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the tangent of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "TAN_", "match": "TAN_", "type": "float", "syntaxstring": "TAN_ (float) x (float)", "uniquename": "v_TAN_", "evalcost": {"default": 0}, "implementation": "caosVM::v_TAN_", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_SQRT": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the square root of v.\n", "arguments": [{"name": "v", "type": "float"}], "name": "SQRT", "match": "SQRT", "type": "float", "syntaxstring": "SQRT (float) v (float)", "uniquename": "v_SQRT", "evalcost": {"default": 0}, "implementation": "caosVM::v_SQRT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v__P1_": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "The first argument given to the current script.\n", "arguments": [], "name": "_P1_", "match": "_P1_", "type": "variable", "syntaxstring": "_P1_ (variable)", "uniquename": "v__P1_", "evalcost": {"default": 0}, "implementation": "caosVM::v_P1", "pragma": {"implementation": "caosVM::v_P1", "saveimpl": "caosVM::s_P1", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_P1", "stackdelta": 1}, "v__P2_": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "The second argument given to the current script.\n", "arguments": [], "name": "_P2_", "match": "_P2_", "type": "variable", "syntaxstring": "_P2_ (variable)", "uniquename": "v__P2_", "evalcost": {"default": 0}, "implementation": "caosVM::v_P2", "pragma": {"implementation": "caosVM::v_P2", "saveimpl": "caosVM::s_P2", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_P2", "stackdelta": 1}, "v_AVAR": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the value of OVxx for the given agent, where xx is equal to 'index'.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "index", "type": "integer"}], "name": "AVAR", "match": "AVAR", "type": "variable", "syntaxstring": "AVAR (variable) agent (agent) index (integer)", "uniquename": "v_AVAR", "evalcost": {"default": 0}, "implementation": "caosVM::v_AVAR", "status": "maybe", "saveimpl": "caosVM::s_AVAR", "stackdelta": -1}, "v_VTOS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns a string representation of the given value.\n", "arguments": [{"name": "value", "type": "decimal"}], "name": "VTOS", "match": "VTOS", "type": "string", "syntaxstring": "VTOS (string) value (decimal)", "uniquename": "v_VTOS", "evalcost": {"default": 0}, "implementation": "caosVM::v_VTOS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_CHAR": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the character at position 'index' of the given string.\nIndexes start at 1.\n", "arguments": [{"name": "str", "type": "string"}, {"name": "index", "type": "integer"}], "name": "CHAR", "match": "CHAR", "type": "integer", "syntaxstring": "CHAR (integer) str (string) index (integer)", "uniquename": "v_CHAR", "evalcost": {"default": 0}, "implementation": "caosVM::v_CHAR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_CHAR": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Sets the character at position 'index' of the given string.\nIndexes start at 1.\n", "arguments": [{"name": "string", "type": "variable"}, {"name": "index", "type": "integer"}, {"name": "character", "type": "integer"}], "name": "CHAR", "match": "CHAR", "type": "command", "syntaxstring": "CHAR (command) string (variable) index (integer) character (integer)", "uniquename": "c_CHAR", "evalcost": {"default": 1}, "implementation": "caosVM::c_CHAR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_ITOF": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Converts the given integer to a float.\n", "arguments": [{"name": "number", "type": "integer"}], "name": "ITOF", "match": "ITOF", "type": "float", "syntaxstring": "ITOF (float) number (integer)", "uniquename": "v_ITOF", "evalcost": {"default": 0}, "implementation": "caosVM::v_ITOF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_FTOI": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Converts the given float to an integer, by rounding.\n", "arguments": [{"name": "number", "type": "float"}], "name": "FTOI", "match": "FTOI", "type": "integer", "syntaxstring": "FTOI (integer) number (float)", "uniquename": "v_FTOI", "evalcost": {"default": 0}, "implementation": "caosVM::v_FTOI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_STRL": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the length in characters of the given string.\n", "arguments": [{"name": "string", "type": "string"}], "name": "STRL", "match": "STRL", "type": "integer", "syntaxstring": "STRL (integer) string (string)", "uniquename": "v_STRL", "evalcost": {"default": 0}, "implementation": "caosVM::v_STRL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_READ": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the value of the string at 'offset' inside the given catalogue tag.\nOffsets start at zero. Throws an error if tag doesn't exist.\n", "arguments": [{"name": "tag", "type": "string"}, {"name": "offset", "type": "integer"}], "name": "READ", "match": "READ", "type": "string", "syntaxstring": "READ (string) tag (string) offset (integer)", "uniquename": "v_READ", "evalcost": {"default": 0}, "implementation": "caosVM::v_READ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_REAQ": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns 1 if the specified catalogue tag exists, or 0 otherwise.\n", "arguments": [{"name": "tag", "type": "string"}], "name": "REAQ", "match": "REAQ", "type": "integer", "syntaxstring": "REAQ (integer) tag (string)", "uniquename": "v_REAQ", "evalcost": {"default": 0}, "implementation": "caosVM::v_REAQ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_CATA": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the agent category of the TARG agent.\n", "arguments": [], "name": "CATA", "match": "CATA", "type": "integer", "syntaxstring": "CATA (integer)", "uniquename": "v_CATA", "evalcost": {"default": 0}, "implementation": "caosVM::v_CATA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CATI": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the agent category for the given family/genus/species.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "CATI", "match": "CATI", "type": "integer", "syntaxstring": "CATI (integer) family (integer) genus (integer) species (integer)", "uniquename": "v_CATI", "evalcost": {"default": 0}, "implementation": "caosVM::v_CATI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_CATX": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns a string containing the name of the given category.\n", "arguments": [{"name": "category_id", "type": "integer"}], "name": "CATX", "match": "CATX", "type": "string", "syntaxstring": "CATX (string) category_id (integer)", "uniquename": "v_CATX", "evalcost": {"default": 0}, "implementation": "caosVM::v_CATX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_CATO": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Sets the agent category of the TARG agent. If the specified category is -1, sets the category based on the family/genus/species of the agent (see CATI).\n", "arguments": [{"name": "category_id", "type": "integer"}], "name": "CATO", "match": "CATO", "type": "command", "syntaxstring": "CATO (command) category_id (integer)", "uniquename": "c_CATO", "evalcost": {"default": 1}, "implementation": "caosVM::c_CATO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_WILD": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Searches for a catalogue tag starting with 'tag' and matching the given\nfamily/genus/species.  For instance, 'Agent Help 2 3 4' where family is 2,\ngenus is 3 and species is 4.  If it doesn't find it, it sets the minor value\nto 0 repeatedly until it either finds one, or discovers 'tag 0 0 0' doesn't\nexist, at which point an error is thrown.  If it does find a suitable one, it\nreturns the string at offset inside the tag. See READ.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "tag", "type": "string"}, {"name": "offset", "type": "integer"}], "name": "WILD", "match": "WILD", "type": "string", "syntaxstring": "WILD (string) family (integer) genus (integer) species (integer) tag (string) offset (integer)", "uniquename": "v_WILD", "evalcost": {"default": 0}, "implementation": "caosVM::v_WILD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_NAME": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Named, agent-local variables (like OVxx) in the TARG agent.\n", "arguments": [{"name": "name", "type": "anything"}], "name": "NAME", "match": "NAME", "type": "variable", "syntaxstring": "NAME (variable) name (anything)", "uniquename": "v_NAME", "evalcost": {"default": 0}, "implementation": "caosVM::v_NAME", "status": "maybe", "saveimpl": "caosVM::s_NAME", "stackdelta": 0}, "v_MAME": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Like NAME variables, except for OWNR rather than TARG.\n", "arguments": [{"name": "name", "type": "anything"}], "name": "MAME", "match": "MAME", "type": "variable", "syntaxstring": "MAME (variable) name (anything)", "uniquename": "v_MAME", "evalcost": {"default": 0}, "implementation": "caosVM::v_MAME", "status": "maybe", "saveimpl": "caosVM::s_MAME", "stackdelta": 0}, "v_SUBS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the text in a string starting at 'start' into the string (starting at 1), and with 'count' characters.\n", "arguments": [{"name": "value", "type": "string"}, {"name": "start", "type": "integer"}, {"name": "count", "type": "integer"}], "name": "SUBS", "match": "SUBS", "type": "string", "syntaxstring": "SUBS (string) value (string) start (integer) count (integer)", "uniquename": "v_SUBS", "evalcost": {"default": 0}, "implementation": "caosVM::v_SUBS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_STOI": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the provided string as an integer, or 0 if it can't be converted.\n", "arguments": [{"name": "string", "type": "string"}], "name": "STOI", "match": "STOI", "type": "integer", "syntaxstring": "STOI (integer) string (string)", "uniquename": "v_STOI", "evalcost": {"default": 0}, "implementation": "caosVM::v_STOI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_STOF": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the provided string as a float, or 0 if it can't be converted.\n", "arguments": [{"name": "string", "type": "string"}], "name": "STOF", "match": "STOF", "type": "float", "syntaxstring": "STOF (float) string (string)", "uniquename": "v_STOF", "evalcost": {"default": 0}, "implementation": "caosVM::v_STOF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_LOWA": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Return a lower-cased version of a string.\n", "arguments": [{"name": "string", "type": "string"}], "name": "LOWA", "match": "LOWA", "type": "string", "syntaxstring": "LOWA (string) string (string)", "uniquename": "v_LOWA", "evalcost": {"default": 0}, "implementation": "caosVM::v_LOWA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_UPPA": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Return an upper-cased version of a string.\n", "arguments": [{"name": "string", "type": "string"}], "name": "UPPA", "match": "UPPA", "type": "string", "syntaxstring": "UPPA (string) string (string)", "uniquename": "v_UPPA", "evalcost": {"default": 0}, "implementation": "caosVM::v_UPPA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_SINS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Searches for an occurance of 'searchstring' inside 'string', starting at the given index inside 'string' (first character is 1).\nThe index of the 'searchstring' inside the string is returned, or -1 if the searchstring wasn't found.\n", "arguments": [{"name": "string", "type": "string"}, {"name": "index", "type": "integer"}, {"name": "searchstring", "type": "string"}], "name": "SINS", "match": "SINS", "type": "integer", "syntaxstring": "SINS (integer) string (string) index (integer) searchstring (string)", "uniquename": "v_SINS", "evalcost": {"default": 0}, "implementation": "caosVM::v_SINS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_REAN": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Return number of strings associated with the catalogue tag specified.\n", "arguments": [{"name": "tag", "type": "string"}], "name": "REAN", "match": "REAN", "type": "integer", "syntaxstring": "REAN (integer) tag (string)", "uniquename": "v_REAN", "evalcost": {"default": 0}, "implementation": "caosVM::v_REAN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DELN": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Delete the specified NAME variable on the target agent.\n", "arguments": [{"name": "name", "type": "anything"}], "name": "DELN", "match": "DELN", "type": "command", "syntaxstring": "DELN (command) name (anything)", "uniquename": "c_DELN", "evalcost": {"default": 1}, "implementation": "caosVM::c_DELN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_GAMN": {"filename": "caosVM_variables.cpp", "category": "variables", "arguments": [{"name": "previous", "type": "string"}], "name": "GAMN", "match": "GAMN", "type": "string", "syntaxstring": "GAMN (string) previous (string)", "uniquename": "v_GAMN", "evalcost": {"default": 0}, "implementation": "caosVM::v_GAMN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NAMN": {"filename": "caosVM_variables.cpp", "category": "variables", "arguments": [{"name": "previous", "type": "variable"}], "name": "NAMN", "match": "NAMN", "type": "command", "syntaxstring": "NAMN (command) previous (variable)", "uniquename": "c_NAMN", "evalcost": {"default": 1}, "implementation": "caosVM::c_NAMN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_POWV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Raises value to the exponent power, and saves the result back in value.\nResults are undefined if value is negative.\n\nOpenc2e-only command\n", "arguments": [{"name": "value", "type": "variable"}, {"name": "exponent", "type": "decimal"}], "name": "POWV", "match": "POWV", "type": "command", "syntaxstring": "POWV (command) value (variable) exponent (decimal)", "uniquename": "c_POWV", "evalcost": {"default": 1}, "implementation": "caosVM::c_POWV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_VEC_MAKE": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Creates and returns a vector with the given components.\n\nOpenc2e-only command\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "VEC: MAKE", "match": "MAKE", "type": "vector", "syntaxstring": "VEC: MAKE (vector) x (float) y (float)", "uniquename": "v_VEC_MAKE", "namespace": "vec:", "evalcost": {"default": 0}, "implementation": "caosVM::v_VEC_MAKE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_VEC_GETC": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Extracts the components of vector vec and places them in x and y.\n\nOpenc2e-only command\n", "arguments": [{"name": "vec", "type": "vector"}, {"name": "x", "type": "variable"}, {"name": "y", "type": "variable"}], "name": "VEC: GETC", "match": "GETC", "type": "command", "syntaxstring": "VEC: GETC (command) vec (vector) x (variable) y (variable)", "uniquename": "c_VEC_GETC", "namespace": "vec:", "evalcost": {"default": 1}, "implementation": "caosVM::c_VEC_GETC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_VEC_ANGL": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Find and return the angle from the X-axis of the given vector.\nThis is computed using atan(y/x) if X is nonzero, and a hard-coded\nreturn if X is nonzero. If the input vector is the null vector (0,0),\nzero will be returned.\n\nThe returned angle is in degrees, and in the range -180 to 180 degrees.\n\nOpenc2e-only command.\n", "arguments": [{"name": "vec", "type": "vector"}], "name": "VEC: ANGL", "match": "ANGL", "type": "float", "syntaxstring": "VEC: ANGL (float) vec (vector)", "uniquename": "v_VEC_ANGL", "namespace": "vec:", "evalcost": {"default": 0}, "implementation": "caosVM::v_VEC_ANGL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_VEC_SUBV": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Subtracts vec2 from vec1 and stores the result in vec1.\n\nOpenc2e-only command.\n", "arguments": [{"name": "vec1", "type": "variable"}, {"name": "vec2", "type": "vector"}], "name": "VEC: SUBV", "match": "SUBV", "type": "command", "syntaxstring": "VEC: SUBV (command) vec1 (variable) vec2 (vector)", "uniquename": "c_VEC_SUBV", "namespace": "vec:", "evalcost": {"default": 1}, "implementation": "caosVM::c_VEC_SUBV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_VEC_ADDV": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Adds vec1 to vec2 and stores the result in vec1.\n\nOpenc2e-only command.\n", "arguments": [{"name": "vec1", "type": "variable"}, {"name": "vec2", "type": "vector"}], "name": "VEC: ADDV", "match": "ADDV", "type": "command", "syntaxstring": "VEC: ADDV (command) vec1 (variable) vec2 (vector)", "uniquename": "c_VEC_ADDV", "namespace": "vec:", "evalcost": {"default": 1}, "implementation": "caosVM::c_VEC_ADDV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_VEC_MULV": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Multiplies the magnitude of the vector vec by mag, and stores the result\nin vec.\n\nOpenc2e-only command\n", "arguments": [{"name": "vec", "type": "variable"}, {"name": "mag", "type": "decimal"}], "name": "VEC: MULV", "match": "MULV", "type": "command", "syntaxstring": "VEC: MULV (command) vec (variable) mag (decimal)", "uniquename": "c_VEC_MULV", "namespace": "vec:", "evalcost": {"default": 1}, "implementation": "caosVM::c_VEC_MULV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_VEC_UNIT": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Constructs and returns a unit vector with angle angle.\n\nOpenc2e-only command,\n", "arguments": [{"name": "angle", "type": "decimal"}], "name": "VEC: UNIT", "match": "UNIT", "type": "vector", "syntaxstring": "VEC: UNIT (vector) angle (decimal)", "uniquename": "v_VEC_UNIT", "namespace": "vec:", "evalcost": {"default": 0}, "implementation": "caosVM::v_VEC_UNIT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_VEC_NULL": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Returns the nullary (0,0) vector.\n\nOpenc2e-only command\n", "arguments": [], "name": "VEC: NULL", "match": "NULL", "type": "vector", "syntaxstring": "VEC: NULL (vector)", "uniquename": "v_VEC_NULL", "namespace": "vec:", "evalcost": {"default": 0}, "implementation": "caosVM::v_VEC_NULL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_VEC_MAGN": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Returns the magnitude of the passed vector.\n\nOpenc2e-only command.\n", "arguments": [{"name": "vec", "type": "vector"}], "name": "VEC: MAGN", "match": "MAGN", "type": "float", "syntaxstring": "VEC: MAGN (float) vec (vector)", "uniquename": "v_VEC_MAGN", "namespace": "vec:", "evalcost": {"default": 0}, "implementation": "caosVM::v_VEC_MAGN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_VEC_SETV": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Sets the variable passed in dest to the vector in src\n\nOpenc2e-only command\n", "arguments": [{"name": "dest", "type": "variable"}, {"name": "src", "type": "vector"}], "name": "VEC: SETV", "match": "SETV", "type": "command", "syntaxstring": "VEC: SETV (command) dest (variable) src (vector)", "uniquename": "c_VEC_SETV", "namespace": "vec:", "evalcost": {"default": 1}, "implementation": "caosVM::c_VEC_SETV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_CABN": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [{"name": "left", "type": "integer"}, {"name": "top", "type": "integer"}, {"name": "right", "type": "integer"}, {"name": "bottom", "type": "integer"}], "name": "CABN", "match": "CABN", "type": "command", "syntaxstring": "CABN (command) left (integer) top (integer) right (integer) bottom (integer)", "uniquename": "c_CABN", "evalcost": {"default": 1}, "implementation": "caosVM::c_CABN", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_CABW": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [{"name": "cap", "type": "integer"}], "name": "CABW", "match": "CABW", "type": "command", "syntaxstring": "CABW (command) cap (integer)", "uniquename": "c_CABW", "evalcost": {"default": 1}, "implementation": "caosVM::c_CABW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SPAS": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "description": "make specified vehicle agent pick up specified passenger\n", "arguments": [{"name": "vehicle", "type": "agent"}, {"name": "passenger", "type": "agent"}], "name": "SPAS", "match": "SPAS", "type": "command", "syntaxstring": "SPAS (command) vehicle (agent) passenger (agent)", "uniquename": "c_SPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_SPAS", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_GPAS": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "description": "pick up all nearby agents matching classifier, as passengers to target vehicle\noptions = 0 to pick up based on agent bounding rect, or 1 to pick up based on cabin rect\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "options", "type": "integer"}], "name": "GPAS", "match": "GPAS", "type": "command", "syntaxstring": "GPAS (command) family (integer) genus (integer) species (integer) options (integer)", "uniquename": "c_GPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_GPAS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_DPAS": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "description": "drop all agents matching classifier from target vehicle\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "DPAS", "match": "DPAS", "type": "command", "syntaxstring": "DPAS (command) family (integer) genus (integer) species (integer)", "uniquename": "c_DPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_DPAS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_CABP": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [{"name": "plane", "type": "integer"}], "name": "CABP", "match": "CABP", "type": "command", "syntaxstring": "CABP (command) plane (integer)", "uniquename": "c_CABP", "evalcost": {"default": 1}, "implementation": "caosVM::c_CABP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_CABV": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [{"name": "room_id", "type": "integer"}], "name": "CABV", "match": "CABV", "type": "command", "syntaxstring": "CABV (command) room_id (integer)", "uniquename": "c_CABV", "evalcost": {"default": 1}, "implementation": "caosVM::c_CABV", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_CABV": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [], "name": "CABV", "match": "CABV", "type": "integer", "syntaxstring": "CABV (integer)", "uniquename": "v_CABV", "evalcost": {"default": 0}, "implementation": "caosVM::v_CABV", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_RPAS": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [{"name": "vehicle", "type": "agent"}, {"name": "passenger", "type": "agent"}], "name": "RPAS", "match": "RPAS", "type": "command", "syntaxstring": "RPAS (command) vehicle (agent) passenger (agent)", "uniquename": "c_RPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_RPAS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_LOAD": {"filename": "caosVM_world.cpp", "category": "world", "arguments": [{"name": "worldname", "type": "string"}], "name": "LOAD", "match": "LOAD", "type": "command", "syntaxstring": "LOAD (command) worldname (string)", "uniquename": "c_LOAD", "evalcost": {"default": 1}, "implementation": "caosVM::c_LOAD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SAVE": {"filename": "caosVM_world.cpp", "category": "world", "description": "Save the world at the start of the next tick. Beware; if you don't put this\nin an INST, it might save directly after your SAVE call (meaning upon loading,\nthe script will execute the next instruction, often QUIT or LOAD, which is\nbad).\n", "arguments": [], "name": "SAVE", "match": "SAVE", "type": "command", "syntaxstring": "SAVE (command)", "uniquename": "c_SAVE", "evalcost": {"default": 1}, "implementation": "caosVM::c_SAVE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_QUIT": {"filename": "caosVM_world.cpp", "category": "world", "description": "Quit the game engine at the start of the nexttick\n", "arguments": [], "name": "QUIT", "match": "QUIT", "type": "command", "syntaxstring": "QUIT (command)", "uniquename": "c_QUIT", "evalcost": {"default": 1}, "implementation": "caosVM::c_QUIT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_WNAM": {"filename": "caosVM_world.cpp", "category": "world", "description": "Returns the name of the current world.\n", "arguments": [], "name": "WNAM", "match": "WNAM", "type": "string", "syntaxstring": "WNAM (string)", "uniquename": "v_WNAM", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNAM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WUID": {"filename": "caosVM_world.cpp", "category": "world", "description": "Returns the unique identifier (moniker?) of the current world.\n", "arguments": [], "name": "WUID", "match": "WUID", "type": "string", "syntaxstring": "WUID (string)", "uniquename": "v_WUID", "evalcost": {"default": 0}, "implementation": "caosVM::v_WUID", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_WTNT": {"filename": "caosVM_world.cpp", "category": "world", "description": "Sets an index in the mysterious global tint table to have the specified values. No, we have no idea what that means either.\n", "arguments": [{"name": "index", "type": "integer"}, {"name": "red", "type": "integer"}, {"name": "green", "type": "integer"}, {"name": "blue", "type": "integer"}, {"name": "rotation", "type": "integer"}, {"name": "swap", "type": "integer"}], "name": "WTNT", "match": "WTNT", "type": "command", "syntaxstring": "WTNT (command) index (integer) red (integer) green (integer) blue (integer) rotation (integer) swap (integer)", "uniquename": "c_WTNT", "evalcost": {"default": 1}, "implementation": "caosVM::c_WTNT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "v_NWLD": {"filename": "caosVM_world.cpp", "category": "world", "arguments": [], "name": "NWLD", "match": "NWLD", "type": "integer", "syntaxstring": "NWLD (integer)", "uniquename": "v_NWLD", "evalcost": {"default": 0}, "implementation": "caosVM::v_NWLD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_WRLD": {"filename": "caosVM_world.cpp", "category": "world", "description": "Create a new world directory to prepare for the creation of the specified world.\n", "arguments": [{"name": "name", "type": "string"}], "name": "WRLD", "match": "WRLD", "type": "command", "syntaxstring": "WRLD (command) name (string)", "uniquename": "c_WRLD", "evalcost": {"default": 1}, "implementation": "caosVM::c_WRLD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_WRLD": {"filename": "caosVM_world.cpp", "category": "world", "description": "Return the name of the specified world (zero-indexed, see NWLD).\n", "arguments": [{"name": "world", "type": "integer"}], "name": "WRLD", "match": "WRLD", "type": "string", "syntaxstring": "WRLD (string) world (integer)", "uniquename": "v_WRLD", "evalcost": {"default": 0}, "implementation": "caosVM::v_WRLD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PSWD": {"filename": "caosVM_world.cpp", "category": "world", "arguments": [{"name": "password", "type": "string"}], "name": "PSWD", "match": "PSWD", "type": "command", "syntaxstring": "PSWD (command) password (string)", "uniquename": "c_PSWD", "evalcost": {"default": 1}, "implementation": "caosVM::c_PSWD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PSWD": {"filename": "caosVM_world.cpp", "category": "world", "description": "Return the password for the specified world (zero-indexed, see NWLD), or an empty string for no password.\n", "arguments": [{"name": "world", "type": "integer"}], "name": "PSWD", "match": "PSWD", "type": "string", "syntaxstring": "PSWD (string) world (integer)", "uniquename": "v_PSWD", "evalcost": {"default": 0}, "implementation": "caosVM::v_PSWD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_WNTI": {"filename": "caosVM_world.cpp", "category": "world", "description": "Return the world identifier for the specified world name, or -1 if it doesn't exist.\n", "arguments": [{"name": "name", "type": "string"}], "name": "WNTI", "match": "WNTI", "type": "integer", "syntaxstring": "WNTI (integer) name (string)", "uniquename": "v_WNTI", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNTI", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DELW": {"filename": "caosVM_world.cpp", "category": "world", "description": "Delete the specified world directory and all contents.\n", "arguments": [{"name": "name", "type": "string"}], "name": "DELW", "match": "DELW", "type": "command", "syntaxstring": "DELW (command) name (string)", "uniquename": "c_DELW", "evalcost": {"default": 1}, "implementation": "caosVM::c_DELW", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}}, "cv": {"v_TOUC": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Determines whether the two given agents are touching.  Returns 0 (if not) or 1 (if so).\n", "arguments": [{"name": "first", "type": "agent"}, {"name": "second", "type": "agent"}], "name": "TOUC", "match": "TOUC", "type": "integer", "syntaxstring": "TOUC (integer) first (agent) second (agent)", "uniquename": "v_TOUC", "evalcost": {"default": 0, "c1": 0, "c2": 0}, "implementation": "caosVM::v_TOUC", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_RTAR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets TARG to a random agent with the given family/genus/species.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "RTAR", "match": "RTAR", "type": "command", "syntaxstring": "RTAR (command) family (integer) genus (integer) species (integer)", "uniquename": "c_RTAR", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_RTAR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_TTAR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Locates a random agent that is touching OWNR (see ETCH) and that\nmatches the given classifier, and sets it to TARG.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "TTAR", "match": "TTAR", "type": "command", "syntaxstring": "TTAR (command) family (integer) genus (integer) species (integer)", "uniquename": "c_TTAR", "evalcost": {"default": 1}, "implementation": "caosVM::c_TTAR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_STAR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Locates a random agent that is visible to OWNR (see ESEE) and that\nmatches the given classifier, then sets it to TARG.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "STAR", "match": "STAR", "type": "command", "syntaxstring": "STAR (command) family (integer) genus (integer) species (integer)", "uniquename": "c_STAR", "evalcost": {"default": 1}, "implementation": "caosVM::c_STAR", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_NEW_SIMP": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Creates a new simple agent with given family/genus/species, given spritefile with image_count sprites\navailable starting at first_image in the spritefile, at the screen depth given by plane.\nTARG is set to the newly-created agent.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "sprite_file", "type": "string"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "plane", "type": "integer"}], "name": "NEW: SIMP", "match": "SIMP", "type": "command", "syntaxstring": "NEW: SIMP (command) family (integer) genus (integer) species (integer) sprite_file (string) image_count (integer) first_image (integer) plane (integer)", "uniquename": "c_NEW_SIMP", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_SIMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "c_NEW_COMP": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Creates a new composite agent with given family/genus/species, given spritefile with image_count sprites\navailable starting at first_image in the spritefile, with the first part at the screen depth given by plane.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "sprite_file", "type": "string"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "plane", "type": "integer"}], "name": "NEW: COMP", "match": "COMP", "type": "command", "syntaxstring": "NEW: COMP (command) family (integer) genus (integer) species (integer) sprite_file (string) image_count (integer) first_image (integer) plane (integer)", "uniquename": "c_NEW_COMP", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_COMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "c_NEW_VHCL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Creates a new vehicle agent with given family/genus/species, given spritefile with image_count sprites\navailable starting at first_image in the spritefile, with the first part at the screen depth given by plane.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "sprite_file", "type": "string"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "plane", "type": "integer"}], "name": "NEW: VHCL", "match": "VHCL", "type": "command", "syntaxstring": "NEW: VHCL (command) family (integer) genus (integer) species (integer) sprite_file (string) image_count (integer) first_image (integer) plane (integer)", "uniquename": "c_NEW_VHCL", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_VHCL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "v_TARG": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns TARG, the currently-targeted agent.\n", "arguments": [], "name": "TARG", "match": "TARG", "type": "agent", "syntaxstring": "TARG (agent)", "uniquename": "v_TARG", "evalcost": {"default": 0}, "implementation": "caosVM::v_TARG", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_OWNR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns OWNR, the agent that is running the script.\n", "arguments": [], "name": "OWNR", "match": "OWNR", "type": "agent", "syntaxstring": "OWNR (agent)", "uniquename": "v_OWNR", "evalcost": {"default": 0, "c1": 0, "c2": 0}, "implementation": "caosVM::v_OWNR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NULL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns a null (zero) agent.\n", "arguments": [], "name": "NULL", "match": "NULL", "type": "agent", "syntaxstring": "NULL (agent)", "uniquename": "v_NULL", "evalcost": {"default": 0}, "implementation": "caosVM::v_NULL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_POSE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the displayed sprite of TARG to the frame in the sprite file with the given integer.\n", "arguments": [{"name": "pose", "type": "integer"}], "name": "POSE", "match": "POSE", "type": "command", "syntaxstring": "POSE (command) pose (integer)", "uniquename": "c_POSE", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_POSE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ATTR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets attributes of the TARG agent.\n", "arguments": [{"name": "attr", "type": "integer"}], "name": "ATTR", "match": "ATTR", "type": "command", "syntaxstring": "ATTR (command) attr (integer)", "uniquename": "c_ATTR", "evalcost": {"default": 1}, "implementation": "caosVM::c_ATTR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ATTR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Attributes of the TARG agent.\n", "arguments": [], "name": "ATTR", "match": "ATTR", "type": "variable", "syntaxstring": "ATTR (variable)", "uniquename": "v_ATTR", "evalcost": {"default": 0}, "implementation": "caosVM::v_ATTR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_ATTR", "stackdelta": 1}, "c_TICK": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Initiates the agent timer-- the Timer script will then be run once every tickrate ticks.\nSetting tickrate to zero will stop the timer.\n", "arguments": [{"name": "tickrate", "type": "integer"}], "name": "TICK", "match": "TICK", "type": "command", "syntaxstring": "TICK (command) tickrate (integer)", "uniquename": "c_TICK", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_TICK", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_BHVR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the behaviour of the TARG agent.\n", "arguments": [{"name": "bhvr", "type": "integer"}], "name": "BHVR", "match": "BHVR", "type": "command", "syntaxstring": "BHVR (command) bhvr (integer)", "uniquename": "c_BHVR", "evalcost": {"default": 1}, "implementation": "caosVM::c_BHVR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TARG": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets TARG (the target agent) to the given agent.\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "TARG", "match": "TARG", "type": "command", "syntaxstring": "TARG (command) agent (agent)", "uniquename": "c_TARG", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_TARG", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FROM": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the agent that sent the message being processed, or NULL if no agent was involved.\n", "arguments": [], "name": "FROM", "match": "FROM", "type": "agent", "syntaxstring": "FROM (agent)", "uniquename": "v_FROM", "evalcost": {"default": 0}, "implementation": "caosVM::v_FROM", "pragma": {"variants": "c1 c2 cv sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the number of the frame in the TARG part/agent's sprite file that is currently being displayed, or -1 if part# doesn't exist on a compound agent.\n", "arguments": [], "name": "POSE", "match": "POSE", "type": "integer", "syntaxstring": "POSE (integer)", "uniquename": "v_POSE", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_KILL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Destroys the agent in question. However, you cannot destroy PNTR.\nRemember, use DEAD first for Creatures!\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "KILL", "match": "KILL", "type": "command", "syntaxstring": "KILL (command) agent (agent)", "uniquename": "c_KILL", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_KILL", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ANIM": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the animation string for TARG, in the format '1 2 3 4'.\nIf it ends with '255', loops back to beginning; if it ends with '255 X', loops back to frame X.\n\n<i>todo: compound agent stuff</i>\n", "arguments": [{"name": "poselist", "type": "bytestring"}], "name": "ANIM", "match": "ANIM", "type": "command", "syntaxstring": "ANIM (command) poselist (bytestring)", "uniquename": "c_ANIM", "evalcost": {"default": 1}, "implementation": "caosVM::c_ANIM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ANMS": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Exactly like ANIM, only using a string and not a bytestring for poselist source.\n", "arguments": [{"name": "poselist", "type": "string"}], "name": "ANMS", "match": "ANMS", "type": "command", "syntaxstring": "ANMS (command) poselist (string)", "uniquename": "c_ANMS", "evalcost": {"default": 1}, "implementation": "caosVM::c_ANMS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ABBA": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the first_image (ie, absolute base) value for the current agent/part, or -1 if part# doesn't exist on a compound agent.\n", "arguments": [], "name": "ABBA", "match": "ABBA", "type": "integer", "syntaxstring": "ABBA (integer)", "uniquename": "v_ABBA", "evalcost": {"default": 0}, "implementation": "caosVM::v_ABBA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_BASE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the frame in the TARG agent's spritefile that will be used as its base image.\nThis is relative to the first image set with one of the NEW: commands.\n", "arguments": [{"name": "index", "type": "integer"}], "name": "BASE", "match": "BASE", "type": "command", "syntaxstring": "BASE (command) index (integer)", "uniquename": "c_BASE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_BASE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_BASE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the frame in the TARG agent/part's spritefile being used as the BASE image, or -1 if part# doesn't exist on a compound agent.\n", "arguments": [], "name": "BASE", "match": "BASE", "type": "integer", "syntaxstring": "BASE (integer)", "uniquename": "v_BASE", "evalcost": {"default": 0}, "implementation": "caosVM::v_BASE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_BHVR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the behaviour of the TARG agent.\n", "arguments": [], "name": "BHVR", "match": "BHVR", "type": "integer", "syntaxstring": "BHVR (integer)", "uniquename": "v_BHVR", "evalcost": {"default": 0}, "implementation": "caosVM::v_BHVR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CARR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the agent that is carrying the TARG agent.  If TARG is not being carried, returns\nNULL.\n", "arguments": [], "name": "CARR", "match": "CARR", "type": "agent", "syntaxstring": "CARR (agent)", "uniquename": "v_CARR", "evalcost": {"default": 0}, "implementation": "caosVM::v_CARR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_FMLY": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the family of the TARG agent.\n", "arguments": [], "name": "FMLY", "match": "FMLY", "type": "integer", "syntaxstring": "FMLY (integer)", "uniquename": "v_FMLY", "evalcost": {"default": 0}, "implementation": "caosVM::v_FMLY", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_GNUS": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the genus of the TARG agent.\n", "arguments": [], "name": "GNUS", "match": "GNUS", "type": "integer", "syntaxstring": "GNUS (integer)", "uniquename": "v_GNUS", "evalcost": {"default": 0}, "implementation": "caosVM::v_GNUS", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_SPCS": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the species of the TARG agent.\n", "arguments": [], "name": "SPCS", "match": "SPCS", "type": "integer", "syntaxstring": "SPCS (integer)", "uniquename": "v_SPCS", "evalcost": {"default": 0}, "implementation": "caosVM::v_SPCS", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_PLNE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the plane (z-order) of the TARG agent.\n", "arguments": [], "name": "PLNE", "match": "PLNE", "type": "integer", "syntaxstring": "PLNE (integer)", "uniquename": "v_PLNE", "evalcost": {"default": 0}, "implementation": "caosVM::v_PLNE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_PNTR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the pointer agent (the Hand).\n", "arguments": [], "name": "PNTR", "match": "PNTR", "type": "agent", "syntaxstring": "PNTR (agent)", "uniquename": "v_PNTR", "evalcost": {"default": 0}, "implementation": "caosVM::v_PNTR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MESG_WRIT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sends a message of type message_id to the given agent.  FROM will be set to OWNR unless\nthere is no agent involved in sending the message.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "message_id", "type": "integer"}], "name": "MESG WRIT", "match": "WRIT", "type": "command", "syntaxstring": "MESG WRIT (command) agent (agent) message_id (integer)", "uniquename": "c_MESG_WRIT", "namespace": "mesg", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MESG_WRIT", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_MESG_WRT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sends a message of type message_id to the given agent, much like MESG WRIT, but with the\naddition of parameters.  The message will be sent after waiting the number of ticks set\nin delay (except doesn't, right now.  Delay must be set to zero for now.)\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "message_id", "type": "integer"}, {"name": "param_1", "type": "anything"}, {"name": "param_2", "type": "anything"}, {"name": "delay", "type": "integer"}], "name": "MESG WRT+", "match": "WRT+", "type": "command", "syntaxstring": "MESG WRT+ (command) agent (agent) message_id (integer) param_1 (anything) param_2 (anything) delay (integer)", "uniquename": "c_MESG_WRT", "namespace": "mesg", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MESG_WRT", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "v_TOTL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the total number of in-game agents matching the given family/genus/species.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "TOTL", "match": "TOTL", "type": "integer", "syntaxstring": "TOTL (integer) family (integer) genus (integer) species (integer)", "uniquename": "v_TOTL", "evalcost": {"default": 0}, "implementation": "caosVM::v_TOTL", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_SHOW": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets visibility of the TARG agent to cameras. 0 = invisible, 1 = visible.\n", "arguments": [{"name": "visibility", "type": "integer"}], "name": "SHOW", "match": "SHOW", "type": "command", "syntaxstring": "SHOW (command) visibility (integer)", "uniquename": "c_SHOW", "evalcost": {"default": 1}, "implementation": "caosVM::c_SHOW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_SHOW": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "SHOW", "match": "SHOW", "type": "integer", "syntaxstring": "SHOW (integer)", "uniquename": "v_SHOW", "evalcost": {"default": 0}, "implementation": "caosVM::v_SHOW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSX": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the X position of the TARG agent in the world.\n", "arguments": [], "name": "POSX", "match": "POSX", "type": "float", "syntaxstring": "POSX (float)", "uniquename": "v_POSX", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSX", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSY": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the Y position of the TARG agent in the world.\n", "arguments": [], "name": "POSY", "match": "POSY", "type": "float", "syntaxstring": "POSY (float)", "uniquename": "v_POSY", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSY", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FRAT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the delay between frame changes of the TARG agent or current PART.\nMust be from 1 to 255, 1 being the normal rate, 2 being half as quickly, and so on.\n", "arguments": [{"name": "framerate", "type": "integer"}], "name": "FRAT", "match": "FRAT", "type": "command", "syntaxstring": "FRAT (command) framerate (integer)", "uniquename": "c_FRAT", "evalcost": {"default": 1}, "implementation": "caosVM::c_FRAT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_OVER": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Waits (blocks the TARG agent) until the animation of the TARG agent or PART is over.\n", "arguments": [], "name": "OVER", "match": "OVER", "type": "command", "syntaxstring": "OVER (command)", "uniquename": "c_OVER", "evalcost": {"default": 1}, "implementation": "caosVM::c_OVER", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PUHL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets relative x/y coordinates for TARG's pickup point.\nPose is -1 for all poses, or a pose relative to the first image specified in NEW: (not BASE).\n", "arguments": [{"name": "pose", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "PUHL", "match": "PUHL", "type": "command", "syntaxstring": "PUHL (command) pose (integer) x (integer) y (integer)", "uniquename": "c_PUHL", "evalcost": {"default": 1}, "implementation": "caosVM::c_PUHL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_PUHL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the coordinate for TARG's pickup point. x_or_y should be 1 for x, or 2 for y.\n", "arguments": [{"name": "pose", "type": "integer"}, {"name": "x_or_y", "type": "integer"}], "name": "PUHL", "match": "PUHL", "type": "integer", "syntaxstring": "PUHL (integer) pose (integer) x_or_y (integer)", "uniquename": "v_PUHL", "evalcost": {"default": 0}, "implementation": "caosVM::v_PUHL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_POSL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the left side of TARG's bounding box.\n", "arguments": [], "name": "POSL", "match": "POSL", "type": "float", "syntaxstring": "POSL (float)", "uniquename": "v_POSL", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSL", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POST": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the top side of TARG's bounding box.\n", "arguments": [], "name": "POST", "match": "POST", "type": "float", "syntaxstring": "POST (float)", "uniquename": "v_POST", "evalcost": {"default": 0}, "implementation": "caosVM::v_POST", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the right side of TARG's bounding box.\n", "arguments": [], "name": "POSR", "match": "POSR", "type": "float", "syntaxstring": "POSR (float)", "uniquename": "v_POSR", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSB": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the bottom side of TARG's bounding box.\n", "arguments": [], "name": "POSB", "match": "POSB", "type": "float", "syntaxstring": "POSB (float)", "uniquename": "v_POSB", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSB", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WDTH": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the TARG agent's width.\n", "arguments": [], "name": "WDTH", "match": "WDTH", "type": "integer", "syntaxstring": "WDTH (integer)", "uniquename": "v_WDTH", "evalcost": {"default": 0}, "implementation": "caosVM::v_WDTH", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PLNE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the plane (the z-order) of the TARG agent.  Higher values are closer to the camera.\n", "arguments": [{"name": "depth", "type": "integer"}], "name": "PLNE", "match": "PLNE", "type": "command", "syntaxstring": "PLNE (command) depth (integer)", "uniquename": "c_PLNE", "evalcost": {"default": 1}, "implementation": "caosVM::c_PLNE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TINT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the tinting of the TARG agent to the given red, blue, and green values.\n", "arguments": [{"name": "red_tint", "type": "integer"}, {"name": "green_tint", "type": "integer"}, {"name": "blue_tint", "type": "integer"}, {"name": "rotation", "type": "integer"}, {"name": "swap", "type": "integer"}], "name": "TINT", "match": "TINT", "type": "command", "syntaxstring": "TINT (command) red_tint (integer) green_tint (integer) blue_tint (integer) rotation (integer) swap (integer)", "uniquename": "c_TINT", "evalcost": {"default": 1}, "implementation": "caosVM::c_TINT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_RNGE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the TARG agent's range (i.e., the distance it can see and hear).\n", "arguments": [{"name": "distance", "type": "float"}], "name": "RNGE", "match": "RNGE", "type": "command", "syntaxstring": "RNGE (command) distance (float)", "uniquename": "c_RNGE", "evalcost": {"default": 1}, "implementation": "caosVM::c_RNGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_RNGE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the TARG agent's range.\n", "arguments": [], "name": "RNGE", "match": "RNGE", "type": "integer", "syntaxstring": "RNGE (integer)", "uniquename": "v_RNGE", "evalcost": {"default": 0}, "implementation": "caosVM::v_RNGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_TRAN": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Tests if the pixel at (x,y) on the TARG agent is transparent.\nReturns 0 or 1.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "TRAN", "match": "TRAN", "type": "integer", "syntaxstring": "TRAN (integer) x (integer) y (integer)", "uniquename": "v_TRAN", "evalcost": {"default": 0}, "implementation": "caosVM::v_TRAN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TRAN": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the TARG agent's behaviour with regard to transparency.  If set to 1, invisible\nparts of the agent can't be clicked.  If 0, anywhere on the agent (including transparent\nparts) can be clicked.\n", "arguments": [{"name": "transparency", "type": "integer"}, {"name": "part_no", "type": "integer"}], "name": "TRAN", "match": "TRAN", "type": "command", "syntaxstring": "TRAN (command) transparency (integer) part_no (integer)", "uniquename": "c_TRAN", "evalcost": {"default": 1}, "implementation": "caosVM::c_TRAN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_HGHT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the TARG agent's height.\n", "arguments": [], "name": "HGHT", "match": "HGHT", "type": "integer", "syntaxstring": "HGHT (integer)", "uniquename": "v_HGHT", "evalcost": {"default": 0}, "implementation": "caosVM::v_HGHT", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HAND": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the name of the Hand; default is 'hand'.\n", "arguments": [], "name": "HAND", "match": "HAND", "type": "string", "syntaxstring": "HAND (string)", "uniquename": "v_HAND", "evalcost": {"default": 0}, "implementation": "caosVM::v_HAND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_HAND": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the name of the Hand.\n", "arguments": [{"name": "name", "type": "string"}], "name": "HAND", "match": "HAND", "type": "command", "syntaxstring": "HAND (command) name (string)", "uniquename": "c_HAND", "evalcost": {"default": 1}, "implementation": "caosVM::c_HAND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_TICK": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Return the agent timer tick rate of the TARG agent.\n", "arguments": [], "name": "TICK", "match": "TICK", "type": "integer", "syntaxstring": "TICK (integer)", "uniquename": "v_TICK", "evalcost": {"default": 0}, "implementation": "caosVM::v_TICK", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PUPT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets relative x/y coordinates for the location in the world where the TARG agent picks up\nobjects.  The pose is relative to the first image set in NEW: (not BASE).\n", "arguments": [{"name": "pose", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "PUPT", "match": "PUPT", "type": "command", "syntaxstring": "PUPT (command) pose (integer) x (integer) y (integer)", "uniquename": "c_PUPT", "evalcost": {"default": 1}, "implementation": "caosVM::c_PUPT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_STPT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Stop the script running in TARG, if any.\n", "arguments": [], "name": "STPT", "match": "STPT", "type": "command", "syntaxstring": "STPT (command)", "uniquename": "c_STPT", "evalcost": {"default": 1}, "implementation": "caosVM::c_STPT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DCOR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Turns the display of the TARG agent's physical core on and off. Gives a general idea of\nits size and location (including invisible agents).\n", "arguments": [{"name": "core_on", "type": "integer"}], "name": "DCOR", "match": "DCOR", "type": "command", "syntaxstring": "DCOR (command) core_on (integer)", "uniquename": "c_DCOR", "evalcost": {"default": 1}, "implementation": "caosVM::c_DCOR", "pragma": {"variants": "all"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_MIRA": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Determines whether or not the TARG agent's current sprite is mirrored. Returns 0 or 1.\n", "arguments": [], "name": "MIRA", "match": "MIRA", "type": "integer", "syntaxstring": "MIRA (integer)", "uniquename": "v_MIRA", "evalcost": {"default": 0}, "implementation": "caosVM::v_MIRA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MIRA": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Turns mirroring of the TARG agent's current sprite on or off (0 or 1).\n", "arguments": [{"name": "mirror_on", "type": "integer"}], "name": "MIRA", "match": "MIRA", "type": "command", "syntaxstring": "MIRA (command) mirror_on (integer)", "uniquename": "c_MIRA", "evalcost": {"default": 1}, "implementation": "caosVM::c_MIRA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_DISQ": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Calculates the square of the distance between the centers of the TARG agent and the given\nagent.\n", "arguments": [{"name": "other", "type": "agent"}], "name": "DISQ", "match": "DISQ", "type": "float", "syntaxstring": "DISQ (float) other (agent)", "uniquename": "v_DISQ", "evalcost": {"default": 0}, "implementation": "caosVM::v_DISQ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ALPH": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the degree of alpha blending on the TARG agent, to a value from 0 (solid) to 256\n(invisible). The second parameter will turn alpha blending on and off.\n", "arguments": [{"name": "alpha_value", "type": "integer"}, {"name": "enable", "type": "integer"}], "name": "ALPH", "match": "ALPH", "type": "command", "syntaxstring": "ALPH (command) alpha_value (integer) enable (integer)", "uniquename": "c_ALPH", "evalcost": {"default": 1}, "implementation": "caosVM::c_ALPH", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_HELD": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the agent currently held by the TARG agent, or a random one if there are more than one.\n", "arguments": [], "name": "HELD", "match": "HELD", "type": "agent", "syntaxstring": "HELD (agent)", "uniquename": "v_HELD", "evalcost": {"default": 0}, "implementation": "caosVM::v_HELD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_GALL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Changes the sprite file and first image associated with the TARG agent or current PART.\n", "arguments": [{"name": "spritefile", "type": "string"}, {"name": "first_image", "type": "integer"}], "name": "GALL", "match": "GALL", "type": "command", "syntaxstring": "GALL (command) spritefile (string) first_image (integer)", "uniquename": "c_GALL", "evalcost": {"default": 1}, "implementation": "caosVM::c_GALL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_GALL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the name of the sprite file associated with the TARG agent or current PART, or a blank string if part# is invalid on a compound agent.\n", "arguments": [], "name": "GALL", "match": "GALL", "type": "string", "syntaxstring": "GALL (string)", "uniquename": "v_GALL", "evalcost": {"default": 0}, "implementation": "caosVM::v_GALL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_SEEE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns 1 if the first agent can see the other, or 0 otherwise.\n", "arguments": [{"name": "first", "type": "agent"}, {"name": "second", "type": "agent"}], "name": "SEEE", "match": "SEEE", "type": "integer", "syntaxstring": "SEEE (integer) first (agent) second (agent)", "uniquename": "v_SEEE", "evalcost": {"default": 0}, "implementation": "caosVM::v_SEEE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_TINT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the tint value for TARG agent. Pass 1 for red, 2 for blue, 3 for green, 4 for rotation or 5 for swap.\n", "arguments": [{"name": "attribute", "type": "integer"}], "name": "TINT", "match": "TINT", "type": "integer", "syntaxstring": "TINT (integer) attribute (integer)", "uniquename": "v_TINT", "evalcost": {"default": 0}, "implementation": "caosVM::v_TINT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_TINO": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Works like the TINT command, but only applies the tint to the current frame, and discards the rest.\n", "arguments": [{"name": "red", "type": "integer"}, {"name": "green", "type": "integer"}, {"name": "blue", "type": "integer"}, {"name": "rotation", "type": "integer"}, {"name": "swap", "type": "integer"}], "name": "TINO", "match": "TINO", "type": "command", "syntaxstring": "TINO (command) red (integer) green (integer) blue (integer) rotation (integer) swap (integer)", "uniquename": "c_TINO", "evalcost": {"default": 1}, "implementation": "caosVM::c_TINO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_DROP": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Causes the TARG agent to drop what it is carrying in a safe location.\n", "arguments": [], "name": "DROP", "match": "DROP", "type": "command", "syntaxstring": "DROP (command)", "uniquename": "c_DROP", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_DROP", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_NCLS": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "previous", "type": "agent"}, {"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "NCLS", "match": "NCLS", "type": "agent", "syntaxstring": "NCLS (agent) previous (agent) family (integer) genus (integer) species (integer)", "uniquename": "v_NCLS", "evalcost": {"default": 0}, "implementation": "caosVM::v_NCLS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_PCLS": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "previous", "type": "agent"}, {"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "PCLS", "match": "PCLS", "type": "agent", "syntaxstring": "PCLS (agent) previous (agent) family (integer) genus (integer) species (integer)", "uniquename": "v_PCLS", "evalcost": {"default": 0}, "implementation": "caosVM::v_PCLS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_TCOR": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "topy", "type": "float"}, {"name": "bottomy", "type": "float"}, {"name": "leftx", "type": "float"}, {"name": "rightx", "type": "float"}], "name": "TCOR", "match": "TCOR", "type": "integer", "syntaxstring": "TCOR (integer) topy (float) bottomy (float) leftx (float) rightx (float)", "uniquename": "v_TCOR", "evalcost": {"default": 0}, "implementation": "caosVM::v_TCOR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_CORE": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "topy", "type": "float"}, {"name": "bottomy", "type": "float"}, {"name": "leftx", "type": "float"}, {"name": "rightx", "type": "float"}], "name": "CORE", "match": "CORE", "type": "command", "syntaxstring": "CORE (command) topy (float) bottomy (float) leftx (float) rightx (float)", "uniquename": "c_CORE", "evalcost": {"default": 1}, "implementation": "caosVM::c_CORE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_TWIN": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "source", "type": "agent"}, {"name": "null_vars", "type": "integer"}], "name": "TWIN", "match": "TWIN", "type": "agent", "syntaxstring": "TWIN (agent) source (agent) null_vars (integer)", "uniquename": "v_TWIN", "evalcost": {"default": 0}, "implementation": "caosVM::v_TWIN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SCLE": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "pose", "type": "integer"}, {"name": "scaleby", "type": "integer"}], "name": "SCLE", "match": "SCLE", "type": "command", "syntaxstring": "SCLE (command) pose (integer) scaleby (integer)", "uniquename": "c_SCLE", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCLE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_STRC": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Draw the current agent (or part? don't know) with the given width/height (ie, stretch the sprite). Set enable to 1 to enable, or 0 to disable.\n", "arguments": [{"name": "width", "type": "integer"}, {"name": "height", "type": "integer"}, {"name": "enable", "type": "integer"}], "name": "STRC", "match": "STRC", "type": "command", "syntaxstring": "STRC (command) width (integer) height (integer) enable (integer)", "uniquename": "c_STRC", "evalcost": {"default": 1}, "implementation": "caosVM::c_STRC", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_IMGE": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "filename", "type": "string"}], "name": "IMGE", "match": "IMGE", "type": "command", "syntaxstring": "IMGE (command) filename (string)", "uniquename": "c_IMGE", "evalcost": {"default": 1}, "implementation": "caosVM::c_IMGE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TNTW": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "index", "type": "integer"}], "name": "TNTW", "match": "TNTW", "type": "command", "syntaxstring": "TNTW (command) index (integer)", "uniquename": "c_TNTW", "evalcost": {"default": 1}, "implementation": "caosVM::c_TNTW", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PRNT": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "pose", "type": "integer"}], "name": "PRNT", "match": "PRNT", "type": "command", "syntaxstring": "PRNT (command) pose (integer)", "uniquename": "c_PRNT", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRNT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_VISI": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns 1 if the TARG agent is on camera, or 0 otherwise. If checkall is 0, only checks\nmain camera, otherwise checks all.\n", "arguments": [{"name": "checkall", "type": "integer"}], "name": "VISI", "match": "VISI", "type": "integer", "syntaxstring": "VISI (integer) checkall (integer)", "uniquename": "v_VISI", "evalcost": {"default": 0}, "implementation": "caosVM::v_VISI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ONTV": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns 1 if the specified agent is on camera, or 0 otherwise. If checkall is 0, only checks\nmain camera, otherwise checks all.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "checkall", "type": "integer"}], "name": "ONTV", "match": "ONTV", "type": "integer", "syntaxstring": "ONTV (integer) agent (agent) checkall (integer)", "uniquename": "v_ONTV", "evalcost": {"default": 0}, "implementation": "caosVM::v_ONTV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_META": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Sets the metaroom that the current camera is pointing at.  Coordinates point to top left of new\ncamera position.  Set a coordinate to -1 to use the top-left corner of the metaroom.\n\nTransition: 0 for none, 1 for flip horzizontally, 2 for burst.\n", "arguments": [{"name": "metaroom_id", "type": "integer"}, {"name": "camera_x", "type": "integer"}, {"name": "camera_y", "type": "integer"}, {"name": "transition", "type": "integer"}], "name": "META", "match": "META", "type": "command", "syntaxstring": "META (command) metaroom_id (integer) camera_x (integer) camera_y (integer) transition (integer)", "uniquename": "c_META", "evalcost": {"default": 1}, "implementation": "caosVM::c_META", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_META": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the metaroom the current camera is looking at.\n", "arguments": [], "name": "META", "match": "META", "type": "integer", "syntaxstring": "META (integer)", "uniquename": "v_META", "evalcost": {"default": 0}, "implementation": "caosVM::v_META", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_CMRT": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Focuses the current camera on the TARG agent.\n\nSet pan to 0 for no panning (jump), 1 for smooth scrolling if in the same metaroom, or 2\nfor smooth scrolling if the given location is already visible.\n", "arguments": [{"name": "pan", "type": "integer"}], "name": "CMRT", "match": "CMRT", "type": "command", "syntaxstring": "CMRT (command) pan (integer)", "uniquename": "c_CMRT", "evalcost": {"default": 1}, "implementation": "caosVM::c_CMRT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_CMRA": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Sets the position of the current camera so that the top left corner of the view is at the\ngiven coordinates.\n\nSet pan to 0 for no panning (jump), or 1 for smooth scrolling if in the same metaroom.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "pan", "type": "integer"}], "name": "CMRA", "match": "CMRA", "type": "command", "syntaxstring": "CMRA (command) x (integer) y (integer) pan (integer)", "uniquename": "c_CMRA", "evalcost": {"default": 1}, "implementation": "caosVM::c_CMRA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_CMRP": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Sets the position of the current camera so that the view centers on the given coordinates.\n\nSet pan to 0 for no panning (jump), 1 for smooth scrolling if in the same metaroom, or 2\nfor smooth scrolling if the given location is already visible.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "pan", "type": "integer"}], "name": "CMRP", "match": "CMRP", "type": "command", "syntaxstring": "CMRP (command) x (integer) y (integer) pan (integer)", "uniquename": "c_CMRP", "evalcost": {"default": 1}, "implementation": "caosVM::c_CMRP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_CMRX": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the X position at the center of the current camera's view.\n", "arguments": [], "name": "CMRX", "match": "CMRX", "type": "integer", "syntaxstring": "CMRX (integer)", "uniquename": "v_CMRX", "evalcost": {"default": 0}, "implementation": "caosVM::v_CMRX", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CMRY": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the Y position at the center of the current camera's view.\n", "arguments": [], "name": "CMRY", "match": "CMRY", "type": "integer", "syntaxstring": "CMRY (integer)", "uniquename": "v_CMRY", "evalcost": {"default": 0}, "implementation": "caosVM::v_CMRY", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDW": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the width of the current camera's view.\n", "arguments": [], "name": "WNDW", "match": "WNDW", "type": "integer", "syntaxstring": "WNDW (integer)", "uniquename": "v_WNDW", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDH": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the height of the current camera's view.\n", "arguments": [], "name": "WNDH", "match": "WNDH", "type": "integer", "syntaxstring": "WNDH (integer)", "uniquename": "v_WNDH", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDH", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDB": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the position of the bottom edge of the current camera's view.\n", "arguments": [], "name": "WNDB", "match": "WNDB", "type": "integer", "syntaxstring": "WNDB (integer)", "uniquename": "v_WNDB", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDL": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the position of the left edge of the current camera's view.\n", "arguments": [], "name": "WNDL", "match": "WNDL", "type": "integer", "syntaxstring": "WNDL (integer)", "uniquename": "v_WNDL", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDR": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the position of the right edge of the current camera's view.\n", "arguments": [], "name": "WNDR", "match": "WNDR", "type": "integer", "syntaxstring": "WNDR (integer)", "uniquename": "v_WNDR", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDT": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the position of the top edge of the current camera's view.\n", "arguments": [], "name": "WNDT", "match": "WNDT", "type": "integer", "syntaxstring": "WNDT (integer)", "uniquename": "v_WNDT", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_WDOW": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Toggles full-screen mode on and off.\n", "arguments": [], "name": "WDOW", "match": "WDOW", "type": "command", "syntaxstring": "WDOW (command)", "uniquename": "c_WDOW", "evalcost": {"default": 1}, "implementation": "caosVM::c_WDOW", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_WDOW": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns 1 if in full-screen mode, or 0 otherwise (windowed).\n", "arguments": [], "name": "WDOW", "match": "WDOW", "type": "integer", "syntaxstring": "WDOW (integer)", "uniquename": "v_WDOW", "evalcost": {"default": 0}, "implementation": "caosVM::v_WDOW", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_TRCK": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Tell the current camera to track the specified agent, or set to NULL to stop tracking.\nxpercent and ypercent define a rectangle on the screen which the camera should keep the tracked agent inside.\nStyle 0 is brittle-- tracking is broken easily.  Style 1 is flexible-- moving the camera\nback inside the rectangle resumes tracking.  Style 3 is hard-- you can't move outside the\nrectangle.\nRransition: 0 for none, 1 for flip horizontal, 2 for burst.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "xpercent", "type": "integer"}, {"name": "ypercent", "type": "integer"}, {"name": "style", "type": "integer"}, {"name": "transition", "type": "integer"}], "name": "TRCK", "match": "TRCK", "type": "command", "syntaxstring": "TRCK (command) agent (agent) xpercent (integer) ypercent (integer) style (integer) transition (integer)", "uniquename": "c_TRCK", "evalcost": {"default": 1}, "implementation": "caosVM::c_TRCK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "v_TRCK": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns agent being tracked by the current camera, if any.\n", "arguments": [], "name": "TRCK", "match": "TRCK", "type": "agent", "syntaxstring": "TRCK (agent)", "uniquename": "v_TRCK", "evalcost": {"default": 0}, "implementation": "caosVM::v_TRCK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_LINE": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Draw a line between two endpoints with the given coordinates, in the color specified by\nthe given red, green, and blue values.\n\nSet stipple_on to a number of pixels to alternate for stippling, or set stipple_off to\nturn stippling off.\n\nSetting the the endpoints to the same point will remove all lines for the agent.\n", "arguments": [{"name": "x1", "type": "integer"}, {"name": "y1", "type": "integer"}, {"name": "x2", "type": "integer"}, {"name": "y2", "type": "integer"}, {"name": "r", "type": "integer"}, {"name": "g", "type": "integer"}, {"name": "b", "type": "integer"}, {"name": "stipple_on", "type": "integer"}, {"name": "stipple_off", "type": "integer"}], "name": "LINE", "match": "LINE", "type": "command", "syntaxstring": "LINE (command) x1 (integer) y1 (integer) x2 (integer) y2 (integer) r (integer) g (integer) b (integer) stipple_on (integer) stipple_off (integer)", "uniquename": "c_LINE", "evalcost": {"default": 1}, "implementation": "caosVM::c_LINE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -9}, "v_SNAX": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Determines whether or not the given image file exists in the world\nimages directory (0 or 1).\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SNAX", "match": "SNAX", "type": "integer", "syntaxstring": "SNAX (integer) filename (string)", "uniquename": "v_SNAX", "evalcost": {"default": 0}, "implementation": "caosVM::v_SNAX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SCAM": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Sets which camera to use in camera macro commands.  If 'agent' and\n'part' are NULL, the main camera will be used.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "part", "type": "integer"}], "name": "SCAM", "match": "SCAM", "type": "command", "syntaxstring": "SCAM (command) agent (agent) part (integer)", "uniquename": "c_SCAM", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCAM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_ZOOM": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Zoom the current camera by the given number of pixels on the given x/y\ncoordinates in the world.  If the coordinates are set to -1, the\ncurrent center position of the camera's view will be used.\n", "arguments": [{"name": "pixels", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "ZOOM", "match": "ZOOM", "type": "command", "syntaxstring": "ZOOM (command) pixels (integer) x (integer) y (integer)", "uniquename": "c_ZOOM", "evalcost": {"default": 1}, "implementation": "caosVM::c_ZOOM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_SNAP": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Take a snapshot and save it to the given filename (don't include the extension). x/y are the centerpoint, width/height the size, and zoom the percentage to zoom out.\n", "arguments": [{"name": "filename", "type": "string"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "width", "type": "integer"}, {"name": "height", "type": "integer"}, {"name": "zoom", "type": "integer"}], "name": "SNAP", "match": "SNAP", "type": "command", "syntaxstring": "SNAP (command) filename (string) x (integer) y (integer) width (integer) height (integer) zoom (integer)", "uniquename": "c_SNAP", "evalcost": {"default": 1}, "implementation": "caosVM::c_SNAP", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "v_LOFT": {"filename": "caosVM_camera.cpp", "category": "cameras", "arguments": [{"name": "filename", "type": "string"}], "name": "LOFT", "match": "LOFT", "type": "integer", "syntaxstring": "LOFT (integer) filename (string)", "uniquename": "v_LOFT", "evalcost": {"default": 0}, "implementation": "caosVM::v_LOFT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_BKGD": {"filename": "caosVM_camera.cpp", "category": "cameras", "arguments": [{"name": "metaroom_id", "type": "integer"}, {"name": "background", "type": "string"}, {"name": "transition", "type": "integer"}], "name": "BKGD", "match": "BKGD", "type": "command", "syntaxstring": "BKGD (command) metaroom_id (integer) background (string) transition (integer)", "uniquename": "c_BKGD", "evalcost": {"default": 1}, "implementation": "caosVM::c_BKGD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_BKGD": {"filename": "caosVM_camera.cpp", "category": "cameras", "arguments": [{"name": "metaroom_id", "type": "integer"}], "name": "BKGD", "match": "BKGD", "type": "string", "syntaxstring": "BKGD (string) metaroom_id (integer)", "uniquename": "v_BKGD", "evalcost": {"default": 0}, "implementation": "caosVM::v_BKGD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_FRSH": {"filename": "caosVM_camera.cpp", "category": "cameras", "arguments": [], "name": "FRSH", "match": "FRSH", "type": "command", "syntaxstring": "FRSH (command)", "uniquename": "c_FRSH", "evalcost": {"default": 1}, "implementation": "caosVM::c_FRSH", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PART": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Sets the part number of the TARGeted compound agent or vehicle to work on (ANIM/POSE use this,\namongst other commands).\n", "arguments": [{"name": "part_id", "type": "integer"}], "name": "PART", "match": "PART", "type": "command", "syntaxstring": "PART (command) part_id (integer)", "uniquename": "c_PART", "evalcost": {"default": 1}, "implementation": "caosVM::c_PART", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PART": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Returns 1 if the given part number exists on the target agent, or 0 if otherwise.\n", "arguments": [{"name": "part_id", "type": "integer"}], "name": "PART", "match": "PART", "type": "integer", "syntaxstring": "PART (integer) part_id (integer)", "uniquename": "v_PART", "evalcost": {"default": 0}, "implementation": "caosVM::v_PART", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PAT_DULL": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Adds a new 'dull' part to the TARGed compound agent/vehicle which does nothing but display an image.\nPart ID numbers begin at 1. x/y/plane are relative to the agent you're working on.\n", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}], "name": "PAT: DULL", "match": "DULL", "type": "command", "syntaxstring": "PAT: DULL (command) part (integer) sprite (string) first_image (integer) x (integer) y (integer) plane (integer)", "uniquename": "c_PAT_DULL", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_DULL", "pragma": {"variants": "cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "c_PAT_BUTT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Adds a new 'button' part to the TARGed compound agent/vehicle.\nPart ID numbers begin at 1. x/y/plane are relative to the agent you're working on.\n'hoveranim' is the animation to use when the part is mouse-overed - see ANIM for details.\n'messageid' is the message sent when the button is clicked - _p1_ of the message is set to the part number.\nIf option is 1, mouseclicks/hovers only apply to non-transparent areas. otherwise, option should be 0.\n", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "image_count", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "hoveranim", "type": "byte-string"}, {"name": "messageid", "type": "integer"}, {"name": "option", "type": "integer"}], "name": "PAT: BUTT", "match": "BUTT", "type": "command", "syntaxstring": "PAT: BUTT (command) part (integer) sprite (string) first_image (integer) image_count (integer) x (integer) y (integer) plane (integer) hoveranim (byte-string) messageid (integer) option (integer)", "uniquename": "c_PAT_BUTT", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_BUTT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -10}, "c_PAT_FIXD": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Adds a new 'fixed' text part to the TARGed compound agent/vehicle,\nPart ID numbers begin at 1. x/y/plane are relative to the agent you're working on.\nThe 'first_image' frame of the given sprite file will be used underneath the text, which is set with PTXT.\n", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "fontsprite", "type": "string"}], "name": "PAT: FIXD", "match": "FIXD", "type": "command", "syntaxstring": "PAT: FIXD (command) part (integer) sprite (string) first_image (integer) x (integer) y (integer) plane (integer) fontsprite (string)", "uniquename": "c_PAT_FIXD", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_FIXD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "c_PAT_TEXT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Adds a new text entry part to the TARGed compound agent/vehicle.\nPart ID numbers begin at 1. x/y/plane are relative to the agent you're working on.\nThe 'first_image' frame of the given sprite file will be used underneath the text.  The part will\ngain the focus when FCUS is called or when it is clicked.  A message of the given type will be sent.\n", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "message_id", "type": "integer"}, {"name": "fontsprite", "type": "string"}], "name": "PAT: TEXT", "match": "TEXT", "type": "command", "syntaxstring": "PAT: TEXT (command) part (integer) sprite (string) first_image (integer) x (integer) y (integer) plane (integer) message_id (integer) fontsprite (string)", "uniquename": "c_PAT_TEXT", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_TEXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -8}, "c_PAT_CMRA": {"filename": "caosVM_compound.cpp", "category": "compound agents", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "viewwidth", "type": "integer"}, {"name": "viewheight", "type": "integer"}, {"name": "camerawidth", "type": "integer"}, {"name": "cameraheight", "type": "integer"}], "name": "PAT: CMRA", "match": "CMRA", "type": "command", "syntaxstring": "PAT: CMRA (command) part (integer) sprite (string) first_image (integer) x (integer) y (integer) plane (integer) viewwidth (integer) viewheight (integer) camerawidth (integer) cameraheight(integer)", "uniquename": "c_PAT_CMRA", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_CMRA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -10}, "c_PAT_GRPH": {"filename": "caosVM_compound.cpp", "category": "compound agents", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "numvalues", "type": "integer"}], "name": "PAT: GRPH", "match": "GRPH", "type": "command", "syntaxstring": "PAT: GRPH (command) part (integer) sprite (string) first_image (integer) x (integer) y (integer) plane (integer) numvalues (integer)", "uniquename": "c_PAT_GRPH", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_GRPH", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "c_PAT_KILL": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Kills the specified part of the TARGed compound agent or vehicle.\n", "arguments": [{"name": "part", "type": "integer"}], "name": "PAT: KILL", "match": "KILL", "type": "command", "syntaxstring": "PAT: KILL (command) part (integer)", "uniquename": "c_PAT_KILL", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_KILL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PAT_MOVE": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "move the compound part specified to the new relative position specified\n", "arguments": [{"name": "part", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "PAT: MOVE", "match": "MOVE", "type": "command", "syntaxstring": "PAT: MOVE (command) part (integer) x (integer) y (integer)", "uniquename": "c_PAT_MOVE", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_MOVE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_FCUS": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Focus the current targeted part, which must be a PAT: TEXT.\nIf the target is null, then the current part will be unfocused.\n", "arguments": [], "name": "FCUS", "match": "FCUS", "type": "command", "syntaxstring": "FCUS (command)", "uniquename": "c_FCUS", "evalcost": {"default": 1}, "implementation": "caosVM::c_FCUS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_FRMT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Alters the appearance of the target text part.  The spacing values and margins are to be specified in\npixels.  Justification can be 0 for left, 1 for right, 2 for center, 4 for bottom, 8 for middle or 16\nfor 'last page scroll' (TODO?), and you can add these together (except 0/1 are mutually exclusive, obviously).\n", "arguments": [{"name": "left_margin", "type": "integer"}, {"name": "top_margin", "type": "integer"}, {"name": "right_margin", "type": "integer"}, {"name": "button_margin", "type": "integer"}, {"name": "line_spacing", "type": "integer"}, {"name": "char_spacing", "type": "integer"}, {"name": "justification", "type": "integer"}], "name": "FRMT", "match": "FRMT", "type": "command", "syntaxstring": "FRMT (command) left_margin (integer) top_margin (integer) right_margin (integer) button_margin (integer) line_spacing (integer) char_spacing (integer) justification (integer)", "uniquename": "c_FRMT", "evalcost": {"default": 1}, "implementation": "caosVM::c_FRMT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "c_PTXT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Sets the text displayed in the current text part.\n", "arguments": [{"name": "text", "type": "string"}], "name": "PTXT", "match": "PTXT", "type": "command", "syntaxstring": "PTXT (command) text (string)", "uniquename": "c_PTXT", "evalcost": {"default": 1}, "implementation": "caosVM::c_PTXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PTXT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Returns the text displayed in the current text part.\n", "arguments": [], "name": "PTXT", "match": "PTXT", "type": "string", "syntaxstring": "PTXT (string)", "uniquename": "v_PTXT", "evalcost": {"default": 0}, "implementation": "caosVM::v_PTXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_PNXT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Returns the next part of the TARG compound agent or vehicle, (or -1 if you have reached the end, or\nthe first part if you go past -1).\n", "arguments": [{"name": "previous_part", "type": "integer"}], "name": "PNXT", "match": "PNXT", "type": "integer", "syntaxstring": "PNXT (integer) previous_part (integer)", "uniquename": "v_PNXT", "evalcost": {"default": 0}, "implementation": "caosVM::v_PNXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PAGE": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Sets the zero-based page number of the current text part.  This must be less than NPGS.\n", "arguments": [{"name": "page", "type": "integer"}], "name": "PAGE", "match": "PAGE", "type": "command", "syntaxstring": "PAGE (command) page (integer)", "uniquename": "c_PAGE", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PAGE": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Returns the zero-based page number of the current text part.\n", "arguments": [], "name": "PAGE", "match": "PAGE", "type": "integer", "syntaxstring": "PAGE (integer)", "uniquename": "v_PAGE", "evalcost": {"default": 0}, "implementation": "caosVM::v_PAGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NPGS": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Returns the number of pages for the current text part.\n", "arguments": [], "name": "NPGS", "match": "NPGS", "type": "integer", "syntaxstring": "NPGS (integer)", "uniquename": "v_NPGS", "evalcost": {"default": 0}, "implementation": "caosVM::v_NPGS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_GRPV": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Add the given value to the given line on a graph.\n", "arguments": [{"name": "line", "type": "integer"}, {"name": "value", "type": "float"}], "name": "GRPV", "match": "GRPV", "type": "command", "syntaxstring": "GRPV (command) line (integer) value (float)", "uniquename": "c_GRPV", "evalcost": {"default": 1}, "implementation": "caosVM::c_GRPV", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_GRPL": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Add a new line to a graph created with PAT: GRPH with the given\ncharacteristics.\n", "arguments": [{"name": "red", "type": "integer"}, {"name": "green", "type": "integer"}, {"name": "blue", "type": "integer"}, {"name": "min", "type": "float"}, {"name": "max", "type": "float"}], "name": "GRPL", "match": "GRPL", "type": "command", "syntaxstring": "GRPL (command) red (integer) green (integer) blue (integer) min (float) max (float)", "uniquename": "c_GRPL", "evalcost": {"default": 1}, "implementation": "caosVM::c_GRPL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_OUTX": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Prints the given string on the output stream, after first quoting it and transforming\nescapes in the string to quoted escapes.\n", "arguments": [{"name": "val", "type": "string"}], "name": "OUTX", "match": "OUTX", "type": "command", "syntaxstring": "OUTX (command) val (string)", "uniquename": "c_OUTX", "evalcost": {"default": 1}, "implementation": "caosVM::c_OUTX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_OUTS": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Prints the given string to the output stream.  Does nothing when run inside a script.\n", "arguments": [{"name": "val", "type": "string"}], "name": "OUTS", "match": "OUTS", "type": "command", "syntaxstring": "OUTS (command) val (string)", "uniquename": "c_OUTS", "evalcost": {"default": 1}, "implementation": "caosVM::c_OUTS", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_OUTV": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Prints the given decimal value to the ouput stream.  Does nothing when run inside a script.\n", "arguments": [{"name": "val", "type": "decimal"}], "name": "OUTV", "match": "OUTV", "type": "command", "syntaxstring": "OUTV (command) val (decimal)", "uniquename": "c_OUTV", "evalcost": {"default": 1}, "implementation": "caosVM::c_OUTV", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_GAME": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns the game variable with the given name.\n", "arguments": [{"name": "name", "type": "string"}], "name": "GAME", "match": "GAME", "type": "variable", "syntaxstring": "GAME (variable) name (string)", "uniquename": "v_GAME", "evalcost": {"default": 0}, "implementation": "caosVM::v_GAME", "status": "maybe", "saveimpl": "caosVM::s_GAME", "stackdelta": 0}, "v_EAME": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns the non-persistent game variable with the given name.\n", "arguments": [{"name": "name", "type": "anything"}], "name": "EAME", "match": "EAME", "type": "variable", "syntaxstring": "EAME (variable) name (anything)", "uniquename": "v_EAME", "evalcost": {"default": 0}, "implementation": "caosVM::v_EAME", "status": "maybe", "saveimpl": "caosVM::s_EAME", "stackdelta": 0}, "c_DELG": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Deletes the game variable with the given name.\n", "arguments": [{"name": "name", "type": "string"}], "name": "DELG", "match": "DELG", "type": "command", "syntaxstring": "DELG (command) name (string)", "uniquename": "c_DELG", "evalcost": {"default": 1}, "implementation": "caosVM::c_DELG", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SCRP": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the beginning of a normal script applying to the agent with the given classifier\ninfo.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "SCRP", "match": "SCRP", "type": "command", "syntaxstring": "SCRP (command) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "c_SCRP", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCRP", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_RSCR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the beginning of a removal script.\n", "arguments": [], "name": "RSCR", "match": "RSCR", "type": "command", "syntaxstring": "RSCR (command)", "uniquename": "c_RSCR", "evalcost": {"default": 1}, "implementation": "caosVM::c_RSCR", "pragma": {"variants": "c2 cv c3 sm"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ISCR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the beginning of an installer script.\n", "arguments": [], "name": "ISCR", "match": "ISCR", "type": "command", "syntaxstring": "ISCR (command)", "uniquename": "c_ISCR", "evalcost": {"default": 1}, "implementation": "caosVM::c_ISCR", "pragma": {"variants": "c2 cv c3 sm"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ENDM": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the end of a script.\n", "arguments": [], "name": "ENDM", "match": "ENDM", "type": "command", "syntaxstring": "ENDM (command)", "uniquename": "c_ENDM", "evalcost": {"default": 1}, "implementation": "caosVM::c_ENDM", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_RGAM": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Restore all game variables to their saved or default values.\n", "arguments": [], "name": "RGAM", "match": "RGAM", "type": "command", "syntaxstring": "RGAM (command)", "uniquename": "c_RGAM", "evalcost": {"default": 1}, "implementation": "caosVM::c_RGAM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MOWS": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns whether the lawn was cut last Sunday or not, in theory.\nHow the C2E engine determines this, and whose lawn, exactly, and whether or not it takes into account the fact that the lawn may have been mown on Saturday or Friday, and whether it will cut you any slack if it's winter and the grass isn't growing much, is currently unknown.\n\nIn openc2e, currently a no-op (ie, the lawn is never, ever cut properly).\n", "arguments": [], "name": "MOWS", "match": "MOWS", "type": "integer", "syntaxstring": "MOWS (integer)", "uniquename": "v_MOWS", "evalcost": {"default": 0}, "implementation": "caosVM::v_MOWS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_VMNR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns the minor version number of the engine.\n", "arguments": [], "name": "VMNR", "match": "VMNR", "type": "integer", "syntaxstring": "VMNR (integer)", "uniquename": "v_VMNR", "evalcost": {"default": 0}, "implementation": "caosVM::v_VMNR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_VMJR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns the major version number of the engine.\n", "arguments": [], "name": "VMJR", "match": "VMJR", "type": "integer", "syntaxstring": "VMJR (integer)", "uniquename": "v_VMJR", "evalcost": {"default": 0}, "implementation": "caosVM::v_VMJR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WOLF": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "This returns/sets some engine settings which are useful for 'wolfing runs', among other things.\nSet andmask for the information you want returned, and eormask for the information you want changed.\n\n1 is for display rendering (turn it off to speed up the game)\n2 is for running ticks as fast as possible, rather than according to BUZZ\n4 is for refreshing the display (when display rendering is turned off, this will update the display at the end of the tick)\n(note that 4 is unset by the engine when the display is refreshed)\n8 is autokill\n", "arguments": [{"name": "andmask", "type": "integer"}, {"name": "eormask", "type": "integer"}], "name": "WOLF", "match": "WOLF", "type": "integer", "syntaxstring": "WOLF (integer) andmask (integer) eormask (integer)", "uniquename": "v_WOLF", "evalcost": {"default": 0}, "implementation": "caosVM::v_WOLF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_LANG": {"filename": "caosVM_core.cpp", "category": "core functions", "arguments": [], "name": "LANG", "match": "LANG", "type": "string", "syntaxstring": "LANG (string)", "uniquename": "v_LANG", "evalcost": {"default": 0}, "implementation": "caosVM::v_LANG", "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_OC2E_DDIR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns a list of the data directories available, separated with \\n. Remember that the last one is the working directory.\n", "arguments": [], "name": "OC2E DDIR", "match": "DDIR", "type": "string", "syntaxstring": "OC2E DDIR (string)", "uniquename": "v_OC2E_DDIR", "namespace": "oc2e", "evalcost": {"default": 0}, "implementation": "caosVM::v_OC2E_DDIR", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_STIM_SHOU": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Send a stimulus of the given type to all Creatures who can hear OWNR.\n", "arguments": [{"name": "stimulus", "type": "integer"}, {"name": "strength", "type": "float"}], "name": "STIM SHOU", "match": "SHOU", "type": "command", "syntaxstring": "STIM SHOU (command) stimulus (integer) strength (float)", "uniquename": "c_STIM_SHOU", "namespace": "stim", "evalcost": {"default": 1}, "implementation": "caosVM::c_STIM_SHOU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_STIM_SIGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Sends a stimulus of the given type to all Creatures who can see OWNR.\n", "arguments": [{"name": "stimulus", "type": "integer"}, {"name": "strength", "type": "float"}], "name": "STIM SIGN", "match": "SIGN", "type": "command", "syntaxstring": "STIM SIGN (command) stimulus (integer) strength (float)", "uniquename": "c_STIM_SIGN", "namespace": "stim", "evalcost": {"default": 1}, "implementation": "caosVM::c_STIM_SIGN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_STIM_TACT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Sends a stimulus of the given type to all Creatures who are touching OWNR.\n", "arguments": [{"name": "stimulus", "type": "integer"}, {"name": "strength", "type": "float"}], "name": "STIM TACT", "match": "TACT", "type": "command", "syntaxstring": "STIM TACT (command) stimulus (integer) strength (float)", "uniquename": "c_STIM_TACT", "namespace": "stim", "evalcost": {"default": 1}, "implementation": "caosVM::c_STIM_TACT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_STIM_WRIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Sends a stimulus of the given type to specific Creature.\n", "arguments": [{"name": "creature", "type": "agent"}, {"name": "stimulus", "type": "integer"}, {"name": "strength", "type": "float"}], "name": "STIM WRIT", "match": "WRIT", "type": "command", "syntaxstring": "STIM WRIT (command) creature (agent) stimulus (integer) strength (float)", "uniquename": "c_STIM_WRIT", "namespace": "stim", "evalcost": {"default": 1}, "implementation": "caosVM::c_STIM_WRIT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_SWAY_SHOU": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Adjusts these four drives in all Creatures who can hear OWNR.\n", "arguments": [{"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "SWAY SHOU", "match": "SHOU", "type": "command", "syntaxstring": "SWAY SHOU (command) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float)", "uniquename": "c_SWAY_SHOU", "namespace": "sway", "evalcost": {"default": 1}, "implementation": "caosVM::c_SWAY_SHOU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -8}, "c_SWAY_SIGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Adjusts these four drives in all Creatures who can see OWNR.\n", "arguments": [{"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "SWAY SIGN", "match": "SIGN", "type": "command", "syntaxstring": "SWAY SIGN (command) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float)", "uniquename": "c_SWAY_SIGN", "namespace": "sway", "evalcost": {"default": 1}, "implementation": "caosVM::c_SWAY_SIGN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -8}, "c_SWAY_TACT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Adjusts these four drives in all Creatures who are touching OWNR.\n", "arguments": [{"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "SWAY TACT", "match": "TACT", "type": "command", "syntaxstring": "SWAY TACT (command) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float)", "uniquename": "c_SWAY_TACT", "namespace": "sway", "evalcost": {"default": 1}, "implementation": "caosVM::c_SWAY_TACT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -8}, "c_SWAY_WRIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Adjusts these four drives in the specified creature.\n", "arguments": [{"name": "creature", "type": "agent"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "SWAY WRIT", "match": "WRIT", "type": "command", "syntaxstring": "SWAY WRIT (command) creature (agent) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float)", "uniquename": "c_SWAY_WRIT", "namespace": "sway", "evalcost": {"default": 1}, "implementation": "caosVM::c_SWAY_WRIT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -9}, "c_NOHH": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Tells the target Creature to stop holding hands with the pointer.\n", "arguments": [], "name": "NOHH", "match": "NOHH", "type": "command", "syntaxstring": "NOHH (command)", "uniquename": "c_NOHH", "evalcost": {"default": 1}, "implementation": "caosVM::c_NOHH", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ZOMB": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Turns zombification of the target Creature on and off.  Set to 1 to disconnect the brain and\nmotor of the target Creature, and 0 to undo.\n", "arguments": [{"name": "zombie", "type": "integer"}], "name": "ZOMB", "match": "ZOMB", "type": "command", "syntaxstring": "ZOMB (command) zombie (integer)", "uniquename": "c_ZOMB", "evalcost": {"default": 1}, "implementation": "caosVM::c_ZOMB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ZOMB": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns 1 if target Creature is zombified, or 0 if otherwise.\n", "arguments": [], "name": "ZOMB", "match": "ZOMB", "type": "integer", "syntaxstring": "ZOMB (integer)", "uniquename": "v_ZOMB", "evalcost": {"default": 0}, "implementation": "caosVM::v_ZOMB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_DIRN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Changes the target Creature to face a different direction.\n", "arguments": [{"name": "direction", "type": "integer"}], "name": "DIRN", "match": "DIRN", "type": "command", "syntaxstring": "DIRN (command) direction (integer)", "uniquename": "c_DIRN", "evalcost": {"default": 1}, "implementation": "caosVM::c_DIRN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_DIRN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the direction the target Creatures is facing.\n", "arguments": [], "name": "DIRN", "match": "DIRN", "type": "integer", "syntaxstring": "DIRN (integer)", "uniquename": "v_DIRN", "evalcost": {"default": 0}, "implementation": "caosVM::v_DIRN", "pragma": {"variants": "c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HHLD": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns Creatures that are holding hands with pointer, or NULL if none.\n", "arguments": [], "name": "HHLD", "match": "HHLD", "type": "agent", "syntaxstring": "HHLD (agent)", "uniquename": "v_HHLD", "evalcost": {"default": 0}, "implementation": "caosVM::v_HHLD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MVFT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Move the target Creature's foot (along with the rest of the Creature, obviously) to the given\ncoordinates.  You should use this rather than MVTO for Creatures.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "MVFT", "match": "MVFT", "type": "command", "syntaxstring": "MVFT (command) x (float) y (float)", "uniquename": "c_MVFT", "evalcost": {"default": 1}, "implementation": "caosVM::c_MVFT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_CREA": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Determines whether the given agent is a creature or not (0 or 1).\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "CREA", "match": "CREA", "type": "integer", "syntaxstring": "CREA (integer) agent (agent)", "uniquename": "v_CREA", "evalcost": {"default": 0}, "implementation": "caosVM::v_CREA", "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_VOCB": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature learn all vocabulary words immediately.\n", "arguments": [], "name": "VOCB", "match": "VOCB", "type": "command", "syntaxstring": "VOCB (command)", "uniquename": "c_VOCB", "evalcost": {"default": 1}, "implementation": "caosVM::c_VOCB", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DEAD": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Kill the target Creature biologically.\n", "arguments": [], "name": "DEAD", "match": "DEAD", "type": "command", "syntaxstring": "DEAD (command)", "uniquename": "c_DEAD", "evalcost": {"default": 1}, "implementation": "caosVM::c_DEAD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DEAD": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Determines whether the target Creature is alive (0) or dead (255 in c1/c2, 1 otherwise).\n", "arguments": [], "name": "DEAD", "match": "DEAD", "type": "integer", "syntaxstring": "DEAD (integer)", "uniquename": "v_DEAD", "evalcost": {"default": 0}, "implementation": "caosVM::v_DEAD", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_NORN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Sets the target Creature to the given one.\n", "arguments": [{"name": "creature", "type": "agent"}], "name": "NORN", "match": "NORN", "type": "command", "syntaxstring": "NORN (command) creature (agent)", "uniquename": "c_NORN", "evalcost": {"default": 1}, "implementation": "caosVM::c_NORN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_NORN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the target Creature.\n", "arguments": [], "name": "NORN", "match": "NORN", "type": "agent", "syntaxstring": "NORN (agent)", "uniquename": "v_NORN", "evalcost": {"default": 0}, "implementation": "caosVM::v_NORN", "pragma": {"variants": "cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_URGE_SHOU": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Urges all Creatures who can hear OWNR to perform the given action on OWNR.\nThe two stimuli parameters can range from -1.0 (discourage) to 1.0 (encourage).\n", "arguments": [{"name": "noun_stim", "type": "float"}, {"name": "verb_id", "type": "integer"}, {"name": "verb_stim", "type": "float"}], "name": "URGE SHOU", "match": "SHOU", "type": "command", "syntaxstring": "URGE SHOU (command) noun_stim (float) verb_id (integer) verb_stim (float)", "uniquename": "c_URGE_SHOU", "namespace": "urge", "evalcost": {"default": 1}, "implementation": "caosVM::c_URGE_SHOU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_URGE_SIGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Urges all Creatures who can see OWNR to perform the given action on OWNR.\nThe two stimuli parameters can range from -1.0 (discourage) to 1.0 (encourage).\n", "arguments": [{"name": "noun_stim", "type": "float"}, {"name": "verb_id", "type": "integer"}, {"name": "verb_stim", "type": "float"}], "name": "URGE SIGN", "match": "SIGN", "type": "command", "syntaxstring": "URGE SIGN (command) noun_stim (float) verb_id (integer) verb_stim (float)", "uniquename": "c_URGE_SIGN", "namespace": "urge", "evalcost": {"default": 1}, "implementation": "caosVM::c_URGE_SIGN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_URGE_TACT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Urges all Creatures who are touching OWNR to perform the given action on OWNR.\nThe two stimuli parameters can range from -1.0 (discourage) to 1.0 (encourage).\n", "arguments": [{"name": "noun_stim", "type": "float"}, {"name": "verb_id", "type": "integer"}, {"name": "verb_stim", "type": "float"}], "name": "URGE TACT", "match": "TACT", "type": "command", "syntaxstring": "URGE TACT (command) noun_stim (float) verb_id (integer) verb_stim (float)", "uniquename": "c_URGE_TACT", "namespace": "urge", "evalcost": {"default": 1}, "implementation": "caosVM::c_URGE_TACT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_URGE_WRIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Urges the specified Creature to perform the specified action (verb) on the specified object type\n(noun).  Provide a stim greater than 1 to force, and an id of -1 and a stim greater than 1 to unforce.\n", "arguments": [{"name": "creature", "type": "agent"}, {"name": "noun_id", "type": "integer"}, {"name": "noun_stim", "type": "float"}, {"name": "verb_id", "type": "integer"}, {"name": "verb_stim", "type": "float"}], "name": "URGE WRIT", "match": "WRIT", "type": "command", "syntaxstring": "URGE WRIT (command) creature (agent) noun_id (integer) noun_stim (float) verb_id (integer) verb_stim (float)", "uniquename": "c_URGE_WRIT", "namespace": "urge", "evalcost": {"default": 1}, "implementation": "caosVM::c_URGE_WRIT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_DRIV": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Modifies the level of a drive in target Creature by the given level, which can range from -1.0 (decrease) to 1.0 (increase).\n", "arguments": [{"name": "drive_id", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "DRIV", "match": "DRIV", "type": "command", "syntaxstring": "DRIV (command) drive_id (integer) adjust (float)", "uniquename": "c_DRIV", "evalcost": {"default": 1}, "implementation": "caosVM::c_DRIV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_DRIV": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the level of a drive (0.0 to 1.0) in target Creature.\n", "arguments": [{"name": "drive_id", "type": "integer"}], "name": "DRIV", "match": "DRIV", "type": "float", "syntaxstring": "DRIV (float) drive_id (integer)", "uniquename": "v_DRIV", "evalcost": {"default": 0}, "implementation": "caosVM::v_DRIV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_CHEM": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Modifies the level of a chemical in target Creature's bloodstream by adjust, which can range from -1.0 (decrease) to 1.0 (increase).\n", "arguments": [{"name": "chemical_id", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "CHEM", "match": "CHEM", "type": "command", "syntaxstring": "CHEM (command) chemical_id (integer) adjust (float)", "uniquename": "c_CHEM", "evalcost": {"default": 1}, "implementation": "caosVM::c_CHEM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_CHEM": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the level of a chemical (0.0 to 1.0) in target creature's bloodstream.\n", "arguments": [{"name": "chemical_id", "type": "integer"}], "name": "CHEM", "match": "CHEM", "type": "float", "syntaxstring": "CHEM (float) chemical_id (integer)", "uniquename": "v_CHEM", "evalcost": {"default": 0}, "implementation": "caosVM::v_CHEM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ASLP": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "If asleep is 1, makes the target creature sleep. If asleep is 0, makes the target creature wake.\n", "arguments": [{"name": "asleep", "type": "integer"}], "name": "ASLP", "match": "ASLP", "type": "command", "syntaxstring": "ASLP (command) asleep (integer)", "uniquename": "c_ASLP", "evalcost": {"default": 1}, "implementation": "caosVM::c_ASLP", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ASLP": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Determines whether the target Creature is asleep.\n", "arguments": [], "name": "ASLP", "match": "ASLP", "type": "integer", "syntaxstring": "ASLP (integer)", "uniquename": "v_ASLP", "evalcost": {"default": 0, "c1": 0, "c2": 0}, "implementation": "caosVM::v_ASLP", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_APPR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature approach the IT agent (or if none, an agent of that category using CAs),\nblocking until it makes it there or gives up.\n", "arguments": [], "name": "APPR", "match": "APPR", "type": "command", "syntaxstring": "APPR (command)", "uniquename": "c_APPR", "evalcost": {"default": 1}, "implementation": "caosVM::c_APPR", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_UNCS": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature conscious if 0, or unconscious if 1.\n", "arguments": [{"name": "unconscious", "type": "integer"}], "name": "UNCS", "match": "UNCS", "type": "command", "syntaxstring": "UNCS (command) unconscious (integer)", "uniquename": "c_UNCS", "evalcost": {"default": 1}, "implementation": "caosVM::c_UNCS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_UNCS": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns 1 if the target Creature is unconscious, or 0 otherwise.\n", "arguments": [], "name": "UNCS", "match": "UNCS", "type": "integer", "syntaxstring": "UNCS (integer)", "uniquename": "v_UNCS", "evalcost": {"default": 0}, "implementation": "caosVM::v_UNCS", "pragma": {"variants": "c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FACE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "number", "type": "integer"}], "name": "FACE", "match": "FACE", "type": "command", "syntaxstring": "FACE (command) number (integer)", "uniquename": "c_FACE", "evalcost": {"default": 1}, "implementation": "caosVM::c_FACE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FACE_INT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the front-facing pose for the current facial expression of the target creature.\n", "arguments": [], "name": "FACE INT", "match": "INT", "type": "integer", "syntaxstring": "FACE INT (integer)", "uniquename": "v_FACE_INT", "namespace": "face", "evalcost": {"default": 0}, "implementation": "caosVM::v_FACE_INT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_FACE_STRING": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the current sprite filename for the face of the target creature.\n", "arguments": [], "name": "FACE STRING", "match": "STRING", "type": "string", "syntaxstring": "FACE STRING (string)", "uniquename": "v_FACE_STRING", "namespace": "face", "evalcost": {"default": 0}, "implementation": "caosVM::v_FACE_STRING", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_LIKE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Causes the target Creature to state an opinion about the specified Creature.\n", "arguments": [{"name": "creature", "type": "agent"}], "name": "LIKE", "match": "LIKE", "type": "command", "syntaxstring": "LIKE (command) creature (agent)", "uniquename": "c_LIKE", "evalcost": {"default": 1}, "implementation": "caosVM::c_LIKE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_LIMB": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the filename for the specified part of a Creature, substituting as necessary.\n", "arguments": [{"name": "bodypart", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "gender", "type": "integer"}, {"name": "age", "type": "integer"}, {"name": "variant", "type": "integer"}], "name": "LIMB", "match": "LIMB", "type": "string", "syntaxstring": "LIMB (string) bodypart (integer) genus (integer) gender (integer) age (integer) variant (integer)", "uniquename": "v_LIMB", "evalcost": {"default": 0}, "implementation": "caosVM::v_LIMB", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_ORDR_SHOU": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature speak the specified speech to all creatures in hearing range.\n", "arguments": [{"name": "speech", "type": "string"}], "name": "ORDR SHOU", "match": "SHOU", "type": "command", "syntaxstring": "ORDR SHOU (command) speech (string)", "uniquename": "c_ORDR_SHOU", "namespace": "ordr", "evalcost": {"default": 1}, "implementation": "caosVM::c_ORDR_SHOU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ORDR_SIGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature speak the specified speech to all creatures that can see it.\n", "arguments": [{"name": "speech", "type": "string"}], "name": "ORDR SIGN", "match": "SIGN", "type": "command", "syntaxstring": "ORDR SIGN (command) speech (string)", "uniquename": "c_ORDR_SIGN", "namespace": "ordr", "evalcost": {"default": 1}, "implementation": "caosVM::c_ORDR_SIGN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ORDR_TACT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature speak the specified speech to all creatures that are touching it.\n", "arguments": [{"name": "speech", "type": "string"}], "name": "ORDR TACT", "match": "TACT", "type": "command", "syntaxstring": "ORDR TACT (command) speech (string)", "uniquename": "c_ORDR_TACT", "namespace": "ordr", "evalcost": {"default": 1}, "implementation": "caosVM::c_ORDR_TACT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ORDR_WRIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature speak the specified speech to the specified creature.\n", "arguments": [{"name": "creature", "type": "agent"}, {"name": "speech", "type": "string"}], "name": "ORDR WRIT", "match": "WRIT", "type": "command", "syntaxstring": "ORDR WRIT (command) creature (agent) speech (string)", "uniquename": "c_ORDR_WRIT", "namespace": "ordr", "evalcost": {"default": 1}, "implementation": "caosVM::c_ORDR_WRIT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_DREA": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Turns a Creature's dreaming on and off.  A Creature's instincts are\nprocessed while it is dreaming.  If it is not asleep already, then it\nwill be made to sleep before dreaming begins.\n", "arguments": [{"name": "dream", "type": "integer"}], "name": "DREA", "match": "DREA", "type": "command", "syntaxstring": "DREA (command) dream (integer)", "uniquename": "c_DREA", "evalcost": {"default": 1}, "implementation": "caosVM::c_DREA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_DREA": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns whether or not the target Creature is dreaming (0 or 1).\n", "arguments": [], "name": "DREA", "match": "DREA", "type": "integer", "syntaxstring": "DREA (integer)", "uniquename": "v_DREA", "evalcost": {"default": 0}, "implementation": "caosVM::v_DREA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_BORN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Registers the birth of the target Creature, and sends a birth event to\nthe game.\n", "arguments": [], "name": "BORN", "match": "BORN", "type": "command", "syntaxstring": "BORN (command)", "uniquename": "c_BORN", "evalcost": {"default": 1}, "implementation": "caosVM::c_BORN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_CAGE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the integer value of the target Creature's current life stage.\n", "arguments": [], "name": "CAGE", "match": "CAGE", "type": "integer", "syntaxstring": "CAGE (integer)", "uniquename": "v_CAGE", "evalcost": {"default": 0}, "implementation": "caosVM::v_CAGE", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_BYIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Determines whether or not the target Creature can reach the IT agent (0\nor 1).\n", "arguments": [], "name": "BYIT", "match": "BYIT", "type": "integer", "syntaxstring": "BYIT (integer)", "uniquename": "v_BYIT", "evalcost": {"default": 0}, "implementation": "caosVM::v_BYIT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v__IT_": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the agent that the OWNR creature was focused on when the\ncurrent script began running.\n", "arguments": [], "name": "_IT_", "match": "_IT_", "type": "agent", "syntaxstring": "_IT_ (agent)", "uniquename": "v__IT_", "evalcost": {"default": 0}, "implementation": "caosVM::v_IT", "pragma": {"implementation": "caosVM::v_IT", "variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_NEWC": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Creates a new creature over the space of a few ticks, using the specified agent/slot for genetic data. sex is 0 for random, 1 for male or 2 for female.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "gene_agent", "type": "agent"}, {"name": "gene_slot", "type": "integer"}, {"name": "sex", "type": "integer"}, {"name": "variant", "type": "integer"}], "name": "NEWC", "match": "NEWC", "type": "command", "syntaxstring": "NEWC (command) family (integer) gene_agent (agent) gene_slot (integer) sex (integer) variant (integer)", "uniquename": "c_NEWC", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEWC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_NEW_CREA": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Creates a new creature using the specified agent/slot for genetic data. sex is 0 for random, 1 for male or 2 for female.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "gene_agent", "type": "agent"}, {"name": "gene_slot", "type": "integer"}, {"name": "sex", "type": "integer"}, {"name": "variant", "type": "integer"}], "name": "NEW: CREA", "match": "CREA", "type": "command", "syntaxstring": "NEW: CREA (command) family (integer) gene_agent (agent) gene_slot (integer) sex (integer) variant (integer)", "uniquename": "c_NEW_CREA", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_CREA", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_LTCY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "action", "type": "integer"}, {"name": "min", "type": "integer"}, {"name": "max", "type": "integer"}], "name": "LTCY", "match": "LTCY", "type": "command", "syntaxstring": "LTCY (command) action (integer) min (integer) max (integer)", "uniquename": "c_LTCY", "evalcost": {"default": 1}, "implementation": "caosVM::c_LTCY", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_MATE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "MATE", "match": "MATE", "type": "command", "syntaxstring": "MATE (command)", "uniquename": "c_MATE", "evalcost": {"default": 1}, "implementation": "caosVM::c_MATE", "pragma": {"variants": "c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DRV": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "DRV!", "match": "DRV!", "type": "integer", "syntaxstring": "DRV! (integer)", "uniquename": "v_DRV", "evalcost": {"default": 0}, "implementation": "caosVM::v_DRV", "pragma": {"implementation": "caosVM::v_DRV", "variants": "c1 c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_IITT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Return the agent which the target creature is currently focused on. Note that you should probably use _IT_ in creature scripts.\n", "arguments": [], "name": "IITT", "match": "IITT", "type": "agent", "syntaxstring": "IITT (agent)", "uniquename": "v_IITT", "evalcost": {"default": 0}, "implementation": "caosVM::v_IITT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_AGES": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Age (ie, increase the life stage of) the target creature the specified number of times.\n", "arguments": [{"name": "times", "type": "integer"}], "name": "AGES", "match": "AGES", "type": "command", "syntaxstring": "AGES (command) times (integer)", "uniquename": "c_AGES", "evalcost": {"default": 1}, "implementation": "caosVM::c_AGES", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_LOCI": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Set the value of the specified loci of the target creature. 'type' is 0 for receptor loci and 1 for emitter loci.\nSee genetics documentation for details of the parameters.\n", "arguments": [{"name": "type", "type": "integer"}, {"name": "organ", "type": "integer"}, {"name": "tissue", "type": "integer"}, {"name": "id", "type": "integer"}, {"name": "value", "type": "float"}], "name": "LOCI", "match": "LOCI", "type": "command", "syntaxstring": "LOCI (command) type (integer) organ (integer) tissue (integer) id (integer) value (float)", "uniquename": "c_LOCI", "evalcost": {"default": 1}, "implementation": "caosVM::c_LOCI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "v_LOCI": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Return the current value of the specified loci of the target creature. 'type' is 0 for receptor loci and 1 for emitter loci.\nSee genetics documentation for details of thei parameters.\n", "arguments": [{"name": "type", "type": "integer"}, {"name": "organ", "type": "integer"}, {"name": "tissue", "type": "integer"}, {"name": "id", "type": "integer"}], "name": "LOCI", "match": "LOCI", "type": "float", "syntaxstring": "LOCI (float) type (integer) organ (integer) tissue (integer) id (integer)", "uniquename": "v_LOCI", "evalcost": {"default": 0}, "implementation": "caosVM::v_LOCI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_TAGE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns age of target creature, in ticks. Only counts ticks since it was BORN.\n", "arguments": [], "name": "TAGE", "match": "TAGE", "type": "integer", "syntaxstring": "TAGE (integer)", "uniquename": "v_TAGE", "evalcost": {"default": 0}, "implementation": "caosVM::v_TAGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_ORGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Return the number of organs the target creature has.\n", "arguments": [], "name": "ORGN", "match": "ORGN", "type": "integer", "syntaxstring": "ORGN (integer)", "uniquename": "v_ORGN", "evalcost": {"default": 0}, "implementation": "caosVM::v_ORGN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_ORGF": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Return some data about the specified organ (numbered starting at zero) of the target creature.\n\nvalue should be one of the following types of data:\n0: clock rate\n1: short term life force as a proportion of the initial life force\n2: repair rate\n3: injury to apply\n4: initial life force\n5: short term life force\n6: long term life force\n7: damage rate\n8: energy cost\n9: atp damage coefficient\n\nReturns -1 if the specified organ or value is invalid.\n", "arguments": [{"name": "organ", "type": "integer"}, {"name": "value", "type": "integer"}], "name": "ORGF", "match": "ORGF", "type": "float", "syntaxstring": "ORGF (float) organ (integer) value (integer)", "uniquename": "v_ORGF", "evalcost": {"default": 0}, "implementation": "caosVM::v_ORGF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ORGI": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns a count of receptors (value 0), emitters (value 1) or reactions (value 2) in the specified organ (numbered starting at zero) of the target creature.\n\nReturns -1 if the specified organ or value is invalid.\n", "arguments": [{"name": "organ", "type": "integer"}, {"name": "value", "type": "integer"}], "name": "ORGI", "match": "ORGI", "type": "integer", "syntaxstring": "ORGI (integer) organ (integer) value (integer)", "uniquename": "v_ORGI", "evalcost": {"default": 0}, "implementation": "caosVM::v_ORGI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SOUL": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}, {"name": "on", "type": "integer"}], "name": "SOUL", "match": "SOUL", "type": "command", "syntaxstring": "SOUL (command) part (integer) on (integer)", "uniquename": "c_SOUL", "evalcost": {"default": 1}, "implementation": "caosVM::c_SOUL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_SOUL": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}], "name": "SOUL", "match": "SOUL", "type": "integer", "syntaxstring": "SOUL (integer) part (integer)", "uniquename": "v_SOUL", "evalcost": {"default": 0}, "implementation": "caosVM::v_SOUL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DECN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "DECN", "match": "DECN", "type": "integer", "syntaxstring": "DECN (integer)", "uniquename": "v_DECN", "evalcost": {"default": 0}, "implementation": "caosVM::v_DECN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_ATTN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "ATTN", "match": "ATTN", "type": "integer", "syntaxstring": "ATTN (integer)", "uniquename": "v_ATTN", "evalcost": {"default": 0}, "implementation": "caosVM::v_ATTN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_TOUC": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "TOUC", "match": "TOUC", "type": "command", "syntaxstring": "TOUC (command)", "uniquename": "c_TOUC", "evalcost": {"default": 1}, "implementation": "caosVM::c_TOUC", "pragma": {"variants": "c1 c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_FORF": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "creature", "type": "agent"}], "name": "FORF", "match": "FORF", "type": "command", "syntaxstring": "FORF (command) creature (agent)", "uniquename": "c_FORF", "evalcost": {"default": 1}, "implementation": "caosVM::c_FORF", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_WALK": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "WALK", "match": "WALK", "type": "command", "syntaxstring": "WALK (command)", "uniquename": "c_WALK", "evalcost": {"default": 1}, "implementation": "caosVM::c_WALK", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DONE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "DONE", "match": "DONE", "type": "command", "syntaxstring": "DONE (command)", "uniquename": "c_DONE", "evalcost": {"default": 1}, "implementation": "caosVM::c_DONE", "pragma": {"variants": "c1 c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SAYN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "SAYN", "match": "SAYN", "type": "command", "syntaxstring": "SAYN (command)", "uniquename": "c_SAYN", "evalcost": {"default": 1}, "implementation": "caosVM::c_SAYN", "pragma": {"variants": "c1 c2 cv c3"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_BRED": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}], "name": "BRED", "match": "BRED", "type": "integer", "syntaxstring": "BRED (integer) part (integer)", "uniquename": "v_BRED", "evalcost": {"default": 0}, "implementation": "caosVM::v_BRED", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_BVAR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "BVAR", "match": "BVAR", "type": "integer", "syntaxstring": "BVAR (integer)", "uniquename": "v_BVAR", "evalcost": {"default": 0}, "implementation": "caosVM::v_BVAR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_EXPR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "index", "type": "integer"}, {"name": "ticks", "type": "integer"}], "name": "EXPR", "match": "EXPR", "type": "command", "syntaxstring": "EXPR (command) index (integer) ticks (integer)", "uniquename": "c_EXPR", "evalcost": {"default": 1}, "implementation": "caosVM::c_EXPR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_EXPR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "EXPR", "match": "EXPR", "type": "integer", "syntaxstring": "EXPR (integer)", "uniquename": "v_EXPR", "evalcost": {"default": 0}, "implementation": "caosVM::v_EXPR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_TNTC": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "tintindex", "type": "integer"}, {"name": "part", "type": "integer"}, {"name": "commit", "type": "integer"}], "name": "TNTC", "match": "TNTC", "type": "command", "syntaxstring": "TNTC (command) tintindex (integer) part (integer) commit (integer)", "uniquename": "c_TNTC", "evalcost": {"default": 1}, "implementation": "caosVM::c_TNTC", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_MOTR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "enable", "type": "integer"}], "name": "MOTR", "match": "MOTR", "type": "command", "syntaxstring": "MOTR (command) enable (integer)", "uniquename": "c_MOTR", "evalcost": {"default": 1}, "implementation": "caosVM::c_MOTR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_MOTR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "MOTR", "match": "MOTR", "type": "integer", "syntaxstring": "MOTR (integer)", "uniquename": "v_MOTR", "evalcost": {"default": 0}, "implementation": "caosVM::v_MOTR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MIND": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "enable", "type": "integer"}], "name": "MIND", "match": "MIND", "type": "command", "syntaxstring": "MIND (command) enable (integer)", "uniquename": "c_MIND", "evalcost": {"default": 1}, "implementation": "caosVM::c_MIND", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_MIND": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "MIND", "match": "MIND", "type": "integer", "syntaxstring": "MIND (integer)", "uniquename": "v_MIND", "evalcost": {"default": 0}, "implementation": "caosVM::v_MIND", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_STEP": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "faculty", "type": "integer"}], "name": "STEP", "match": "STEP", "type": "command", "syntaxstring": "STEP (command) faculty (integer)", "uniquename": "c_STEP", "evalcost": {"default": 1}, "implementation": "caosVM::c_STEP", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_SEEN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "category", "type": "integer"}], "name": "SEEN", "match": "SEEN", "type": "agent", "syntaxstring": "SEEN (agent) category (integer)", "uniquename": "v_SEEN", "evalcost": {"default": 0}, "implementation": "caosVM::v_SEEN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DOIN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Make the target creature process the specified number of instincts.\n", "arguments": [{"name": "noinstincts", "type": "integer"}], "name": "DOIN", "match": "DOIN", "type": "command", "syntaxstring": "DOIN (command) noinstincts (integer)", "uniquename": "c_DOIN", "evalcost": {"default": 1}, "implementation": "caosVM::c_DOIN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_INS": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Return the number of unprocessed instincts left in the instinct queue for the target creature.\n", "arguments": [], "name": "INS#", "match": "INS#", "type": "integer", "syntaxstring": "INS# (integer)", "uniquename": "v_INS", "evalcost": {"default": 0}, "implementation": "caosVM::v_INS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_BODY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "set", "type": "integer"}, {"name": "layer", "type": "integer"}], "name": "BODY", "match": "BODY", "type": "command", "syntaxstring": "BODY (command) set (integer) layer (integer)", "uniquename": "c_BODY", "evalcost": {"default": 1}, "implementation": "caosVM::c_BODY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_BODY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}], "name": "BODY", "match": "BODY", "type": "integer", "syntaxstring": "BODY (integer) part (integer)", "uniquename": "v_BODY", "evalcost": {"default": 0}, "implementation": "caosVM::v_BODY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DYED": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}, {"name": "overlay", "type": "integer"}, {"name": "set", "type": "integer"}, {"name": "layer", "type": "integer"}], "name": "DYED", "match": "DYED", "type": "command", "syntaxstring": "DYED (command) part (integer) overlay (integer) set (integer) layer (integer)", "uniquename": "c_DYED", "evalcost": {"default": 1}, "implementation": "caosVM::c_DYED", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_HAIR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "ruffleness", "type": "integer"}], "name": "HAIR", "match": "HAIR", "type": "command", "syntaxstring": "HAIR (command) ruffleness (integer)", "uniquename": "c_HAIR", "evalcost": {"default": 1}, "implementation": "caosVM::c_HAIR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_NUDE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "NUDE", "match": "NUDE", "type": "command", "syntaxstring": "NUDE (command)", "uniquename": "c_NUDE", "evalcost": {"default": 1}, "implementation": "caosVM::c_NUDE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_RSET": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "RSET", "match": "RSET", "type": "command", "syntaxstring": "RSET (command)", "uniquename": "c_RSET", "evalcost": {"default": 1}, "implementation": "caosVM::c_RSET", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_STRE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "STRE", "match": "STRE", "type": "command", "syntaxstring": "STRE (command)", "uniquename": "c_STRE", "evalcost": {"default": 1}, "implementation": "caosVM::c_STRE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SWAP": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "variant", "type": "integer"}, {"name": "part", "type": "integer"}, {"name": "commit", "type": "integer"}], "name": "SWAP", "match": "SWAP", "type": "command", "syntaxstring": "SWAP (command) variant (integer) part (integer) commit (integer)", "uniquename": "c_SWAP", "evalcost": {"default": 1}, "implementation": "caosVM::c_SWAP", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_WEAR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}, {"name": "set", "type": "integer"}, {"name": "layer", "type": "integer"}], "name": "WEAR", "match": "WEAR", "type": "command", "syntaxstring": "WEAR (command) part (integer) set (integer) layer (integer)", "uniquename": "c_WEAR", "evalcost": {"default": 1}, "implementation": "caosVM::c_WEAR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_WEAR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}, {"name": "layer", "type": "integer"}], "name": "WEAR", "match": "WEAR", "type": "integer", "syntaxstring": "WEAR (integer) part (integer) layer (integer)", "uniquename": "v_WEAR", "evalcost": {"default": 0}, "implementation": "caosVM::v_WEAR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TNTO": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "tintindex", "type": "integer"}, {"name": "part", "type": "integer"}, {"name": "set", "type": "integer"}, {"name": "layer", "type": "integer"}], "name": "TNTO", "match": "TNTO", "type": "command", "syntaxstring": "TNTO (command) tintindex (integer) part (integer) set (integer) layer (integer)", "uniquename": "c_TNTO", "evalcost": {"default": 1}, "implementation": "caosVM::c_TNTO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_DFTX": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "DFTX", "match": "DFTX", "type": "float", "syntaxstring": "DFTX (float)", "uniquename": "v_DFTX", "evalcost": {"default": 0}, "implementation": "caosVM::v_DFTX", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DFTY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "DFTY", "match": "DFTY", "type": "float", "syntaxstring": "DFTY (float)", "uniquename": "v_DFTY", "evalcost": {"default": 0}, "implementation": "caosVM::v_DFTY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_UFTX": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "UFTX", "match": "UFTX", "type": "float", "syntaxstring": "UFTX (float)", "uniquename": "v_UFTX", "evalcost": {"default": 0}, "implementation": "caosVM::v_UFTX", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_UFTY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "UFTY", "match": "UFTY", "type": "float", "syntaxstring": "UFTY (float)", "uniquename": "v_UFTY", "evalcost": {"default": 0}, "implementation": "caosVM::v_UFTY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HEDX": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "index", "type": "integer"}], "name": "HEDX", "match": "HEDX", "type": "float", "syntaxstring": "HEDX (float) index (integer)", "uniquename": "v_HEDX", "evalcost": {"default": 0}, "implementation": "caosVM::v_HEDX", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HEDY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "index", "type": "integer"}], "name": "HEDY", "match": "HEDY", "type": "float", "syntaxstring": "HEDY (float) index (integer)", "uniquename": "v_HEDY", "evalcost": {"default": 0}, "implementation": "caosVM::v_HEDY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MTHX": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "MTHX", "match": "MTHX", "type": "float", "syntaxstring": "MTHX (float)", "uniquename": "v_MTHX", "evalcost": {"default": 0}, "implementation": "caosVM::v_MTHX", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MTHY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "MTHY", "match": "MTHY", "type": "float", "syntaxstring": "MTHY (float)", "uniquename": "v_MTHY", "evalcost": {"default": 0}, "implementation": "caosVM::v_MTHY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_DBG_OUTS": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Outputs a string to the debug log.\n", "arguments": [{"name": "val", "type": "string"}], "name": "DBG: OUTS", "match": "OUTS", "type": "command", "syntaxstring": "DBG: OUTS (command) val (string)", "uniquename": "c_DBG_OUTS", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_OUTS", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_OUTV": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Outputs a decimal value to the debug log.\n", "arguments": [{"name": "val", "type": "decimal"}], "name": "DBG: OUTV", "match": "OUTV", "type": "command", "syntaxstring": "DBG: OUTV (command) val (decimal)", "uniquename": "c_DBG_OUTV", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_OUTV", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_UNID": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns the unique ID of the target agent.\nThis is currently no good for persisting.\n\nXXX: when serialization support works, this might well become good for\npersisting :)\n", "arguments": [], "name": "UNID", "match": "UNID", "type": "integer", "syntaxstring": "UNID (integer)", "uniquename": "v_UNID", "evalcost": {"default": 0}, "implementation": "caosVM::v_UNID", "pragma": {"variants": "c3 cv sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_AGNT": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns the agent with the given UNID, or NULL if agent has been deleted.\n", "arguments": [{"name": "id", "type": "integer"}], "name": "AGNT", "match": "AGNT", "type": "agent", "syntaxstring": "AGNT (agent) id (integer)", "uniquename": "v_AGNT", "evalcost": {"default": 0}, "implementation": "caosVM::v_AGNT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_MALLOC": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Dumps some random memory stats to stderr.\n", "arguments": [], "name": "DBG: MALLOC", "match": "MALLOC", "type": "command", "syntaxstring": "DBG: MALLOC (command)", "uniquename": "c_DBG_MALLOC", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_MALLOC", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_DUMP": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Dumps the current script's bytecode to stderr.\n", "arguments": [], "name": "DBG: DUMP", "match": "DUMP", "type": "command", "syntaxstring": "DBG: DUMP (command)", "uniquename": "c_DBG_DUMP", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_DUMP", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_TRACE": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Sets opcode trace level. Zero disables.\n", "arguments": [{"name": "level", "type": "integer"}], "name": "DBG: TRACE", "match": "TRACE", "type": "command", "syntaxstring": "DBG: TRACE (command) level (integer)", "uniquename": "c_DBG_TRACE", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_TRACE", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_MANN": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Looks up documentation on the given command and spits it on the current output stream.\n", "arguments": [{"name": "cmd", "type": "string"}], "name": "MANN", "match": "MANN", "type": "command", "syntaxstring": "MANN (command) cmd (string)", "uniquename": "c_MANN", "evalcost": {"default": 1}, "implementation": "caosVM::c_MANN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_DISA": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Dumps the \"bytecode\" of the indicated script to the current output channel.\nNote that this isn't really bytecode yet (though that's a possible future\nimprovement).\n\nIf the script is not found no output will be generated.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "DBG: DISA", "match": "DISA", "type": "command", "syntaxstring": "DBG: DISA (command) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "c_DBG_DISA", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_DISA", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_DBG_ASRT": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Blows up unless the given condition is true.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "DBG: ASRT", "match": "ASRT", "type": "command", "syntaxstring": "DBG: ASRT (command) condition (condition)", "uniquename": "c_DBG_ASRT", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_ASRT", "pragma": {"parser": "new AssertParser()", "variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_ASRF": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "(openc2e-only)\nBlows up unless the given condition is false.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "DBG: ASRF", "match": "ASRF", "type": "command", "syntaxstring": "DBG: ASRF (command) condition (condition)", "uniquename": "c_DBG_ASRF", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_ASRF", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_FAIL": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "(openc2e-only)\nBlows up.\n", "arguments": [], "name": "DBG: FAIL", "match": "FAIL", "type": "command", "syntaxstring": "DBG: FAIL (command)", "uniquename": "c_DBG_FAIL", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_FAIL", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DBG_IDNT": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "(openc2e-only)\nReturn a nicely-formatted string identifying the classifier of the agent,\nusing the catalogue to find the name if possible.\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "DBG: IDNT", "match": "IDNT", "type": "string", "syntaxstring": "DBG: IDNT (string) agent (agent)", "uniquename": "v_DBG_IDNT", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_IDNT", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_PROF": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Dumps the current agent profiling information to the output stream, in CSV format.\n", "arguments": [], "name": "DBG: PROF", "match": "PROF", "type": "command", "syntaxstring": "DBG: PROF (command)", "uniquename": "c_DBG_PROF", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_PROF", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_CPRO": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Clears the current agent profiling information.\n", "arguments": [], "name": "DBG: CPRO", "match": "CPRO", "type": "command", "syntaxstring": "DBG: CPRO (command)", "uniquename": "c_DBG_CPRO", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_CPRO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DBG_STOK": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns the bare token in 'bareword' as a string.\n", "arguments": [{"name": "bareword", "type": "bareword"}], "name": "DBG: STOK", "match": "STOK", "type": "string", "syntaxstring": "DBG: STOK (string) bareword (bareword)", "uniquename": "v_DBG_STOK", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_STOK", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_TSLC": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Sets the currently executing script's remaining timeslice value. This command\naffects only the current timeslice; future slices use the normal amount for\nthe dialect in question.\n", "arguments": [{"name": "timeslice", "type": "integer"}], "name": "DBG: TSLC", "match": "TSLC", "type": "command", "syntaxstring": "DBG: TSLC (command) timeslice (integer)", "uniquename": "c_DBG_TSLC", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::c_DBG_TSLC", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_DBG_TSLC": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns the number of ticks left in the current script's remaining timeslice.\n", "arguments": [], "name": "DBG: TSLC", "match": "TSLC", "type": "integer", "syntaxstring": "DBG: TSLC (integer)", "uniquename": "v_DBG_TSLC", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_TSLC", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DBG_SIZO": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns a human-readable profile of the sizes and allocation counts of\nvarious internal data structures\n", "arguments": [], "name": "DBG: SIZO", "match": "SIZO", "type": "string", "syntaxstring": "DBG: SIZO (string)", "uniquename": "v_DBG_SIZO", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_SIZO", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FILE_GLOB": {"filename": "caosVM_files.cpp", "category": "files", "description": "Globs the given journal directory (pass 0 for the world directory, or 1 for the main directory) for the\ngiven filespec (you can use wildcards, and descend into subdirectories using '..').\n\nThe result is placed on the input stream for reading with standard input commands (eg, INNI and INNL);\nthis consists of the number of results on the first line, and then the full filename paths to the matched\nfiles on the remaining lines.\n", "arguments": [{"name": "directory", "type": "integer"}, {"name": "filespec", "type": "string"}], "name": "FILE GLOB", "match": "GLOB", "type": "command", "syntaxstring": "FILE GLOB (command) directory (integer) filespec (string)", "uniquename": "c_FILE_GLOB", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_GLOB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_FILE_ICLO": {"filename": "caosVM_files.cpp", "category": "files", "description": "Disconnects everything from the input stream.\n", "arguments": [], "name": "FILE ICLO", "match": "ICLO", "type": "command", "syntaxstring": "FILE ICLO (command)", "uniquename": "c_FILE_ICLO", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_ICLO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_FILE_IOPE": {"filename": "caosVM_files.cpp", "category": "files", "description": "Puts the given filename in the given directory (pass 1 for the world directory, or 0 for the main\ndirectory) on the current VM's input stream, for use by INOK, INNL, INNI and INNF.\nIf a file is already open, it will be closed first.\n", "arguments": [{"name": "directory", "type": "integer"}, {"name": "filename", "type": "string"}], "name": "FILE IOPE", "match": "IOPE", "type": "command", "syntaxstring": "FILE IOPE (command) directory (integer) filename (string)", "uniquename": "c_FILE_IOPE", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_IOPE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_FILE_JDEL": {"filename": "caosVM_files.cpp", "category": "files", "description": "Removes the given file in the given directory (pass 1 for the world directory, or 0 for the main\ndirectory) immediately.\n", "arguments": [{"name": "directory", "type": "integer"}, {"name": "filename", "type": "string"}], "name": "FILE JDEL", "match": "JDEL", "type": "command", "syntaxstring": "FILE JDEL (command) directory (integer) filename (string)", "uniquename": "c_FILE_JDEL", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_JDEL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_FILE_OCLO": {"filename": "caosVM_files.cpp", "category": "files", "description": "Disconnects everything from the output stream.\n", "arguments": [], "name": "FILE OCLO", "match": "OCLO", "type": "command", "syntaxstring": "FILE OCLO (command)", "uniquename": "c_FILE_OCLO", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_OCLO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_FILE_OFLU": {"filename": "caosVM_files.cpp", "category": "files", "description": "Flushes the current output stream; if this is a file, all data in the buffer will be written to it.\n", "arguments": [], "name": "FILE OFLU", "match": "OFLU", "type": "command", "syntaxstring": "FILE OFLU (command)", "uniquename": "c_FILE_OFLU", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_OFLU", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_FILE_OOPE": {"filename": "caosVM_files.cpp", "category": "files", "description": "Puts the given filename in the given directory (pass 1 for the world directory, or 0 for the main\ndirectory) on the current VM's output stream.\nIf a file is already open, it will be closed first.\n", "arguments": [{"name": "directory", "type": "integer"}, {"name": "filename", "type": "string"}, {"name": "append", "type": "integer"}], "name": "FILE OOPE", "match": "OOPE", "type": "command", "syntaxstring": "FILE OOPE (command) directory (integer) filename (string) append (integer)", "uniquename": "c_FILE_OOPE", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_OOPE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_FVWM": {"filename": "caosVM_files.cpp", "category": "files", "description": "Returns an safe (not-in-use) filename for naming worlds and other saved files.\n", "arguments": [{"name": "name", "type": "string"}], "name": "FVWM", "match": "FVWM", "type": "string", "syntaxstring": "FVWM (string) name (string)", "uniquename": "v_FVWM", "evalcost": {"default": 0}, "implementation": "caosVM::v_FVWM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_INNF": {"filename": "caosVM_files.cpp", "category": "files", "description": "Fetches a float from the current input stream, or 0.0 if there is no data.\n", "arguments": [], "name": "INNF", "match": "INNF", "type": "float", "syntaxstring": "INNF (float)", "uniquename": "v_INNF", "evalcost": {"default": 0}, "implementation": "caosVM::v_INNF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_INNI": {"filename": "caosVM_files.cpp", "category": "files", "description": "Fetches an integer from the current input stream, or 0 if there is no data.\n", "arguments": [], "name": "INNI", "match": "INNI", "type": "integer", "syntaxstring": "INNI (integer)", "uniquename": "v_INNI", "evalcost": {"default": 0}, "implementation": "caosVM::v_INNI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_INNL": {"filename": "caosVM_files.cpp", "category": "files", "description": "Fetches a string of text from the input stream.\n", "arguments": [], "name": "INNL", "match": "INNL", "type": "string", "syntaxstring": "INNL (string)", "uniquename": "v_INNL", "evalcost": {"default": 0}, "implementation": "caosVM::v_INNL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_INOK": {"filename": "caosVM_files.cpp", "category": "files", "description": "Determines whether the current input stream is usable (0 or 1).\n", "arguments": [], "name": "INOK", "match": "INOK", "type": "integer", "syntaxstring": "INOK (integer)", "uniquename": "v_INOK", "evalcost": {"default": 0}, "implementation": "caosVM::v_INOK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_WEBB": {"filename": "caosVM_files.cpp", "category": "files", "description": "Launches the specified URL, prepended with 'http://' (so you'd only specify, for example, 'example.com/foo.html'), in the user's browser.\n", "arguments": [{"name": "url", "type": "string"}], "name": "WEBB", "match": "WEBB", "type": "command", "syntaxstring": "WEBB (command) url (string)", "uniquename": "c_WEBB", "evalcost": {"default": 1}, "implementation": "caosVM::c_WEBB", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DOIF": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Part of a DOIF/ELIF/ELSE/ENDI block. Jumps to the next part of the block if condition is false,\notherwise continues executing the script.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "DOIF", "match": "DOIF", "type": "command", "syntaxstring": "DOIF (command) condition (condition)", "uniquename": "c_DOIF", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_DOIF", "pragma": {"variants": "c1 c2 cv c3 sm", "stackdelta": "0"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ELIF": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Part of a DOIF/ELIF/ELSE/ENDI block. If none of the previous DOIF/ELIF conditions have been true, and condition evaluates to true, then the code in the ELIF block is executed.\nIf found outside a DOIF block, it is equivalent to a DOIF. If you take advantage of this behavior, fuzzie is of the opinion that you should be shot.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "ELIF", "match": "ELIF", "type": "command", "syntaxstring": "ELIF (command) condition (condition)", "uniquename": "c_ELIF", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ELIF", "pragma": {"variants": "all", "stackdelta": "0"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ELSE": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Part of a DOIF/ELIF/ELSE/ENDI block. If ELSE is present, it is jumped to when none of the previous DOIF/ELIF conditions are true.\n", "arguments": [], "name": "ELSE", "match": "ELSE", "type": "command", "syntaxstring": "ELSE (command)", "uniquename": "c_ELSE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ELSE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ENDI": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The end of a DOIF/ELIF/ELSE/ENDI block.\n", "arguments": [], "name": "ENDI", "match": "ENDI", "type": "command", "syntaxstring": "ENDI (command)", "uniquename": "c_ENDI", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ENDI", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_REPS": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The start of a REPS...REPE loop. The body of the loop will be executed (reps) times.\n", "arguments": [{"name": "reps", "type": "integer"}], "name": "REPS", "match": "REPS", "type": "command", "syntaxstring": "REPS (command) reps (integer)", "uniquename": "c_REPS", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_REPS", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_REPE": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The end of a REPS...REPE loop.\n", "arguments": [], "name": "REPE", "match": "REPE", "type": "command", "syntaxstring": "REPE (command)", "uniquename": "c_REPE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_REPE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_LOOP": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The start of a LOOP...EVER or LOOP...UNTL loop.\n", "arguments": [], "name": "LOOP", "match": "LOOP", "type": "command", "syntaxstring": "LOOP (command)", "uniquename": "c_LOOP", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_LOOP", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_EVER": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Jumps back to the matching LOOP, no matter what.\n", "arguments": [], "name": "EVER", "match": "EVER", "type": "command", "syntaxstring": "EVER (command)", "uniquename": "c_EVER", "evalcost": {"default": 1}, "implementation": "caosVM::c_EVER", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_UNTL": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Jumps back to the matching LOOP unless the condition evaluates to true.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "UNTL", "match": "UNTL", "type": "command", "syntaxstring": "UNTL (command) condition (condition)", "uniquename": "c_UNTL", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_UNTL", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_GSUB": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Jumps to a subroutine defined by SUBR with label (label).\n", "arguments": [{"name": "label", "type": "label"}], "name": "GSUB", "match": "GSUB", "type": "command", "syntaxstring": "GSUB (command) label (label)", "uniquename": "c_GSUB", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_GSUB", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SUBR": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Defines the start of a subroute to be called with GSUB, with label (label).\nIf the command is encountered during execution, it acts like a STOP.\n", "arguments": [{"name": "label", "type": "label"}], "name": "SUBR", "match": "SUBR", "type": "command", "syntaxstring": "SUBR (command) label (label)", "uniquename": "c_SUBR", "evalcost": {"default": 1}, "implementation": "caosVM::c_SUBR", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_RETN": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Returns from a subroutine called with GSUB.\n", "arguments": [], "name": "RETN", "match": "RETN", "type": "command", "syntaxstring": "RETN (command)", "uniquename": "c_RETN", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_RETN", "pragma": {"stackdelta": "any", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_NEXT": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The end of an ENUM...NEXT loop.\n", "arguments": [], "name": "NEXT", "match": "NEXT", "type": "command", "syntaxstring": "NEXT (command)", "uniquename": "c_NEXT", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_NEXT", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ENUM": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Loops through all agents with the given classifier.  0 on any field is a\nwildcard. The loop body is terminated by a NEXT.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "ENUM", "match": "ENUM", "type": "command", "syntaxstring": "ENUM (command) family (integer) genus (integer) species (integer)", "uniquename": "c_ENUM", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ENUM", "pragma": {"stackdelta": "any", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_ESEE": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Simular to ENUM, but iterates through agents visible to OWNR, or visible to TARG in an install script.\nAn agent can be seen if it is within the range set by RNGE, and is visible (this includes the PERM value\nof walls that lie between them, and, if the agent is a Creature, it not having the 'invisible' attribute).\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "ESEE", "match": "ESEE", "type": "command", "syntaxstring": "ESEE (command) family (integer) genus (integer) species (integer)", "uniquename": "c_ESEE", "evalcost": {"default": 1}, "implementation": "caosVM::c_ESEE", "pragma": {"stackdelta": "any", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_ETCH": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Similar to ENUM, but iterates through the agents OWNR is touching, or TARG is touching in an install script.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "ETCH", "match": "ETCH", "type": "command", "syntaxstring": "ETCH (command) family (integer) genus (integer) species (integer)", "uniquename": "c_ETCH", "evalcost": {"default": 1}, "implementation": "caosVM::c_ETCH", "pragma": {"stackdelta": "any", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_EPAS": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Similar to ENUM, but iterates through the OWNR vehicle's passengers.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "EPAS", "match": "EPAS", "type": "command", "syntaxstring": "EPAS (command) family (integer) genus (integer) species (integer)", "uniquename": "c_EPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_EPAS", "pragma": {"stackdelta": "any"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_ECON": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Loops through all the agents in the connective system containing the given agent.\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "ECON", "match": "ECON", "type": "command", "syntaxstring": "ECON (command) agent (agent)", "uniquename": "c_ECON", "evalcost": {"default": 1}, "implementation": "caosVM::c_ECON", "pragma": {"stackdelta": "any"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_CALL": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Calls script_no on OWNR, then waits for it to return. The invoked script\nwill inherit the caller's INST setting, but any changes it makes to it will\nbe reversed once it returns - so eg if you call a script when in INST mode,\nit calls OVER and returns, you'll still be in INST.\n\nScript variables (VAxx) will not be preserved - you'll have to use OVxx\nfor any parameters.\n", "arguments": [{"name": "script_no", "type": "integer"}, {"name": "p1", "type": "any"}, {"name": "p2", "type": "any"}], "name": "CALL", "match": "CALL", "type": "command", "syntaxstring": "CALL (command) script_no (integer) p1 (any) p2 (any)", "uniquename": "c_CALL", "evalcost": {"default": 1}, "implementation": "caosVM::c_CALL", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_CAOS": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Runs commands as caos code immediately. If inline, copy _IT_ VAxx TARG OWNR, etc. If state_trans, copy FROM and\nOWNR.  If an error occurs, it catches it and stuffs it in the report. (XXX: non-conforming)\n", "arguments": [{"name": "inline", "type": "integer"}, {"name": "state_trans", "type": "integer"}, {"name": "p1", "type": "anything"}, {"name": "p2", "type": "anything"}, {"name": "commands", "type": "string"}, {"name": "throws", "type": "integer"}, {"name": "catches", "type": "integer"}, {"name": "report", "type": "variable"}], "name": "CAOS", "match": "CAOS", "type": "string", "syntaxstring": "CAOS (string) inline (integer) state_trans (integer) p1 (anything) p2 (anything) commands (string) throws (integer) catches (integer) report (variable)", "uniquename": "v_CAOS", "evalcost": {"default": 0}, "implementation": "caosVM::v_CAOS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "c_GENE_CLON": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Clone a genome. A new moniker is created.\n", "arguments": [{"name": "dest_agent", "type": "agent"}, {"name": "dest_slot", "type": "integer"}, {"name": "src_agent", "type": "agent"}, {"name": "src_slot", "type": "integer"}], "name": "GENE CLON", "match": "CLON", "type": "command", "syntaxstring": "GENE CLON (command) dest_agent (agent) dest_slot (integer) src_agent (agent) src_slot (integer)", "uniquename": "c_GENE_CLON", "namespace": "gene", "evalcost": {"default": 1}, "implementation": "caosVM::c_GENE_CLON", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_GENE_CROS": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Cross two genomes, creating a new one.\n", "arguments": [{"name": "dest_agent", "type": "agent"}, {"name": "dest_slot", "type": "integer"}, {"name": "mum_agent", "type": "agent"}, {"name": "mum_slot", "type": "integer"}, {"name": "dad_agent", "type": "agent"}, {"name": "dad_slot", "type": "integer"}, {"name": "mum_mutation_chance", "type": "integer"}, {"name": "mum_mutation_degree", "type": "integer"}, {"name": "dad_mutation_chance", "type": "integer"}, {"name": "dad_mutation_degree", "type": "integer"}], "name": "GENE CROS", "match": "CROS", "type": "command", "syntaxstring": "GENE CROS (command) dest_agent (agent) dest_slot (integer) mum_agent (agent) mum_slot (integer) dad_agent (agent) dad_slot (integer) mum_mutation_chance (integer) mum_mutation_degree (integer) dad_mutation_chance (integer) dad_mutation_degree (integer)", "uniquename": "c_GENE_CROS", "namespace": "gene", "evalcost": {"default": 1}, "implementation": "caosVM::c_GENE_CROS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -10}, "c_GENE_KILL": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Delete a genome from a slot.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "slot", "type": "integer"}], "name": "GENE KILL", "match": "KILL", "type": "command", "syntaxstring": "GENE KILL (command) agent (agent) slot (integer)", "uniquename": "c_GENE_KILL", "namespace": "gene", "evalcost": {"default": 1}, "implementation": "caosVM::c_GENE_KILL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_GENE_LOAD": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Load a genome file into a slot. You can use * and ? wildcards in the filename.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "slot", "type": "integer"}, {"name": "genefile", "type": "string"}], "name": "GENE LOAD", "match": "LOAD", "type": "command", "syntaxstring": "GENE LOAD (command) agent (agent) slot (integer) genefile (string)", "uniquename": "c_GENE_LOAD", "namespace": "gene", "evalcost": {"default": 1}, "implementation": "caosVM::c_GENE_LOAD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_GENE_MOVE": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Move a genome to another slot.\n", "arguments": [{"name": "dest_agent", "type": "agent"}, {"name": "dest_slot", "type": "integer"}, {"name": "src_agent", "type": "agent"}, {"name": "src_slot", "type": "integer"}], "name": "GENE MOVE", "match": "MOVE", "type": "command", "syntaxstring": "GENE MOVE (command) dest_agent (agent) dest_slot (integer) src_agent (agent) src_slot (integer)", "uniquename": "c_GENE_MOVE", "namespace": "gene", "evalcost": {"default": 1}, "implementation": "caosVM::c_GENE_MOVE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_GTOS": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Return the moniker stored in the given gene slot of the target agent.\n", "arguments": [{"name": "slot", "type": "integer"}], "name": "GTOS", "match": "GTOS", "type": "string", "syntaxstring": "GTOS (string) slot (integer)", "uniquename": "v_GTOS", "evalcost": {"default": 0}, "implementation": "caosVM::v_GTOS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MTOA": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Return the agent which has the given moniker stored in a gene slot, or NULL if none.\n", "arguments": [{"name": "moniker", "type": "string"}], "name": "MTOA", "match": "MTOA", "type": "agent", "syntaxstring": "MTOA (agent) moniker (string)", "uniquename": "v_MTOA", "evalcost": {"default": 0}, "implementation": "caosVM::v_MTOA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MTOC": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Return the live creature with the given moniker, or NULL if none.\n", "arguments": [{"name": "moniker", "type": "string"}], "name": "MTOC", "match": "MTOC", "type": "agent", "syntaxstring": "MTOC (agent) moniker (string)", "uniquename": "v_MTOC", "evalcost": {"default": 0}, "implementation": "caosVM::v_MTOC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_CAGE": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST CAGE", "match": "CAGE", "type": "integer", "syntaxstring": "HIST CAGE (integer) moniker (string) event (integer)", "uniquename": "v_HIST_CAGE", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_CAGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_COUN": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST COUN", "match": "COUN", "type": "integer", "syntaxstring": "HIST COUN (integer) moniker (string)", "uniquename": "v_HIST_COUN", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_COUN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_CROS": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST CROS", "match": "CROS", "type": "integer", "syntaxstring": "HIST CROS (integer) moniker (string)", "uniquename": "v_HIST_CROS", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_CROS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_HIST_EVNT": {"filename": "caosVM_history.cpp", "category": "history", "description": "Fire a life event of the specified type with the specified moniker.\n", "arguments": [{"name": "moniker", "type": "string"}, {"name": "type", "type": "integer"}, {"name": "relatedmoniker1", "type": "string"}, {"name": "relatedmoniker2", "type": "string"}], "name": "HIST EVNT", "match": "EVNT", "type": "command", "syntaxstring": "HIST EVNT (command) moniker (string) type (integer) relatedmoniker1 (string) relatedmoniker2 (string)", "uniquename": "c_HIST_EVNT", "namespace": "hist", "evalcost": {"default": 1}, "implementation": "caosVM::c_HIST_EVNT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_HIST_FIND": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}, {"name": "from", "type": "integer"}], "name": "HIST FIND", "match": "FIND", "type": "integer", "syntaxstring": "HIST FIND (integer) moniker (string) event (integer) from (integer)", "uniquename": "v_HIST_FIND", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_FIND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_HIST_FINR": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}, {"name": "from", "type": "integer"}], "name": "HIST FINR", "match": "FINR", "type": "integer", "syntaxstring": "HIST FINR (integer) moniker (string) event (integer) from (integer)", "uniquename": "v_HIST_FINR", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_FINR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_HIST_FOTO": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST FOTO", "match": "FOTO", "type": "string", "syntaxstring": "HIST FOTO (string) moniker (string) event (integer)", "uniquename": "v_HIST_FOTO", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_FOTO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_HIST_FOTO": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}, {"name": "photo", "type": "string"}], "name": "HIST FOTO", "match": "FOTO", "type": "command", "syntaxstring": "HIST FOTO (command) moniker (string) event (integer) photo (string)", "uniquename": "c_HIST_FOTO", "namespace": "hist", "evalcost": {"default": 1}, "implementation": "caosVM::c_HIST_FOTO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_HIST_GEND": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST GEND", "match": "GEND", "type": "integer", "syntaxstring": "HIST GEND (integer) moniker (string)", "uniquename": "v_HIST_GEND", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_GEND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_GNUS": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST GNUS", "match": "GNUS", "type": "integer", "syntaxstring": "HIST GNUS (integer) moniker (string)", "uniquename": "v_HIST_GNUS", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_GNUS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_MON1": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST MON1", "match": "MON1", "type": "string", "syntaxstring": "HIST MON1 (string) moniker (string) event (integer)", "uniquename": "v_HIST_MON1", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_MON1", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_MON2": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST MON2", "match": "MON2", "type": "string", "syntaxstring": "HIST MON2 (string) moniker (string) event (integer)", "uniquename": "v_HIST_MON2", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_MON2", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_MUTE": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST MUTE", "match": "MUTE", "type": "integer", "syntaxstring": "HIST MUTE (integer) moniker (string)", "uniquename": "v_HIST_MUTE", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_MUTE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_NAME": {"filename": "caosVM_history.cpp", "category": "history", "description": "Return the name of the creature with the given moniker.\n", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST NAME", "match": "NAME", "type": "string", "syntaxstring": "HIST NAME (string) moniker (string)", "uniquename": "v_HIST_NAME", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_NAME", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_HIST_NAME": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "name", "type": "string"}], "name": "HIST NAME", "match": "NAME", "type": "command", "syntaxstring": "HIST NAME (command) moniker (string) name (string)", "uniquename": "c_HIST_NAME", "namespace": "hist", "evalcost": {"default": 1}, "implementation": "caosVM::c_HIST_NAME", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_HIST_NETU": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST NETU", "match": "NETU", "type": "string", "syntaxstring": "HIST NETU (string) moniker (string) event (integer)", "uniquename": "v_HIST_NETU", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_NETU", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_NEXT": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST NEXT", "match": "NEXT", "type": "string", "syntaxstring": "HIST NEXT (string) moniker (string)", "uniquename": "v_HIST_NEXT", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_NEXT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_PREV": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST PREV", "match": "PREV", "type": "string", "syntaxstring": "HIST PREV (string) moniker (string)", "uniquename": "v_HIST_PREV", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_PREV", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_RTIM": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST RTIM", "match": "RTIM", "type": "integer", "syntaxstring": "HIST RTIM (integer) moniker (string) event (integer)", "uniquename": "v_HIST_RTIM", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_RTIM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_TAGE": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST TAGE", "match": "TAGE", "type": "integer", "syntaxstring": "HIST TAGE (integer) moniker (string) event (integer)", "uniquename": "v_HIST_TAGE", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_TAGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_TYPE": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST TYPE", "match": "TYPE", "type": "integer", "syntaxstring": "HIST TYPE (integer) moniker (string) event (integer)", "uniquename": "v_HIST_TYPE", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_TYPE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_HIST_UTXT": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}, {"name": "value", "type": "string"}], "name": "HIST UTXT", "match": "UTXT", "type": "command", "syntaxstring": "HIST UTXT (command) moniker (string) event (integer) value (string)", "uniquename": "c_HIST_UTXT", "namespace": "hist", "evalcost": {"default": 1}, "implementation": "caosVM::c_HIST_UTXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_HIST_UTXT": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST UTXT", "match": "UTXT", "type": "string", "syntaxstring": "HIST UTXT (string) moniker (string) event (integer)", "uniquename": "v_HIST_UTXT", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_UTXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_VARI": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST VARI", "match": "VARI", "type": "integer", "syntaxstring": "HIST VARI (integer) moniker (string)", "uniquename": "v_HIST_VARI", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_VARI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_HIST_WIPE": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST WIPE", "match": "WIPE", "type": "command", "syntaxstring": "HIST WIPE (command) moniker (string)", "uniquename": "c_HIST_WIPE", "namespace": "hist", "evalcost": {"default": 1}, "implementation": "caosVM::c_HIST_WIPE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_WNAM": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST WNAM", "match": "WNAM", "type": "string", "syntaxstring": "HIST WNAM (string) moniker (string) event (integer)", "uniquename": "v_HIST_WNAM", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_WNAM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_WTIK": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST WTIK", "match": "WTIK", "type": "integer", "syntaxstring": "HIST WTIK (integer) moniker (string) event (integer)", "uniquename": "v_HIST_WTIK", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_WTIK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_WUID": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST WUID", "match": "WUID", "type": "string", "syntaxstring": "HIST WUID (string) moniker (string) event (integer)", "uniquename": "v_HIST_WUID", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_WUID", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_WVET": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST WVET", "match": "WVET", "type": "integer", "syntaxstring": "HIST WVET (integer) moniker (string)", "uniquename": "v_HIST_WVET", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_WVET", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_OOWW": {"filename": "caosVM_history.cpp", "category": "history", "description": "Return the current status of the given moniker.\n0 is unknown (never existed?), 1 is in slot, 2 is NEW: CREA creature, 3 is BORN creature, 4 is exported, 5 is dead, 6 is gone (no body), 7 is unreferenced.\n", "arguments": [{"name": "moniker", "type": "string"}], "name": "OOWW", "match": "OOWW", "type": "integer", "syntaxstring": "OOWW (integer) moniker (string)", "uniquename": "v_OOWW", "evalcost": {"default": 0}, "implementation": "caosVM::v_OOWW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_CLAC": {"filename": "caosVM_input.cpp", "category": "input", "description": "Sets the type of message sent to the TARG agent when clicked.  If set to -1, no message\nwill be sent.  Using this command will override and reset the value set with CLIK.\n", "arguments": [{"name": "message", "type": "integer"}], "name": "CLAC", "match": "CLAC", "type": "command", "syntaxstring": "CLAC (command) message (integer)", "uniquename": "c_CLAC", "evalcost": {"default": 1}, "implementation": "caosVM::c_CLAC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_CLAC": {"filename": "caosVM_input.cpp", "category": "input", "arguments": [], "name": "CLAC", "match": "CLAC", "type": "integer", "syntaxstring": "CLAC (integer)", "uniquename": "v_CLAC", "evalcost": {"default": 0}, "implementation": "caosVM::v_CLAC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_CLIK": {"filename": "caosVM_input.cpp", "category": "input", "description": "Sets three different message types that will sent to the TARG agent when clicked, on a\nrotating basis.  Setting any of the three types to -1 will cause it to be ignored. Using\nthis command will override and reset the value set by CLAC.\n", "arguments": [{"name": "msg1", "type": "integer"}, {"name": "msg2", "type": "integer"}, {"name": "msg3", "type": "integer"}], "name": "CLIK", "match": "CLIK", "type": "command", "syntaxstring": "CLIK (command) msg1 (integer) msg2 (integer) msg3 (integer)", "uniquename": "c_CLIK", "evalcost": {"default": 1}, "implementation": "caosVM::c_CLIK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_CLIK": {"filename": "caosVM_input.cpp", "category": "input", "arguments": [{"name": "data", "type": "integer"}], "name": "CLIK", "match": "CLIK", "type": "integer", "syntaxstring": "CLIK (integer) data (integer)", "uniquename": "v_CLIK", "evalcost": {"default": 0}, "implementation": "caosVM::v_CLIK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_IMSK": {"filename": "caosVM_input.cpp", "category": "input", "description": "Sets the input event flags for the target agent, which tell the engine which events the\nagent requires scripts to be fired for. For example, setting the \"key up\" flag means the\ntarget agent has the relevant script executed every time a key is released.\n\nAdd the following values together to calculate the flags parameter: 1 for key down, 2 for key up, 4 for mouse move, 8 for mouse down, 16 for mouse up, 32 for mouse wheel movement and 64 for (translated) keypress.\n\nTODO: link to the script details (event numbers and parameters).\n", "arguments": [{"name": "flags", "type": "integer"}], "name": "IMSK", "match": "IMSK", "type": "command", "syntaxstring": "IMSK (command) flags (integer)", "uniquename": "c_IMSK", "evalcost": {"default": 1}, "implementation": "caosVM::c_IMSK", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_IMSK": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns the input event flags for the target agent. See the IMSK command for details.\n", "arguments": [], "name": "IMSK", "match": "IMSK", "type": "integer", "syntaxstring": "IMSK (integer)", "uniquename": "v_IMSK", "evalcost": {"default": 0}, "implementation": "caosVM::v_IMSK", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_KEYD": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns 1 if the specified key is held down, or 0 otherwise.\n", "arguments": [{"name": "keycode", "type": "integer"}], "name": "KEYD", "match": "KEYD", "type": "integer", "syntaxstring": "KEYD (integer) keycode (integer)", "uniquename": "v_KEYD", "evalcost": {"default": 0}, "implementation": "caosVM::v_KEYD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HOTS": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns the agent that is currently underneath the Hand.\nNB: this command is not a real c1/c2 command, backported for convenience\n", "arguments": [], "name": "HOTS", "match": "HOTS", "type": "agent", "syntaxstring": "HOTS (agent)", "uniquename": "v_HOTS", "evalcost": {"default": 0}, "implementation": "caosVM::v_HOTS", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HOTP": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns the PART of the agent (given by HOTS) that is currently underneath the Hand.\n\nTransparency of the parts themselves is ignored.\n", "arguments": [], "name": "HOTP", "match": "HOTP", "type": "integer", "syntaxstring": "HOTP (integer)", "uniquename": "v_HOTP", "evalcost": {"default": 0}, "implementation": "caosVM::v_HOTP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PURE": {"filename": "caosVM_input.cpp", "category": "input", "description": "Turns the normal pointing and clicking behavior of the Hand on (0) and off (1).\n\nIf set to off, CLIK and CLAC will not work, and clicking events must be handled by IMSK.\n", "arguments": [{"name": "value", "type": "integer"}], "name": "PURE", "match": "PURE", "type": "command", "syntaxstring": "PURE (command) value (integer)", "uniquename": "c_PURE", "evalcost": {"default": 1}, "implementation": "caosVM::c_PURE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PURE": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns whether the normal pointing and clicking behavior of the Hand is on or off.\n", "arguments": [], "name": "PURE", "match": "PURE", "type": "integer", "syntaxstring": "PURE (integer)", "uniquename": "v_PURE", "evalcost": {"default": 0}, "implementation": "caosVM::v_PURE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MOPX": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns the current X coordinate of the Hand in the world.\n", "arguments": [], "name": "MOPX", "match": "MOPX", "type": "integer", "syntaxstring": "MOPX (integer)", "uniquename": "v_MOPX", "evalcost": {"default": 0}, "implementation": "caosVM::v_MOPX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MOPY": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns the current Y coordinate of the Hand in the world.\n", "arguments": [], "name": "MOPY", "match": "MOPY", "type": "integer", "syntaxstring": "MOPY (integer)", "uniquename": "v_MOPY", "evalcost": {"default": 0}, "implementation": "caosVM::v_MOPY", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_SCOL": {"filename": "caosVM_input.cpp", "category": "input", "arguments": [{"name": "andmask", "type": "integer"}, {"name": "eormask", "type": "integer"}, {"name": "upspeeds", "type": "bytestring"}, {"name": "downspeeds", "type": "bytestring"}], "name": "SCOL", "match": "SCOL", "type": "integer", "syntaxstring": "SCOL (integer) andmask (integer) eormask (integer) upspeeds (bytestring) downspeeds (bytestring)", "uniquename": "v_SCOL", "evalcost": {"default": 0}, "implementation": "caosVM::v_SCOL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_SCRL": {"filename": "caosVM_input.cpp", "category": "input", "description": "Turns on (1) or off (0) keyboard/mouse scrolling.\n", "arguments": [{"name": "enable", "type": "integer"}], "name": "SCRL", "match": "SCRL", "type": "command", "syntaxstring": "SCRL (command) enable (integer)", "uniquename": "c_SCRL", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCRL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_MOUS": {"filename": "caosVM_input.cpp", "category": "input", "arguments": [{"name": "behaviour", "type": "integer"}], "name": "MOUS", "match": "MOUS", "type": "command", "syntaxstring": "MOUS (command) behaviour (integer)", "uniquename": "c_MOUS", "evalcost": {"default": 1}, "implementation": "caosVM::c_MOUS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ADDM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Creates a metaroom with the given height and width, at the coordinates given.  Returns the id of the new metaroom.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "width", "type": "integer"}, {"name": "height", "type": "integer"}, {"name": "background", "type": "string"}], "name": "ADDM", "match": "ADDM", "type": "integer", "syntaxstring": "ADDM (integer) x (integer) y (integer) width (integer) height (integer) background (string)", "uniquename": "v_ADDM", "evalcost": {"default": 0}, "implementation": "caosVM::v_ADDM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_ADDB": {"filename": "caosVM_map.cpp", "category": "map", "description": "Adds a new background to an existing metaroom, to be displayed with BKGD.\n", "arguments": [{"name": "metaroom_id", "type": "integer"}, {"name": "background", "type": "string"}], "name": "ADDB", "match": "ADDB", "type": "command", "syntaxstring": "ADDB (command) metaroom_id (integer) background (string)", "uniquename": "c_ADDB", "evalcost": {"default": 1}, "implementation": "caosVM::c_ADDB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_BRMI": {"filename": "caosVM_map.cpp", "category": "map", "description": "Sets the base ID numbers for new metarooms and rooms to the given values.\n", "arguments": [{"name": "metaroom_base", "type": "integer"}, {"name": "room_base", "type": "integer"}], "name": "BRMI", "match": "BRMI", "type": "command", "syntaxstring": "BRMI (command) metaroom_base (integer) room_base (integer)", "uniquename": "c_BRMI", "evalcost": {"default": 1}, "implementation": "caosVM::c_BRMI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_MAPD": {"filename": "caosVM_map.cpp", "category": "map", "description": "Sets the world map dimensions, inside which metarooms are placed.\n", "arguments": [{"name": "width", "type": "integer"}, {"name": "height", "type": "integer"}], "name": "MAPD", "match": "MAPD", "type": "command", "syntaxstring": "MAPD (command) width (integer) height (integer)", "uniquename": "c_MAPD", "evalcost": {"default": 1}, "implementation": "caosVM::c_MAPD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_MAPW": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the width of the world map.\n", "arguments": [], "name": "MAPW", "match": "MAPW", "type": "integer", "syntaxstring": "MAPW (integer)", "uniquename": "v_MAPW", "evalcost": {"default": 0}, "implementation": "caosVM::v_MAPW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MAPH": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the height of the world map.\n", "arguments": [], "name": "MAPH", "match": "MAPH", "type": "integer", "syntaxstring": "MAPH (integer)", "uniquename": "v_MAPH", "evalcost": {"default": 0}, "implementation": "caosVM::v_MAPH", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MAPK": {"filename": "caosVM_map.cpp", "category": "map", "description": "Resets and empties the world map.\n", "arguments": [], "name": "MAPK", "match": "MAPK", "type": "command", "syntaxstring": "MAPK (command)", "uniquename": "c_MAPK", "evalcost": {"default": 1}, "implementation": "caosVM::c_MAPK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_BKDS": {"filename": "caosVM_map.cpp", "category": "map", "description": "Determines all of the background names in use by the given metaroom, and returns them in a comma-seperated string.\n", "arguments": [{"name": "metaroomid", "type": "integer"}], "name": "BKDS", "match": "BKDS", "type": "string", "syntaxstring": "BKDS (string) metaroomid (integer)", "uniquename": "v_BKDS", "evalcost": {"default": 0}, "implementation": "caosVM::v_BKDS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ADDR": {"filename": "caosVM_map.cpp", "category": "map", "description": "Makes a new room inside the given metaroom.  Rooms can have sloped floors and ceilings, but only vertical walls.\nThe id of the new room is returned.\n", "arguments": [{"name": "metaroomid", "type": "integer"}, {"name": "x_left", "type": "integer"}, {"name": "x_right", "type": "integer"}, {"name": "y_left_ceiling", "type": "integer"}, {"name": "y_right_ceiling", "type": "integer"}, {"name": "y_left_floor", "type": "integer"}, {"name": "y_right_floor", "type": "integer"}], "name": "ADDR", "match": "ADDR", "type": "integer", "syntaxstring": "ADDR (integer) metaroomid (integer) x_left (integer) x_right (integer) y_left_ceiling (integer) y_right_ceiling (integer) y_left_floor (integer) y_right_floor (integer)", "uniquename": "v_ADDR", "evalcost": {"default": 0}, "implementation": "caosVM::v_ADDR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "c_RTYP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Defines the 'type' of the given room.  The types vary with different games.\n", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "roomtype", "type": "integer"}], "name": "RTYP", "match": "RTYP", "type": "command", "syntaxstring": "RTYP (command) roomid (integer) roomtype (integer)", "uniquename": "c_RTYP", "evalcost": {"default": 1}, "implementation": "caosVM::c_RTYP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_RTYP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the 'type' of the given room, or -1 if 'roomid' is invalid.\n", "arguments": [{"name": "roomid", "type": "integer"}], "name": "RTYP", "match": "RTYP", "type": "integer", "syntaxstring": "RTYP (integer) roomid (integer)", "uniquename": "v_RTYP", "evalcost": {"default": 0}, "implementation": "caosVM::v_RTYP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DOOR": {"filename": "caosVM_map.cpp", "category": "map", "description": "Sets how permeable the door between the two given rooms will be. (See PERM).\n", "arguments": [{"name": "room1", "type": "integer"}, {"name": "room2", "type": "integer"}, {"name": "perm", "type": "integer"}], "name": "DOOR", "match": "DOOR", "type": "command", "syntaxstring": "DOOR (command) room1 (integer) room2 (integer) perm (integer)", "uniquename": "c_DOOR", "evalcost": {"default": 1}, "implementation": "caosVM::c_DOOR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_DOOR": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "room1", "type": "integer"}, {"name": "room2", "type": "integer"}], "name": "DOOR", "match": "DOOR", "type": "integer", "syntaxstring": "DOOR (integer) room1 (integer) room2 (integer)", "uniquename": "v_DOOR", "evalcost": {"default": 0}, "implementation": "caosVM::v_DOOR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_RATE": {"filename": "caosVM_map.cpp", "category": "map", "description": "Defines the rates of the given CA in the given room.  'gain' defines how easily the CA will be absorbed from\nagents inside the room, 'loss' defines how much will be lost into the air, and 'diffusion' defines how easily it\nwill spread to other rooms.\n", "arguments": [{"name": "roomtype", "type": "integer"}, {"name": "caindex", "type": "integer"}, {"name": "gain", "type": "float"}, {"name": "loss", "type": "float"}, {"name": "diffusion", "type": "float"}], "name": "RATE", "match": "RATE", "type": "command", "syntaxstring": "RATE (command) roomtype (integer) caindex (integer) gain (float) loss (float) diffusion (float)", "uniquename": "c_RATE", "evalcost": {"default": 1}, "implementation": "caosVM::c_RATE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "v_ROOM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the room that contains the given agent (jugding by its center).\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "ROOM", "match": "ROOM", "type": "integer", "syntaxstring": "ROOM (integer) agent (agent)", "uniquename": "v_ROOM", "evalcost": {"default": 0}, "implementation": "caosVM::v_ROOM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_LEFT": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the left constant (0).\n", "arguments": [], "name": "LEFT", "match": "LEFT", "type": "integer", "syntaxstring": "LEFT (integer)", "uniquename": "v_LEFT", "evalcost": {"default": 0}, "implementation": "caosVM::v_LEFT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_RGHT": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the right constant (1).\n", "arguments": [], "name": "RGHT", "match": "RGHT", "type": "integer", "syntaxstring": "RGHT (integer)", "uniquename": "v_RGHT", "evalcost": {"default": 0}, "implementation": "caosVM::v_RGHT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v__UP_": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the up constant (2).\n", "arguments": [], "name": "_UP_", "match": "_UP_", "type": "integer", "syntaxstring": "_UP_ (integer)", "uniquename": "v__UP_", "evalcost": {"default": 0}, "implementation": "caosVM::v_UP", "pragma": {"implementation": "caosVM::v_UP"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DOWN": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the down constant (3).\n", "arguments": [], "name": "DOWN", "match": "DOWN", "type": "integer", "syntaxstring": "DOWN (integer)", "uniquename": "v_DOWN", "evalcost": {"default": 0}, "implementation": "caosVM::v_DOWN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PROP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Defines the level of the given CA in the given room.  Valid settings are between 0 and 1; if higher, it will be\nreset to 1.\n", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "caindex", "type": "integer"}, {"name": "cavalue", "type": "float"}], "name": "PROP", "match": "PROP", "type": "command", "syntaxstring": "PROP (command) roomid (integer) caindex (integer) cavalue (float)", "uniquename": "c_PROP", "evalcost": {"default": 1}, "implementation": "caosVM::c_PROP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_PROP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the level of the given CA in the given room, or 0 if a roomid of -1 is passed.\n", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "caindex", "type": "integer"}], "name": "PROP", "match": "PROP", "type": "float", "syntaxstring": "PROP (float) roomid (integer) caindex (integer)", "uniquename": "v_PROP", "evalcost": {"default": 0}, "implementation": "caosVM::v_PROP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PERM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Sets the TARG agent's permiability.  Valid settings are between 1 and 100.\n", "arguments": [{"name": "perm", "type": "integer"}], "name": "PERM", "match": "PERM", "type": "command", "syntaxstring": "PERM (command) perm (integer)", "uniquename": "c_PERM", "evalcost": {"default": 1}, "implementation": "caosVM::c_PERM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PERM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the TARG agent's permiability.\n", "arguments": [], "name": "PERM", "match": "PERM", "type": "integer", "syntaxstring": "PERM (integer)", "uniquename": "v_PERM", "evalcost": {"default": 0}, "implementation": "caosVM::v_PERM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_GRAP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the id of the room at the coordinates (x, y), or -1 if nothing's there.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "GRAP", "match": "GRAP", "type": "integer", "syntaxstring": "GRAP (integer) x (float) y (float)", "uniquename": "v_GRAP", "evalcost": {"default": 0}, "implementation": "caosVM::v_GRAP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_GMAP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the id of the metaroom at the coordinates (x, y), or -1 if nothing's there.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "GMAP", "match": "GMAP", "type": "integer", "syntaxstring": "GMAP (integer) x (float) y (float)", "uniquename": "v_GMAP", "evalcost": {"default": 0}, "implementation": "caosVM::v_GMAP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_LINK": {"filename": "caosVM_map.cpp", "category": "map", "description": "Defines the permeability of the link between the two given rooms.  This is used for CA diffusion.\n", "arguments": [{"name": "room1", "type": "integer"}, {"name": "room2", "type": "integer"}, {"name": "perm", "type": "integer"}], "name": "LINK", "match": "LINK", "type": "command", "syntaxstring": "LINK (command) room1 (integer) room2 (integer) perm (integer)", "uniquename": "c_LINK", "evalcost": {"default": 1}, "implementation": "caosVM::c_LINK", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_LINK": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the permeability of the link between the given two rooms, or 0 if no link exists.\n", "arguments": [{"name": "room1", "type": "integer"}, {"name": "room2", "type": "integer"}], "name": "LINK", "match": "LINK", "type": "integer", "syntaxstring": "LINK (integer) room1 (integer) room2 (integer)", "uniquename": "v_LINK", "evalcost": {"default": 0}, "implementation": "caosVM::v_LINK", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_GRID": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the nearest adjacent room to the specified agent in the given direction (one of the direction constants), or\n-1 otherwise.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "direction", "type": "integer"}], "name": "GRID", "match": "GRID", "type": "integer", "syntaxstring": "GRID (integer) agent (agent) direction (integer)", "uniquename": "v_GRID", "evalcost": {"default": 0}, "implementation": "caosVM::v_GRID", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_EMIT": {"filename": "caosVM_map.cpp", "category": "map", "description": "Makes the TARG agent continually emit the specified amount of the specified CA into the room.\n", "arguments": [{"name": "caindex", "type": "integer"}, {"name": "amount", "type": "float"}], "name": "EMIT", "match": "EMIT", "type": "command", "syntaxstring": "EMIT (command) caindex (integer) amount (float)", "uniquename": "c_EMIT", "evalcost": {"default": 1}, "implementation": "caosVM::c_EMIT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_WALL": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the direction of the last wall the TARG agent collided with.\n", "arguments": [], "name": "WALL", "match": "WALL", "type": "integer", "syntaxstring": "WALL (integer)", "uniquename": "v_WALL", "evalcost": {"default": 0}, "implementation": "caosVM::v_WALL", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_ALTR": {"filename": "caosVM_map.cpp", "category": "map", "description": "Modifies the level of the given CA in the room specified.\nIf 'roomid' is -1, the room containing the TARG agent will be used.\n", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "caindex", "type": "integer"}, {"name": "delta", "type": "float"}], "name": "ALTR", "match": "ALTR", "type": "command", "syntaxstring": "ALTR (command) roomid (integer) caindex (integer) delta (float)", "uniquename": "c_ALTR", "evalcost": {"default": 1}, "implementation": "caosVM::c_ALTR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_RLOC": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns a string containing the location of the given room in the following format: x_left, x_right, y_left_ceiling,\ny_right_ceiling, y_left_floor, y_right_floor.\n", "arguments": [{"name": "roomid", "type": "integer"}], "name": "RLOC", "match": "RLOC", "type": "string", "syntaxstring": "RLOC (string) roomid (integer)", "uniquename": "v_RLOC", "evalcost": {"default": 0}, "implementation": "caosVM::v_RLOC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MLOC": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns a string containing the location of the given metaroom in the following format: x y width height\n", "arguments": [{"name": "metaroomid", "type": "integer"}], "name": "MLOC", "match": "MLOC", "type": "string", "syntaxstring": "MLOC (string) metaroomid (integer)", "uniquename": "v_MLOC", "evalcost": {"default": 0}, "implementation": "caosVM::v_MLOC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DMAP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Turns the debug map on and off, which shows the edges of rooms and vehicles.\n", "arguments": [{"name": "mapon", "type": "integer"}], "name": "DMAP", "match": "DMAP", "type": "command", "syntaxstring": "DMAP (command) mapon (integer)", "uniquename": "c_DMAP", "evalcost": {"default": 1}, "implementation": "caosVM::c_DMAP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ERID": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns a space-seperated list of all room id's contained by the given metaroom.\n", "arguments": [{"name": "metaroom_id", "type": "integer"}], "name": "ERID", "match": "ERID", "type": "string", "syntaxstring": "ERID (string) metaroom_id (integer)", "uniquename": "v_ERID", "evalcost": {"default": 0}, "implementation": "caosVM::v_ERID", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DELR": {"filename": "caosVM_map.cpp", "category": "map", "description": "Removes the given room from the map.\n", "arguments": [{"name": "room_id", "type": "integer"}], "name": "DELR", "match": "DELR", "type": "command", "syntaxstring": "DELR (command) room_id (integer)", "uniquename": "c_DELR", "evalcost": {"default": 1}, "implementation": "caosVM::c_DELR", "pragma": {"variants": "c2 cv c3 sm"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DELM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Removes the given metaroom from the map.\n", "arguments": [{"name": "metaroom_id", "type": "integer"}], "name": "DELM", "match": "DELM", "type": "command", "syntaxstring": "DELM (command) metaroom_id (integer)", "uniquename": "c_DELM", "evalcost": {"default": 1}, "implementation": "caosVM::c_DELM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIRP": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "caindex", "type": "integer"}, {"name": "direction", "type": "integer"}], "name": "HIRP", "match": "HIRP", "type": "integer", "syntaxstring": "HIRP (integer) roomid (integer) caindex (integer) direction (integer)", "uniquename": "v_HIRP", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIRP", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_LORP": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "caindex", "type": "integer"}, {"name": "direction", "type": "integer"}], "name": "LORP", "match": "LORP", "type": "integer", "syntaxstring": "LORP (integer) roomid (integer) caindex (integer) direction (integer)", "uniquename": "v_LORP", "evalcost": {"default": 0}, "implementation": "caosVM::v_LORP", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_TORX": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "roomid", "type": "integer"}], "name": "TORX", "match": "TORX", "type": "float", "syntaxstring": "TORX (float) roomid (integer)", "uniquename": "v_TORX", "evalcost": {"default": 0}, "implementation": "caosVM::v_TORX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_TORY": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "roomid", "type": "integer"}], "name": "TORY", "match": "TORY", "type": "float", "syntaxstring": "TORY (float) roomid (integer)", "uniquename": "v_TORY", "evalcost": {"default": 0}, "implementation": "caosVM::v_TORY", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_CACL": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "caindex", "type": "integer"}], "name": "CACL", "match": "CACL", "type": "command", "syntaxstring": "CACL (command) family (integer) genus (integer) species (integer) caindex (integer)", "uniquename": "c_CACL", "evalcost": {"default": 1}, "implementation": "caosVM::c_CACL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_DOCA": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "times", "type": "integer"}], "name": "DOCA", "match": "DOCA", "type": "command", "syntaxstring": "DOCA (command) times (integer)", "uniquename": "c_DOCA", "evalcost": {"default": 1}, "implementation": "caosVM::c_DOCA", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_WRAP": {"filename": "caosVM_map.cpp", "category": "map", "description": "The world-wrapping flag for the specified metaroom. 1 to enable wrapping, 0 to disable.\n", "arguments": [{"name": "metaroom_id", "type": "integer"}], "name": "WRAP", "match": "WRAP", "type": "variable", "syntaxstring": "WRAP (variable) metaroom_id (integer)", "uniquename": "v_WRAP", "evalcost": {"default": 0}, "implementation": "caosVM::v_WRAP", "pragma": {"variants": "all"}, "status": "broken", "saveimpl": "caosVM::s_WRAP", "stackdelta": 0}, "c_ELAS": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the elasticity (in other words, bounciness) of the TARG agent.\n", "arguments": [{"name": "elas", "type": "integer"}], "name": "ELAS", "match": "ELAS", "type": "command", "syntaxstring": "ELAS (command) elas (integer)", "uniquename": "c_ELAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_ELAS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ELAS": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the elasticity of the TARG agent.\n", "arguments": [], "name": "ELAS", "match": "ELAS", "type": "integer", "syntaxstring": "ELAS (integer)", "uniquename": "v_ELAS", "evalcost": {"default": 0}, "implementation": "caosVM::v_ELAS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MVTO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Places the TARG agent at the given x/y position in the world (using the upper left hand corner of the agent).\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "MVTO", "match": "MVTO", "type": "command", "syntaxstring": "MVTO (command) x (float) y (float)", "uniquename": "c_MVTO", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_MVTO", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_MVBY": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Changes the TARG agent's position by the given relative distances.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "MVBY", "match": "MVBY", "type": "command", "syntaxstring": "MVBY (command) x (float) y (float)", "uniquename": "c_MVBY", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_MVBY", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_VELX": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the current horizontal velocity, in pixels/tick, of the TARG agent.\n", "arguments": [], "name": "VELX", "match": "VELX", "type": "variable", "syntaxstring": "VELX (variable)", "uniquename": "v_VELX", "evalcost": {"default": 0}, "implementation": "caosVM::v_VELX", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_VELX", "stackdelta": 1}, "v_VELY": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the current vertical velocity, in pixels/tick, of the TARG agent.\n", "arguments": [], "name": "VELY", "match": "VELY", "type": "variable", "syntaxstring": "VELY (variable)", "uniquename": "v_VELY", "evalcost": {"default": 0}, "implementation": "caosVM::v_VELY", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_VELY", "stackdelta": 1}, "v_OBST": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the distance from the TARG agent to the nearest wall that it might collide with in the given direction.\n(except right now it just gives the direction to the nearest wall at world edge - fuzzie)\n", "arguments": [{"name": "direction", "type": "integer"}], "name": "OBST", "match": "OBST", "type": "float", "syntaxstring": "OBST (float) direction (integer)", "uniquename": "v_OBST", "evalcost": {"default": 0}, "implementation": "caosVM::v_OBST", "pragma": {"variants": "cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_TMVB": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns 1 if the TARG agent could move by (deltax, deltay) and still be in room system, or 0 otherwise.\n", "arguments": [{"name": "deltax", "type": "float"}, {"name": "deltay", "type": "float"}], "name": "TMVB", "match": "TMVB", "type": "integer", "syntaxstring": "TMVB (integer) deltax (float) deltay (float)", "uniquename": "v_TMVB", "evalcost": {"default": 0}, "implementation": "caosVM::v_TMVB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_TMVT": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns 1 if the TARG agent could move to (x, y) and still be in room system, or 0 if otherwise.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "TMVT", "match": "TMVT", "type": "integer", "syntaxstring": "TMVT (integer) x (float) y (float)", "uniquename": "v_TMVT", "evalcost": {"default": 0}, "implementation": "caosVM::v_TMVT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_TMVF": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns 1 if the TARG Creature could move foot to (x, y) and still be in room system, or 0 if otherwise.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "TMVF", "match": "TMVF", "type": "integer", "syntaxstring": "TMVF (integer) x (float) y (float)", "uniquename": "v_TMVF", "evalcost": {"default": 0}, "implementation": "caosVM::v_TMVF", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ACCG": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the TARG agent's free-fall acceleration, in pixels/tick squared.\n", "arguments": [{"name": "accel", "type": "float"}], "name": "ACCG", "match": "ACCG", "type": "command", "syntaxstring": "ACCG (command) accel (float)", "uniquename": "c_ACCG", "evalcost": {"default": 1}, "implementation": "caosVM::c_ACCG", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ACCG": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the TARG agent's free-fall acceleration, in pixels/tick squared.\n", "arguments": [], "name": "ACCG", "match": "ACCG", "type": "float", "syntaxstring": "ACCG (float)", "uniquename": "v_ACCG", "evalcost": {"default": 0}, "implementation": "caosVM::v_ACCG", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_AERO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the aerodynamics of the TARG agent to the given float value.\n", "arguments": [{"name": "aero", "type": "float"}], "name": "AERO", "match": "AERO", "type": "command", "syntaxstring": "AERO (command) aero (float)", "uniquename": "c_AERO", "evalcost": {"default": 1}, "implementation": "caosVM::c_AERO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_AERO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the aerodynamics of the TARG agent.\n", "arguments": [], "name": "AERO", "match": "AERO", "type": "float", "syntaxstring": "AERO (float)", "uniquename": "v_AERO", "evalcost": {"default": 0}, "implementation": "caosVM::v_AERO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_RELX": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the relative horizontal distance between the centers of the two given agents.\n", "arguments": [{"name": "first", "type": "agent"}, {"name": "second", "type": "agent"}], "name": "RELX", "match": "RELX", "type": "float", "syntaxstring": "RELX (float) first (agent) second (agent)", "uniquename": "v_RELX", "evalcost": {"default": 0}, "implementation": "caosVM::v_RELX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_RELY": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the relative vertical distance between the centers of the two given agents.\n", "arguments": [{"name": "first", "type": "agent"}, {"name": "second", "type": "agent"}], "name": "RELY", "match": "RELY", "type": "float", "syntaxstring": "RELY (float) first (agent) second (agent)", "uniquename": "v_RELY", "evalcost": {"default": 0}, "implementation": "caosVM::v_RELY", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_VELO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the horizontal and vertical velocity of the TARG agent, in pixels/tick.\n", "arguments": [{"name": "xvel", "type": "float"}, {"name": "yvel", "type": "float"}], "name": "VELO", "match": "VELO", "type": "command", "syntaxstring": "VELO (command) xvel (float) yvel (float)", "uniquename": "c_VELO", "evalcost": {"default": 1}, "implementation": "caosVM::c_VELO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_MVSF": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Move the target agent to an area inside the room system at about (x, y).\nThis allows 'safe' moves.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "MVSF", "match": "MVSF", "type": "command", "syntaxstring": "MVSF (command) x (float) y (float)", "uniquename": "c_MVSF", "evalcost": {"default": 1}, "implementation": "caosVM::c_MVSF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_FRIC": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the TARG agent's coefficient of friction as a percentage.\n", "arguments": [], "name": "FRIC", "match": "FRIC", "type": "float", "syntaxstring": "FRIC (float)", "uniquename": "v_FRIC", "evalcost": {"default": 0}, "implementation": "caosVM::v_FRIC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FRIC": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the TARG agent's coefficient of friction, or the percentage of motion that will be lost as it slides on a\nsurface.\n", "arguments": [{"name": "friction", "type": "integer"}], "name": "FRIC", "match": "FRIC", "type": "command", "syntaxstring": "FRIC (command) friction (integer)", "uniquename": "c_FRIC", "evalcost": {"default": 1}, "implementation": "caosVM::c_FRIC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FALL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns 1 if the TARG agent is moving due to gravity, or 0 if otherwise.\n", "arguments": [], "name": "FALL", "match": "FALL", "type": "integer", "syntaxstring": "FALL (integer)", "uniquename": "v_FALL", "evalcost": {"default": 0}, "implementation": "caosVM::v_FALL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MOVS": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns an integer representing the motion status of the TARG agent.  0 is autonomous, 1 is moving by mouse, 2 is\nfloating, 3 is inside a vehicle, and 4 is being carried.\n", "arguments": [], "name": "MOVS", "match": "MOVS", "type": "variable", "syntaxstring": "MOVS (variable)", "uniquename": "v_MOVS", "evalcost": {"default": 0}, "implementation": "caosVM::v_MOVS", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_MOVS", "stackdelta": 1}, "c_FLTO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the TARG agent to float its top-left corner (x, y) away from the top-left corner of the FREL agent.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "FLTO", "match": "FLTO", "type": "command", "syntaxstring": "FLTO (command) x (float) y (float)", "uniquename": "c_FLTO", "evalcost": {"default": 1}, "implementation": "caosVM::c_FLTO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_FREL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the agent the TARG agent floats relative to. You must set the 'floatable' attribute for this to work.\nThe default is NULL, which means the target agent floats relative to the main camera.\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "FREL", "match": "FREL", "type": "command", "syntaxstring": "FREL (command) agent (agent)", "uniquename": "c_FREL", "evalcost": {"default": 1}, "implementation": "caosVM::c_FREL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FLTX": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the x value of the TARG agent's floating vector.\n", "arguments": [], "name": "FLTX", "match": "FLTX", "type": "float", "syntaxstring": "FLTX (float)", "uniquename": "v_FLTX", "evalcost": {"default": 0}, "implementation": "caosVM::v_FLTX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_FLTY": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the y value of the TARG agent's floating vector.\n", "arguments": [], "name": "FLTY", "match": "FLTY", "type": "float", "syntaxstring": "FLTY (float)", "uniquename": "v_FLTY", "evalcost": {"default": 0}, "implementation": "caosVM::v_FLTY", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_AVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the angular velocity for the target agent.\n", "arguments": [{"name": "angularvelocity", "type": "float"}], "name": "AVEL", "match": "AVEL", "type": "command", "syntaxstring": "AVEL (command) angularvelocity (float)", "uniquename": "c_AVEL", "evalcost": {"default": 1}, "implementation": "caosVM::c_AVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_AVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the angular velocity for the target agent.\n", "arguments": [], "name": "AVEL", "match": "AVEL", "type": "float", "syntaxstring": "AVEL (float)", "uniquename": "v_AVEL", "evalcost": {"default": 0}, "implementation": "caosVM::v_AVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the forward velocity for the target agent.\n", "arguments": [{"name": "forwardvelocity", "type": "float"}], "name": "FVEL", "match": "FVEL", "type": "command", "syntaxstring": "FVEL (command) forwardvelocity (float)", "uniquename": "c_FVEL", "evalcost": {"default": 1}, "implementation": "caosVM::c_FVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the forward velocity for the target agent.\n", "arguments": [], "name": "FVEL", "match": "FVEL", "type": "float", "syntaxstring": "FVEL (float)", "uniquename": "v_FVEL", "evalcost": {"default": 0}, "implementation": "caosVM::v_FVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_SVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the sideways velocity for the target agent.\n", "arguments": [{"name": "sidewaysvelocity", "type": "float"}], "name": "SVEL", "match": "SVEL", "type": "command", "syntaxstring": "SVEL (command) sidewaysvelocity (float)", "uniquename": "c_SVEL", "evalcost": {"default": 1}, "implementation": "caosVM::c_SVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_SVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the sideways velocity for the target agent.\n", "arguments": [], "name": "SVEL", "match": "SVEL", "type": "float", "syntaxstring": "SVEL (float)", "uniquename": "v_SVEL", "evalcost": {"default": 0}, "implementation": "caosVM::v_SVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_ADMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the angular damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [{"name": "angulardamping", "type": "float"}], "name": "ADMP", "match": "ADMP", "type": "command", "syntaxstring": "ADMP (command) angulardamping (float)", "uniquename": "c_ADMP", "evalcost": {"default": 1}, "implementation": "caosVM::c_ADMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ADMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the angular damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [], "name": "ADMP", "match": "ADMP", "type": "float", "syntaxstring": "ADMP (float)", "uniquename": "v_ADMP", "evalcost": {"default": 0}, "implementation": "caosVM::v_ADMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FDMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the forward damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [{"name": "forwarddamping", "type": "float"}], "name": "FDMP", "match": "FDMP", "type": "command", "syntaxstring": "FDMP (command) forwarddamping (float)", "uniquename": "c_FDMP", "evalcost": {"default": 1}, "implementation": "caosVM::c_FDMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FDMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the forward damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [], "name": "FDMP", "match": "FDMP", "type": "float", "syntaxstring": "FDMP (float)", "uniquename": "v_FDMP", "evalcost": {"default": 0}, "implementation": "caosVM::v_FDMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_SDMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the sideways damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [{"name": "sidewaysdamping", "type": "float"}], "name": "SDMP", "match": "SDMP", "type": "command", "syntaxstring": "SDMP (command) sidewaysdamping (float)", "uniquename": "c_SDMP", "evalcost": {"default": 1}, "implementation": "caosVM::c_SDMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_SDMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the sideways damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [], "name": "SDMP", "match": "SDMP", "type": "float", "syntaxstring": "SDMP (float)", "uniquename": "v_SDMP", "evalcost": {"default": 0}, "implementation": "caosVM::v_SDMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_SPIN": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the angle (from 0.0 to 1.0) the target agent is facing.\nTODO: This seems to not affect velocity in original c2e, sometimes. Needs more investigation.\n", "arguments": [{"name": "angle", "type": "float"}], "name": "SPIN", "match": "SPIN", "type": "command", "syntaxstring": "SPIN (command) angle (float)", "uniquename": "c_SPIN", "evalcost": {"default": 1}, "implementation": "caosVM::c_SPIN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_SPIN": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the angle (from 0.0 to 1.0) the target agent is facing.\n", "arguments": [], "name": "SPIN", "match": "SPIN", "type": "float", "syntaxstring": "SPIN (float)", "uniquename": "v_SPIN", "evalcost": {"default": 0}, "implementation": "caosVM::v_SPIN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_ANGL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Calculates the angle (from 0.0 to 1.0) between the target agent and the specified coordinates.\nTODO: This seems not to work in original c2e unless there's been an angular calculation on the target agent. Needs more investigation.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "ANGL", "match": "ANGL", "type": "float", "syntaxstring": "ANGL (float) x (float) y (float)", "uniquename": "v_ANGL", "evalcost": {"default": 0}, "implementation": "caosVM::v_ANGL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ROTN": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Enable automatic sprite adjustments for the current agent (by changing the BASE of part 0), based on the current rotation (SPIN).\n'sprites' specifies the number of sprites for each rotation.\n'rotations' specifies the number of different angles provided in the sprite file. They should begin facing north and continue clockwise.\nThe total number of sprites used will be sprites * rotations.\n", "arguments": [{"name": "sprites", "type": "integer"}, {"name": "rotations", "type": "integer"}], "name": "ROTN", "match": "ROTN", "type": "command", "syntaxstring": "ROTN (command) sprites (integer) rotations (integer)", "uniquename": "c_ROTN", "evalcost": {"default": 1}, "implementation": "caosVM::c_ROTN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_NET_PASS": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "nick_name", "type": "string"}, {"name": "password", "type": "string"}], "name": "NET: PASS", "match": "PASS", "type": "command", "syntaxstring": "NET: PASS (command) nick_name (string) password (string)", "uniquename": "c_NET_PASS", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_PASS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_NET_PASS": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so always returns \"nobody\".\n", "arguments": [], "name": "NET: PASS", "match": "PASS", "type": "string", "syntaxstring": "NET: PASS (string)", "uniquename": "v_NET_PASS", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_PASS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_NET_LINE": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "connect", "type": "integer"}], "name": "NET: LINE", "match": "LINE", "type": "command", "syntaxstring": "NET: LINE (command) connect (integer)", "uniquename": "c_NET_LINE", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_LINE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_NET_LINE": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so always returns 1.\n", "arguments": [], "name": "NET: LINE", "match": "LINE", "type": "integer", "syntaxstring": "NET: LINE (integer)", "uniquename": "v_NET_LINE", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_LINE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NET_ERRA": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so always returns 0.\n", "arguments": [], "name": "NET: ERRA", "match": "ERRA", "type": "integer", "syntaxstring": "NET: ERRA (integer)", "uniquename": "v_NET_ERRA", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_ERRA", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NET_ULIN": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so always returns 0.\n", "arguments": [{"name": "username", "type": "string"}], "name": "NET: ULIN", "match": "ULIN", "type": "integer", "syntaxstring": "NET: ULIN (integer) username (string)", "uniquename": "v_NET_ULIN", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_ULIN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_WHOZ": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [], "name": "NET: WHOZ", "match": "WHOZ", "type": "command", "syntaxstring": "NET: WHOZ (command)", "uniquename": "c_NET_WHOZ", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_WHOZ", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_WHON": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "username", "type": "string"}], "name": "NET: WHON", "match": "WHON", "type": "command", "syntaxstring": "NET: WHON (command) username (string)", "uniquename": "c_NET_WHON", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_WHON", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_NET_USER": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so returns an empty string.\n", "arguments": [], "name": "NET: USER", "match": "USER", "type": "string", "syntaxstring": "NET: USER (string)", "uniquename": "v_NET_USER", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_USER", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NET_FROM": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so returns an empty string.\n", "arguments": [{"name": "resource_name", "type": "string"}], "name": "NET: FROM", "match": "FROM", "type": "string", "syntaxstring": "NET: FROM (string) resource_name (string)", "uniquename": "v_NET_FROM", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_FROM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_NET_EXPO": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so always returns 0.\n", "arguments": [{"name": "chunk_type", "type": "string"}, {"name": "dest_user", "type": "string"}], "name": "NET: EXPO", "match": "EXPO", "type": "integer", "syntaxstring": "NET: EXPO (integer) chunk_type (string) dest_user (string)", "uniquename": "v_NET_EXPO", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_EXPO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_NET_RUSO": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so sets result to an empty string.\n", "arguments": [{"name": "result", "type": "variable"}], "name": "NET: RUSO", "match": "RUSO", "type": "command", "syntaxstring": "NET: RUSO (command) result (variable)", "uniquename": "c_NET_RUSO", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_RUSO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_HEAD": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [], "name": "NET: HEAD", "match": "HEAD", "type": "command", "syntaxstring": "NET: HEAD (command)", "uniquename": "c_NET_HEAD", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_HEAD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_HEAR": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "channel", "type": "string"}], "name": "NET: HEAR", "match": "HEAR", "type": "command", "syntaxstring": "NET: HEAR (command) channel (string)", "uniquename": "c_NET_HEAR", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_HEAR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_NET_HOST": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so returns an empty string.\n", "arguments": [], "name": "NET: HOST", "match": "HOST", "type": "string", "syntaxstring": "NET: HOST (string)", "uniquename": "v_NET_HOST", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_HOST", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NET_RAWE": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so returns zero.\n", "arguments": [], "name": "NET: RAWE", "match": "RAWE", "type": "integer", "syntaxstring": "NET: RAWE (integer)", "uniquename": "v_NET_RAWE", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_RAWE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_NET_STAT": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so sets everything to -1.\n", "arguments": [{"name": "timeonline", "type": "variable"}, {"name": "usersonline", "type": "variable"}, {"name": "bytesreceived", "type": "variable"}, {"name": "bytessent", "type": "variable"}], "name": "NET: STAT", "match": "STAT", "type": "command", "syntaxstring": "NET: STAT (command) timeonline (variable) usersonline (variable) bytesreceived (variable) bytessent (variable)", "uniquename": "c_NET_STAT", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_STAT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_UNIK": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so sets result to an empty string.\n", "arguments": [{"name": "userid", "type": "string"}, {"name": "result", "type": "variable"}], "name": "NET: UNIK", "match": "UNIK", "type": "command", "syntaxstring": "NET: UNIK (command) userid (string) result (variable)", "uniquename": "c_NET_UNIK", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_UNIK", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_NET_WHAT": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so return an empty string.\n", "arguments": [], "name": "NET: WHAT", "match": "WHAT", "type": "string", "syntaxstring": "NET: WHAT (string)", "uniquename": "v_NET_WHAT", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_WHAT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_NET_WHOD": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [], "name": "NET: WHOD", "match": "WHOD", "type": "command", "syntaxstring": "NET: WHOD (command)", "uniquename": "c_NET_WHOD", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_WHOD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_WHOF": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "user", "type": "string"}], "name": "NET: WHOF", "match": "WHOF", "type": "command", "syntaxstring": "NET: WHOF (command) user (string)", "uniquename": "c_NET_WHOF", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_WHOF", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_NET_WRIT": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "userid", "type": "string"}, {"name": "channel", "type": "string"}, {"name": "messageid", "type": "string"}, {"name": "param1", "type": "anything"}, {"name": "param2", "type": "anything"}], "name": "NET: WRIT", "match": "WRIT", "type": "command", "syntaxstring": "NET: WRIT (command) userid (string) channel (string) messageid (string) param1 (anything) param2 (anything)", "uniquename": "c_NET_WRIT", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_WRIT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_PRT_BANG": {"filename": "caosVM_ports.cpp", "category": "ports", "arguments": [{"name": "strength", "type": "integer"}], "name": "PRT: BANG", "match": "BANG", "type": "command", "syntaxstring": "PRT: BANG (command) strength (integer)", "uniquename": "c_PRT_BANG", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_BANG", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRT_FRMA": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Returns agent to which the specified input port is connected, NULL if not\nconnected or the port doesn't exist.\n", "arguments": [{"name": "inputport", "type": "integer"}], "name": "PRT: FRMA", "match": "FRMA", "type": "agent", "syntaxstring": "PRT: FRMA (agent) inputport (integer)", "uniquename": "v_PRT_FRMA", "namespace": "prt:", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRT_FRMA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PRT_FROM": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Returns the output port id on the source agent connected to the specified\ninput port. Returns a negative value if the port is not connected or if the\nsource agent does not exist.\n", "arguments": [{"name": "inputport", "type": "integer"}], "name": "PRT: FROM", "match": "FROM", "type": "integer", "syntaxstring": "PRT: FROM (integer) inputport (integer)", "uniquename": "v_PRT_FROM", "namespace": "prt:", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRT_FROM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PRT_INEW": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Creates a new input port on targ. The message msgnum will be sent to the agent\nwhen a signal arrives through the port. _P1_ of that message will be the data\nof the signal.\n", "arguments": [{"name": "id", "type": "integer"}, {"name": "name", "type": "string"}, {"name": "desc", "type": "string"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "msgnum", "type": "integer"}], "name": "PRT: INEW", "match": "INEW", "type": "command", "syntaxstring": "PRT: INEW (command) id (integer) name (string) desc (string) x (integer) y (integer) msgnum (integer)", "uniquename": "c_PRT_INEW", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_INEW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "v_PRT_ITOT": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Returns the total number of input ports.\n", "arguments": [], "name": "PRT: ITOT", "match": "ITOT", "type": "integer", "syntaxstring": "PRT: ITOT (integer)", "uniquename": "v_PRT_ITOT", "namespace": "prt:", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRT_ITOT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PRT_IZAP": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Removes the input port with given id.\n", "arguments": [{"name": "id", "type": "integer"}], "name": "PRT: IZAP", "match": "IZAP", "type": "command", "syntaxstring": "PRT: IZAP (command) id (integer)", "uniquename": "c_PRT_IZAP", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_IZAP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PRT_JOIN": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Joins the output port from source to the input port of dest.\n", "arguments": [{"name": "source", "type": "agent"}, {"name": "outputport", "type": "integer"}, {"name": "dest", "type": "agent"}, {"name": "inputport", "type": "integer"}], "name": "PRT: JOIN", "match": "JOIN", "type": "command", "syntaxstring": "PRT: JOIN (command) source (agent) outputport (integer) dest (agent) inputport (integer)", "uniquename": "c_PRT_JOIN", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_JOIN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_PRT_KRAK": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Breaks a connection on agent. If is_outport, kill all connections connected to\nthe port. Else, kill the connection to the inport.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "is_outport", "type": "integer"}, {"name": "port", "type": "integer"}], "name": "PRT: KRAK", "match": "KRAK", "type": "command", "syntaxstring": "PRT: KRAK (command) agent (agent) is_outport (integer) port (integer)", "uniquename": "c_PRT_KRAK", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_KRAK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_PRT_NAME": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Returns the name of the specified port. Returns \"\" if the port doesn't exist.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "is_outport", "type": "integer"}, {"name": "port", "type": "integer"}], "name": "PRT: NAME", "match": "NAME", "type": "string", "syntaxstring": "PRT: NAME (string) agent (agent) is_outport (integer) port (integer)", "uniquename": "v_PRT_NAME", "namespace": "prt:", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRT_NAME", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_PRT_ONEW": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Creates a new output port on targ.\n", "arguments": [{"name": "id", "type": "integer"}, {"name": "name", "type": "string"}, {"name": "desc", "type": "string"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "PRT: ONEW", "match": "ONEW", "type": "command", "syntaxstring": "PRT: ONEW (command) id (integer) name (string) desc (string) x (integer) y (integer)", "uniquename": "c_PRT_ONEW", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_ONEW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "v_PRT_OTOT": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Returns the total number of output ports.\n", "arguments": [], "name": "PRT: OTOT", "match": "OTOT", "type": "integer", "syntaxstring": "PRT: OTOT (integer)", "uniquename": "v_PRT_OTOT", "namespace": "prt:", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRT_OTOT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PRT_OZAP": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Destroys output port with given id.\n", "arguments": [{"name": "id", "type": "integer"}], "name": "PRT: OZAP", "match": "OZAP", "type": "command", "syntaxstring": "PRT: OZAP (command) id (integer)", "uniquename": "c_PRT_OZAP", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_OZAP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PRT_SEND": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Sends information over targ's output port.\n", "arguments": [{"name": "id", "type": "integer"}, {"name": "data", "type": "anything"}], "name": "PRT: SEND", "match": "SEND", "type": "command", "syntaxstring": "PRT: SEND (command) id (integer) data (anything)", "uniquename": "c_PRT_SEND", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_SEND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_AGTI": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "using the specified resource, returns the integer value associated with the given tag,\nor default if the tag doesn't exist\n", "arguments": [{"name": "resource", "type": "string"}, {"name": "tag", "type": "string"}, {"name": "default", "type": "integer"}], "name": "PRAY AGTI", "match": "AGTI", "type": "integer", "syntaxstring": "PRAY AGTI (integer) resource (string) tag (string) default (integer)", "uniquename": "v_PRAY_AGTI", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_AGTI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_AGTS": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "using the specified resource, returns the string value associated with the given tag,\nor default if the tag doesn't exist\n", "arguments": [{"name": "resource", "type": "string"}, {"name": "tag", "type": "string"}, {"name": "default", "type": "string"}], "name": "PRAY AGTS", "match": "AGTS", "type": "string", "syntaxstring": "PRAY AGTS (string) resource (string) tag (string) default (string)", "uniquename": "v_PRAY_AGTS", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_AGTS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_BACK": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "returns the name of the resource of the specified type which is immediately previous to last\nsee PRAY PREV if you want to loop around\n", "arguments": [{"name": "type", "type": "string"}, {"name": "last", "type": "string"}], "name": "PRAY BACK", "match": "BACK", "type": "string", "syntaxstring": "PRAY BACK (string) type (string) last (string)", "uniquename": "v_PRAY_BACK", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_BACK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRAY_COUN": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "return the number of resources of the specified type available\n", "arguments": [{"name": "type", "type": "string"}], "name": "PRAY COUN", "match": "COUN", "type": "integer", "syntaxstring": "PRAY COUN (integer) type (string)", "uniquename": "v_PRAY_COUN", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_COUN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PRAY_DEPS": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "name", "type": "string"}, {"name": "install", "type": "integer"}], "name": "PRAY DEPS", "match": "DEPS", "type": "integer", "syntaxstring": "PRAY DEPS (integer) name (string) install (integer)", "uniquename": "v_PRAY_DEPS", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_DEPS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRAY_EXPO": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "type", "type": "string"}], "name": "PRAY EXPO", "match": "EXPO", "type": "integer", "syntaxstring": "PRAY EXPO (integer) type (string)", "uniquename": "v_PRAY_EXPO", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_EXPO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PRAY_FILE": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "install a file with given resource name and type\nif install is 0, the install doesn't actually happen, it's just tested\nreturns 0 on success, 1 on failure\n", "arguments": [{"name": "name", "type": "integer"}, {"name": "type", "type": "integer"}, {"name": "install", "type": "integer"}], "name": "PRAY FILE", "match": "FILE", "type": "integer", "syntaxstring": "PRAY FILE (integer) name (integer) type (integer) install (integer)", "uniquename": "v_PRAY_FILE", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_FILE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_FORE": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "returns the name of the resource of the specified type which is immediately after last\nsee PRAY NEXT if you want to loop around\n", "arguments": [{"name": "type", "type": "string"}, {"name": "last", "type": "string"}], "name": "PRAY FORE", "match": "FORE", "type": "string", "syntaxstring": "PRAY FORE (string) type (string) last (string)", "uniquename": "v_PRAY_FORE", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_FORE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PRAY_GARB": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "if force is 0, make the pray manager garbage-collect resources\notherwise, make the pray manager empty its cache entirely\n\nrecommended to be called after intensive PRAY usage, eg agent installation\n", "arguments": [{"name": "force", "type": "integer"}], "name": "PRAY GARB", "match": "GARB", "type": "command", "syntaxstring": "PRAY GARB (command) force (integer)", "uniquename": "c_PRAY_GARB", "namespace": "pray", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRAY_GARB", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRAY_IMPO": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "moniker", "type": "string"}, {"name": "doit", "type": "integer"}, {"name": "keepfile", "type": "integer"}], "name": "PRAY IMPO", "match": "IMPO", "type": "integer", "syntaxstring": "PRAY IMPO (integer) moniker (string) doit (integer) keepfile (integer)", "uniquename": "v_PRAY_IMPO", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_IMPO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_INJT": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "name", "type": "string"}, {"name": "install", "type": "integer"}, {"name": "report", "type": "variable"}], "name": "PRAY INJT", "match": "INJT", "type": "integer", "syntaxstring": "PRAY INJT (integer) name (string) install (integer) report (variable)", "uniquename": "v_PRAY_INJT", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_INJT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRAY_KILL": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "deletes from disk the file containing the given resource\n\nreturns 1 upon success, or 0 upon failure (typically no such resource)\n", "arguments": [{"name": "resource", "type": "string"}], "name": "PRAY KILL", "match": "KILL", "type": "integer", "syntaxstring": "PRAY KILL (integer) resource (string)", "uniquename": "v_PRAY_KILL", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_KILL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PRAY_MAKE": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "journalspot", "type": "integer"}, {"name": "journalname", "type": "string"}, {"name": "prayspot", "type": "integer"}, {"name": "name", "type": "string"}, {"name": "report", "type": "variable"}], "name": "PRAY MAKE", "match": "MAKE", "type": "integer", "syntaxstring": "PRAY MAKE (integer) journalspot (integer) journalname (string) prayspot (integer) name (string) report (variable)", "uniquename": "v_PRAY_MAKE", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_MAKE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_NET_MAKE": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "Networking is not supported in openc2e, so conveniently fails.\n", "arguments": [{"name": "journalspot", "type": "integer"}, {"name": "journalname", "type": "integer"}, {"name": "user", "type": "string"}, {"name": "report", "type": "variable"}], "name": "NET: MAKE", "match": "MAKE", "type": "integer", "syntaxstring": "NET: MAKE (integer) journalspot (integer) journalname (integer) user (string) report (variable)", "uniquename": "v_NET_MAKE", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_MAKE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_NEXT": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "returns the name of the resource of the specified type which is immediately after last\nsee PRAY FORE if you don't want to loop around\n", "arguments": [{"name": "type", "type": "string"}, {"name": "last", "type": "string"}], "name": "PRAY NEXT", "match": "NEXT", "type": "string", "syntaxstring": "PRAY NEXT (string) type (string) last (string)", "uniquename": "v_PRAY_NEXT", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_NEXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRAY_PREV": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "returns the name of the resource of the specified type which is immediately previous to last\nsee PRAY BACK if you don't want to loop around\n", "arguments": [{"name": "type", "type": "string"}, {"name": "last", "type": "string"}], "name": "PRAY PREV", "match": "PREV", "type": "string", "syntaxstring": "PRAY PREV (string) type (string) last (string)", "uniquename": "v_PRAY_PREV", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_PREV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PRAY_REFR": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "make the pray manager check for deleted/new files in the resource directory\n", "arguments": [], "name": "PRAY REFR", "match": "REFR", "type": "command", "syntaxstring": "PRAY REFR (command)", "uniquename": "c_PRAY_REFR", "namespace": "pray", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRAY_REFR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PRAY_TEST": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "name", "type": "string"}], "name": "PRAY TEST", "match": "TEST", "type": "integer", "syntaxstring": "PRAY TEST (integer) name (string)", "uniquename": "v_PRAY_TEST", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_TEST", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_INST": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Forces the following commands to be executed in one tick, rather than scheduling them, until SLOW or the end\nof the script is encountered.\n", "arguments": [], "name": "INST", "match": "INST", "type": "command", "syntaxstring": "INST (command)", "uniquename": "c_INST", "evalcost": {"default": 1}, "implementation": "caosVM::c_INST", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SLOW": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Reverses the effects of INST.\n", "arguments": [], "name": "SLOW", "match": "SLOW", "type": "command", "syntaxstring": "SLOW (command)", "uniquename": "c_SLOW", "evalcost": {"default": 1}, "implementation": "caosVM::c_SLOW", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_LOCK": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Prevent the script from being interrupted by another until UNLK or the end of the script is encountered.\n", "arguments": [], "name": "LOCK", "match": "LOCK", "type": "command", "syntaxstring": "LOCK (command)", "uniquename": "c_LOCK", "evalcost": {"default": 1}, "implementation": "caosVM::c_LOCK", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_UNLK": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Reverses the effects of LOCK.\n", "arguments": [], "name": "UNLK", "match": "UNLK", "type": "command", "syntaxstring": "UNLK (command)", "uniquename": "c_UNLK", "evalcost": {"default": 1}, "implementation": "caosVM::c_UNLK", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_WAIT": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Stops the script from running for the given number of ticks.\n", "arguments": [{"name": "ticks", "type": "integer"}], "name": "WAIT", "match": "WAIT", "type": "command", "syntaxstring": "WAIT (command) ticks (integer)", "uniquename": "c_WAIT", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_WAIT", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_STOP": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Aborts the script.\n", "arguments": [], "name": "STOP", "match": "STOP", "type": "command", "syntaxstring": "STOP (command)", "uniquename": "c_STOP", "evalcost": {"default": 1}, "implementation": "caosVM::c_STOP", "pragma": {"stackdelta": "any", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_SCRX": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Deletes the event script in question from the scriptoruium.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "SCRX", "match": "SCRX", "type": "command", "syntaxstring": "SCRX (command) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "c_SCRX", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCRX", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_CODE": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Returns script number running in the TARG agent. Returns -1 if target is not\nrunning anything (or if it's running something that's not an event script).\n", "arguments": [], "name": "CODE", "match": "CODE", "type": "integer", "syntaxstring": "CODE (integer)", "uniquename": "v_CODE", "evalcost": {"default": 0}, "implementation": "caosVM::v_CODE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CODF": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Returns script family running in the TARG agent. Returns -1 if target is not\nrunning anything (or if it's running something that's not an event script).\n", "arguments": [], "name": "CODF", "match": "CODF", "type": "integer", "syntaxstring": "CODF (integer)", "uniquename": "v_CODF", "evalcost": {"default": 0}, "implementation": "caosVM::v_CODF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CODG": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Returns script genus running in the target. Returns -1 if target is not\nrunning anything (or if it's running something that's not an event script).\n", "arguments": [], "name": "CODG", "match": "CODG", "type": "integer", "syntaxstring": "CODG (integer)", "uniquename": "v_CODG", "evalcost": {"default": 0}, "implementation": "caosVM::v_CODG", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CODS": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Returns script species running in the target. Returns -1 if target is not\nrunning anything (or if it's running something that's not an event script).\n", "arguments": [], "name": "CODS", "match": "CODS", "type": "integer", "syntaxstring": "CODS (integer)", "uniquename": "v_CODS", "evalcost": {"default": 0}, "implementation": "caosVM::v_CODS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_JECT": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Inject a script from the current bootstrap. 'file' must be the full filename.\nFlags can be 1 for remove script, 2 for event scripts and 4 for install script.\n", "arguments": [{"name": "file", "type": "string"}, {"name": "flags", "type": "integer"}], "name": "JECT", "match": "JECT", "type": "command", "syntaxstring": "JECT (command) file (string) flags (integer)", "uniquename": "c_JECT", "evalcost": {"default": 1}, "implementation": "caosVM::c_JECT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_SORQ": {"filename": "caosVM_scripts.cpp", "category": "scripts", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "SORQ", "match": "SORQ", "type": "integer", "syntaxstring": "SORQ (integer) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "v_SORQ", "evalcost": {"default": 0}, "implementation": "caosVM::v_SORQ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_SERS_MAPP": {"filename": "caosVM_ser_stub.cpp", "category": "unknown", "description": "Saves the map to the specified file.\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SERS MAPP", "match": "MAPP", "type": "command", "syntaxstring": "SERS MAPP (command) filename (string)", "uniquename": "c_SERS_MAPP", "namespace": "sers", "evalcost": {"default": 1}, "implementation": "caosVM::c_SERS_MAPP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SERL_MAPP": {"filename": "caosVM_ser_stub.cpp", "category": "unknown", "description": "Loads the map from the specified file\n\nMay explode if anything at all exists.\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SERL MAPP", "match": "MAPP", "type": "command", "syntaxstring": "SERL MAPP (command) filename (string)", "uniquename": "c_SERL_MAPP", "namespace": "serl", "evalcost": {"default": 1}, "implementation": "caosVM::c_SERL_MAPP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SERS_SCRP": {"filename": "caosVM_ser_stub.cpp", "category": "unknown", "description": "Saves the scriptorium to the specified file\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SERS SCRP", "match": "SCRP", "type": "command", "syntaxstring": "SERS SCRP (command) filename (string)", "uniquename": "c_SERS_SCRP", "namespace": "sers", "evalcost": {"default": 1}, "implementation": "caosVM::c_SERS_SCRP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SERL_SCRP": {"filename": "caosVM_ser_stub.cpp", "category": "unknown", "description": "Loads the scriptorium from the specified file\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SERL SCRP", "match": "SCRP", "type": "command", "syntaxstring": "SERL SCRP (command) filename (string)", "uniquename": "c_SERL_SCRP", "namespace": "serl", "evalcost": {"default": 1}, "implementation": "caosVM::c_SERL_SCRP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SNDE": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Play an uncontrolled sound at the target agent's current position.\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SNDE", "match": "SNDE", "type": "command", "syntaxstring": "SNDE (command) filename (string)", "uniquename": "c_SNDE", "evalcost": {"default": 1}, "implementation": "caosVM::c_SNDE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SNDC": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Start playing a controlled sound with the target agent, which will follow the agent as it moves.\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SNDC", "match": "SNDC", "type": "command", "syntaxstring": "SNDC (command) filename (string)", "uniquename": "c_SNDC", "evalcost": {"default": 1}, "implementation": "caosVM::c_SNDC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SNDL": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Start playing a looping controlled sound with the target agent, which will follow the agent as it moves.\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SNDL", "match": "SNDL", "type": "command", "syntaxstring": "SNDL (command) filename (string)", "uniquename": "c_SNDL", "evalcost": {"default": 1}, "implementation": "caosVM::c_SNDL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_MMSC": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Set the music track to be played in the metaroom containing the given coordinates.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "track_name", "type": "string"}], "name": "MMSC", "match": "MMSC", "type": "command", "syntaxstring": "MMSC (command) x (integer) y (integer) track_name (string)", "uniquename": "c_MMSC", "evalcost": {"default": 1}, "implementation": "caosVM::c_MMSC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_MMSC": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Returns the music track to be played in the metaroom containing the given coordinates.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "MMSC", "match": "MMSC", "type": "string", "syntaxstring": "MMSC (string) x (integer) y (integer)", "uniquename": "v_MMSC", "evalcost": {"default": 0}, "implementation": "caosVM::v_MMSC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_RMSC": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Set the music track to be played in the room containing the given coordinates.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "track_name", "type": "string"}], "name": "RMSC", "match": "RMSC", "type": "command", "syntaxstring": "RMSC (command) x (integer) y (integer) track_name (string)", "uniquename": "c_RMSC", "evalcost": {"default": 1}, "implementation": "caosVM::c_RMSC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_RMSC": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Returns the music track to be played in the room containing the given coordinates.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "RMSC", "match": "RMSC", "type": "string", "syntaxstring": "RMSC (string) x (integer) y (integer)", "uniquename": "v_RMSC", "evalcost": {"default": 0}, "implementation": "caosVM::v_RMSC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_FADE": {"filename": "caosVM_sounds.cpp", "category": "sound", "arguments": [], "name": "FADE", "match": "FADE", "type": "command", "syntaxstring": "FADE (command)", "uniquename": "c_FADE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_FADE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_STPC": {"filename": "caosVM_sounds.cpp", "category": "sound", "arguments": [], "name": "STPC", "match": "STPC", "type": "command", "syntaxstring": "STPC (command)", "uniquename": "c_STPC", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STPC", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_STRK": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Play the specified music track. It will play for at least latency seconds.\n", "arguments": [{"name": "latency", "type": "integer"}, {"name": "track", "type": "string"}], "name": "STRK", "match": "STRK", "type": "command", "syntaxstring": "STRK (command) latency (integer) track (string)", "uniquename": "c_STRK", "evalcost": {"default": 1}, "implementation": "caosVM::c_STRK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_VOLM": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Changes the volume of the specified type of audio; 0 for sound effects, 1 for midi or 2 for dynamic music.\nVolume is from -10000 (silent) to 0 (maximum).\n", "arguments": [{"name": "type", "type": "integer"}, {"name": "volume", "type": "integer"}], "name": "VOLM", "match": "VOLM", "type": "command", "syntaxstring": "VOLM (command) type (integer) volume (integer)", "uniquename": "c_VOLM", "evalcost": {"default": 1}, "implementation": "caosVM::c_VOLM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_VOLM": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Return the volumne of the specified type of audio; 0 for sound effects, 1 for midi or 2 for dynamic music.\nVolume is from -10000 (silent) to 0 (maximum).\n", "arguments": [{"name": "type", "type": "integer"}], "name": "VOLM", "match": "VOLM", "type": "integer", "syntaxstring": "VOLM (integer) type (integer)", "uniquename": "v_VOLM", "evalcost": {"default": 0}, "implementation": "caosVM::v_VOLM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MUTE": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "This returns/sets information about which types of in-game audio are muted.\nSet andmask for the information you want returned, and eormask for the information you want changed.\n1 is for normal sound, and 2 is for music (so 3 is for both combined).\n", "arguments": [{"name": "andmask", "type": "integer"}, {"name": "eormask", "type": "integer"}], "name": "MUTE", "match": "MUTE", "type": "integer", "syntaxstring": "MUTE (integer) andmask (integer) eormask (integer)", "uniquename": "v_MUTE", "evalcost": {"default": 0}, "implementation": "caosVM::v_MUTE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SEZZ": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Tells the target agent to speak the specified text.\n", "arguments": [{"name": "text", "type": "string"}], "name": "SEZZ", "match": "SEZZ", "type": "command", "syntaxstring": "SEZZ (command) text (string)", "uniquename": "c_SEZZ", "evalcost": {"default": 1}, "implementation": "caosVM::c_SEZZ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_VOIS": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Set the voice of the target agent to the specified voice (a catalogue tag).\n", "arguments": [{"name": "voice", "type": "string"}], "name": "VOIS", "match": "VOIS", "type": "command", "syntaxstring": "VOIS (command) voice (string)", "uniquename": "c_VOIS", "evalcost": {"default": 1}, "implementation": "caosVM::c_VOIS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_MIDI": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Plays the MIDI file specified, or stops playing if passed an empty string.\n", "arguments": [{"name": "midifile", "type": "string"}], "name": "MIDI", "match": "MIDI", "type": "command", "syntaxstring": "MIDI (command) midifile (string)", "uniquename": "c_MIDI", "evalcost": {"default": 1}, "implementation": "caosVM::c_MIDI", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_SINE": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Plays a sine wave coming from TARG\n\ntrack = 0 to fix the source at TARG's current location; track = 1 to follow\nview, track = 2 to inject it into the BGM source\n", "arguments": [{"name": "rate", "type": "integer"}, {"name": "stereo", "type": "integer"}, {"name": "track", "type": "integer"}, {"name": "amplitude", "type": "integer"}], "name": "DBG: SINE", "match": "SINE", "type": "command", "syntaxstring": "DBG: SINE (command) rate (integer) stereo (integer) track (integer) amplitude (integer)", "uniquename": "c_DBG_SINE", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_SINE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_DBG_SBGM": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Stops the BGM source. This probably doesn't do what you want it to do.\nDon't touch.\n", "arguments": [], "name": "DBG: SBGM", "match": "SBGM", "type": "command", "syntaxstring": "DBG: SBGM (command)", "uniquename": "c_DBG_SBGM", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_SBGM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PACE": {"filename": "caosVM_time.cpp", "category": "time", "description": "return speed factor of last ten ticks.\n\n< 1.0 = engine is ticking faster than BUZZ rating. > 1.0 = engine is ticking slower.\n\nYou might want to use this to reduce the amount of agents created or the amount of processing done if the speed factor is above 1.0.\n", "arguments": [], "name": "PACE", "match": "PACE", "type": "float", "syntaxstring": "PACE (float)", "uniquename": "v_PACE", "evalcost": {"default": 0}, "implementation": "caosVM::v_PACE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_BUZZ": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [{"name": "interval", "type": "integer"}], "name": "BUZZ", "match": "BUZZ", "type": "command", "syntaxstring": "BUZZ (command) interval (integer)", "uniquename": "c_BUZZ", "evalcost": {"default": 1}, "implementation": "caosVM::c_BUZZ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_BUZZ": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "BUZZ", "match": "BUZZ", "type": "integer", "syntaxstring": "BUZZ (integer)", "uniquename": "v_BUZZ", "evalcost": {"default": 0}, "implementation": "caosVM::v_BUZZ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DATE": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the day in the season of the current game world, starting at 0.\n", "arguments": [], "name": "DATE", "match": "DATE", "type": "integer", "syntaxstring": "DATE (integer)", "uniquename": "v_DATE", "evalcost": {"default": 0}, "implementation": "caosVM::v_DATE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HIST_DATE": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the day in the season of the current game world at the specified world tick, starting at 0. See DATE.\n", "arguments": [{"name": "tick", "type": "integer"}], "name": "HIST DATE", "match": "DATE", "type": "integer", "syntaxstring": "HIST DATE (integer) tick (integer)", "uniquename": "v_HIST_DATE", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_DATE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_SEAN": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the current game world season. 0 is spring, 1 is summer, 2 is autumn and 3 is winter.\n", "arguments": [], "name": "SEAN", "match": "SEAN", "type": "integer", "syntaxstring": "SEAN (integer)", "uniquename": "v_SEAN", "evalcost": {"default": 0}, "implementation": "caosVM::v_SEAN", "pragma": {"variants": "c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HIST_SEAN": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the current game world season at the specified world tick. 0 is spring, 1 is summer, 2 is autumn and 3 is winter. See SEAN.\n", "arguments": [{"name": "tick", "type": "integer"}], "name": "HIST SEAN", "match": "SEAN", "type": "integer", "syntaxstring": "HIST SEAN (integer) tick (integer)", "uniquename": "v_HIST_SEAN", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_SEAN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_TIME": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the time of day in the current game world. 0 is dawn, 1 is morning, 2 is afternoon, 3 is evening and 4 is night.\n", "arguments": [], "name": "TIME", "match": "TIME", "type": "integer", "syntaxstring": "TIME (integer)", "uniquename": "v_TIME", "evalcost": {"default": 0}, "implementation": "caosVM::v_TIME", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HIST_TIME": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the time of day in the current game world at the specified world tick. 0 is dawn, 1 is morning, 2 is afternoon, 3 is evening and 4 is night. See TIME.\n", "arguments": [{"name": "tick", "type": "integer"}], "name": "HIST TIME", "match": "TIME", "type": "integer", "syntaxstring": "HIST TIME (integer) tick (integer)", "uniquename": "v_HIST_TIME", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_TIME", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_YEAR": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the number of game years elapsed in the current world.\n", "arguments": [], "name": "YEAR", "match": "YEAR", "type": "integer", "syntaxstring": "YEAR (integer)", "uniquename": "v_YEAR", "evalcost": {"default": 0}, "implementation": "caosVM::v_YEAR", "pragma": {"variants": "c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HIST_YEAR": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the number of game years elapsed at the specified world tick. See YEAR.\n", "arguments": [{"name": "tick", "type": "integer"}], "name": "HIST YEAR", "match": "YEAR", "type": "integer", "syntaxstring": "HIST YEAR (integer) tick (integer)", "uniquename": "v_HIST_YEAR", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_YEAR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MSEC": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "MSEC", "match": "MSEC", "type": "integer", "syntaxstring": "MSEC (integer)", "uniquename": "v_MSEC", "evalcost": {"default": 0}, "implementation": "caosVM::v_MSEC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_WPAU": {"filename": "caosVM_time.cpp", "category": "time", "description": "If paused is 0, enable world ticks, otherwise (1) disable them.\n", "arguments": [{"name": "paused", "type": "integer"}], "name": "WPAU", "match": "WPAU", "type": "command", "syntaxstring": "WPAU (command) paused (integer)", "uniquename": "c_WPAU", "evalcost": {"default": 1}, "implementation": "caosVM::c_WPAU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_WPAU": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns 1 if world ticks are paused, or 0 otherwise.\n", "arguments": [], "name": "WPAU", "match": "WPAU", "type": "integer", "syntaxstring": "WPAU (integer)", "uniquename": "v_WPAU", "evalcost": {"default": 0}, "implementation": "caosVM::v_WPAU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PAUS": {"filename": "caosVM_time.cpp", "category": "time", "description": "If paused is 0, unpause target agent, otherwise (1) pause it.\n", "arguments": [{"name": "paused", "type": "integer"}], "name": "PAUS", "match": "PAUS", "type": "command", "syntaxstring": "PAUS (command) paused (integer)", "uniquename": "c_PAUS", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAUS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PAUS": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns 1 if target agent is paused, or 0 otherwise.\n", "arguments": [], "name": "PAUS", "match": "PAUS", "type": "integer", "syntaxstring": "PAUS (integer)", "uniquename": "v_PAUS", "evalcost": {"default": 0}, "implementation": "caosVM::v_PAUS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_RTIF": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the result of strftime with the current timestamp and format.\n", "arguments": [{"name": "timestamp", "type": "integer"}, {"name": "format", "type": "string"}], "name": "RTIF", "match": "RTIF", "type": "string", "syntaxstring": "RTIF (string) timestamp (integer) format (string)", "uniquename": "v_RTIF", "evalcost": {"default": 0}, "implementation": "caosVM::v_RTIF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_RTIM": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "RTIM", "match": "RTIM", "type": "integer", "syntaxstring": "RTIM (integer)", "uniquename": "v_RTIM", "evalcost": {"default": 0}, "implementation": "caosVM::v_RTIM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WTIK": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "WTIK", "match": "WTIK", "type": "integer", "syntaxstring": "WTIK (integer)", "uniquename": "v_WTIK", "evalcost": {"default": 0}, "implementation": "caosVM::v_WTIK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_RACE": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "RACE", "match": "RACE", "type": "integer", "syntaxstring": "RACE (integer)", "uniquename": "v_RACE", "evalcost": {"default": 0}, "implementation": "caosVM::v_RACE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_ETIK": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "ETIK", "match": "ETIK", "type": "integer", "syntaxstring": "ETIK (integer)", "uniquename": "v_ETIK", "evalcost": {"default": 0}, "implementation": "caosVM::v_ETIK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DAYT": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "DAYT", "match": "DAYT", "type": "integer", "syntaxstring": "DAYT (integer)", "uniquename": "v_DAYT", "evalcost": {"default": 0}, "implementation": "caosVM::v_DAYT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MONT": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "MONT", "match": "MONT", "type": "integer", "syntaxstring": "MONT (integer)", "uniquename": "v_MONT", "evalcost": {"default": 0}, "implementation": "caosVM::v_MONT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_VAxx": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Script-local variables (exist only in the current script) with xx being from 00 to 99.  Examples: VA01, VA45.\n", "arguments": [], "name": "VAxx", "match": "VAxx", "type": "variable", "syntaxstring": "VAxx (variable)", "uniquename": "v_VAxx", "evalcost": {"default": 0}, "implementation": "caosVM::v_VAxx", "pragma": {"stackdelta": "0", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_VAxx", "stackdelta": 0}, "v_MVxx": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Like OVxx, only for OWNR, not TARG.\n", "arguments": [], "name": "MVxx", "match": "MVxx", "type": "variable", "syntaxstring": "MVxx (variable)", "uniquename": "v_MVxx", "evalcost": {"default": 0}, "implementation": "caosVM::v_MVxx", "pragma": {"stackdelta": "0"}, "status": "maybe", "saveimpl": "caosVM::s_MVxx", "stackdelta": 0}, "c_ADDS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Append the given string to the given variable.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "value", "type": "string"}], "name": "ADDS", "match": "ADDS", "type": "command", "syntaxstring": "ADDS (command) var (variable) value (string)", "uniquename": "c_ADDS", "evalcost": {"default": 1}, "implementation": "caosVM::c_ADDS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SETS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Sets the given variable to the given string.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "value", "type": "string"}], "name": "SETS", "match": "SETS", "type": "command", "syntaxstring": "SETS (command) var (variable) value (string)", "uniquename": "c_SETS", "evalcost": {"default": 1}, "implementation": "caosVM::c_SETS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SETV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "%% Don't enable c1 or c2 here; we activate them with horrible hacks later\n\nSets the given variable to the given decimal value.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "value", "type": "decimal"}], "name": "SETV", "match": "SETV", "type": "command", "syntaxstring": "SETV (command) var (variable) value (decimal)", "uniquename": "c_SETV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SETV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SETA": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Sets the given variable to the given agent.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "value", "type": "agent"}], "name": "SETA", "match": "SETA", "type": "command", "syntaxstring": "SETA (command) var (variable) value (agent)", "uniquename": "c_SETA", "evalcost": {"default": 1}, "implementation": "caosVM::c_SETA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_OVxx": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Agent-local variables (exist only in the current agent's VM) from TARG, with xx being from 00 to 99.  Examples: OV01, OV45.\n", "arguments": [], "name": "OVxx", "match": "OVxx", "type": "variable", "syntaxstring": "OVxx (variable)", "uniquename": "v_OVxx", "evalcost": {"default": 0}, "implementation": "caosVM::v_OVxx", "pragma": {"stackdelta": "0", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_OVxx", "stackdelta": 0}, "v_TYPE": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns a integer value representing the type of data in 'value'.  0 is integer, 1 is float, 2 is string, 3 is agent.\n", "arguments": [{"name": "value", "type": "anything"}], "name": "TYPE", "match": "TYPE", "type": "integer", "syntaxstring": "TYPE (integer) value (anything)", "uniquename": "v_TYPE", "evalcost": {"default": 0}, "implementation": "caosVM::v_TYPE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_MODV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Divides the given variable by the given integer, and returns the remainder (var % mod).\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "mod", "type": "integer"}], "name": "MODV", "match": "MODV", "type": "command", "syntaxstring": "MODV (command) var (variable) mod (integer)", "uniquename": "c_MODV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MODV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ANDV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the result of a bitwise AND comparison of the given variable and the given integer (var & and).\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "and", "type": "integer"}], "name": "ANDV", "match": "ANDV", "type": "command", "syntaxstring": "ANDV (command) var (variable) and (integer)", "uniquename": "c_ANDV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ANDV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ORRV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the result of a bitwise OR comparison of the given variable and the given integer (var | or)\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "or", "type": "integer"}], "name": "ORRV", "match": "ORRV", "type": "command", "syntaxstring": "ORRV (command) var (variable) or (integer)", "uniquename": "c_ORRV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ORRV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ADDV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Adds the given integer to the given variable and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "add", "type": "integer"}], "name": "ADDV", "match": "ADDV", "type": "command", "syntaxstring": "ADDV (command) var (variable) add (integer)", "uniquename": "c_ADDV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ADDV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SUBV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Subtracts the given integer from the given variable and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "sub", "type": "integer"}], "name": "SUBV", "match": "SUBV", "type": "command", "syntaxstring": "SUBV (command) var (variable) sub (integer)", "uniquename": "c_SUBV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SUBV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_NEGV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the inverse of (negates) the given variable.  For example, 1 to -1, or -4 to 4.\n", "arguments": [{"name": "var", "type": "variable"}], "name": "NEGV", "match": "NEGV", "type": "command", "syntaxstring": "NEGV (command) var (variable)", "uniquename": "c_NEGV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_NEGV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DIVV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Divides the given variable by the given integer and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "div", "type": "decimal"}], "name": "DIVV", "match": "DIVV", "type": "command", "syntaxstring": "DIVV (command) var (variable) div (decimal)", "uniquename": "c_DIVV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_DIVV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_MULV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Multiplies the given variable by the given integer and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "mul", "type": "decimal"}], "name": "MULV", "match": "MULV", "type": "command", "syntaxstring": "MULV (command) var (variable) mul (decimal)", "uniquename": "c_MULV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MULV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_RAND": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns a random integer between 'value1' and 'value2', inclusive.\n", "arguments": [{"name": "value1", "type": "integer"}, {"name": "value2", "type": "integer"}], "name": "RAND", "match": "RAND", "type": "integer", "syntaxstring": "RAND (integer) value1 (integer) value2 (integer)", "uniquename": "v_RAND", "evalcost": {"default": 0}, "implementation": "caosVM::v_RAND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_REAF": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Re-reads all catalogue files.\n", "arguments": [], "name": "REAF", "match": "REAF", "type": "command", "syntaxstring": "REAF (command)", "uniquename": "c_REAF", "evalcost": {"default": 1}, "implementation": "caosVM::c_REAF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_UFOS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns 'uname -a' on platforms which support it, or OS details in another format otherwise.\n", "arguments": [], "name": "UFOS", "match": "UFOS", "type": "string", "syntaxstring": "UFOS (string)", "uniquename": "v_UFOS", "evalcost": {"default": 0}, "implementation": "caosVM::v_UFOS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MODU": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns information about which modules are being used by the engine (for now, backend and audio backend names).\n", "arguments": [], "name": "MODU", "match": "MODU", "type": "string", "syntaxstring": "MODU (string)", "uniquename": "v_MODU", "evalcost": {"default": 0}, "implementation": "caosVM::v_MODU", "pragma": {"variants": "all"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_GNAM": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the currently-running game (like \"Creatures 1\" or \"Docking Station\").\n", "arguments": [], "name": "GNAM", "match": "GNAM", "type": "string", "syntaxstring": "GNAM (string)", "uniquename": "v_GNAM", "evalcost": {"default": 0}, "implementation": "caosVM::v_GNAM", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_ABSV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Modifies the given variable, if negative, so that its value is positive (absolute value).\n", "arguments": [{"name": "var", "type": "variable"}], "name": "ABSV", "match": "ABSV", "type": "command", "syntaxstring": "ABSV (command) var (variable)", "uniquename": "c_ABSV", "evalcost": {"default": 1}, "implementation": "caosVM::c_ABSV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ACOS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the arccosine of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "ACOS", "match": "ACOS", "type": "float", "syntaxstring": "ACOS (float) x (float)", "uniquename": "v_ACOS", "evalcost": {"default": 0}, "implementation": "caosVM::v_ACOS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ASIN": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the arcsine of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "ASIN", "match": "ASIN", "type": "float", "syntaxstring": "ASIN (float) x (float)", "uniquename": "v_ASIN", "evalcost": {"default": 0}, "implementation": "caosVM::v_ASIN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ATAN": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the arctangent of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "ATAN", "match": "ATAN", "type": "float", "syntaxstring": "ATAN (float) x (float)", "uniquename": "v_ATAN", "evalcost": {"default": 0}, "implementation": "caosVM::v_ATAN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_COS_": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the cosine of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "COS_", "match": "COS_", "type": "float", "syntaxstring": "COS_ (float) x (float)", "uniquename": "v_COS_", "evalcost": {"default": 0}, "implementation": "caosVM::v_COS_", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_SIN_": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the sine of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "SIN_", "match": "SIN_", "type": "float", "syntaxstring": "SIN_ (float) x (float)", "uniquename": "v_SIN_", "evalcost": {"default": 0}, "implementation": "caosVM::v_SIN_", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_TAN_": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the tangent of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "TAN_", "match": "TAN_", "type": "float", "syntaxstring": "TAN_ (float) x (float)", "uniquename": "v_TAN_", "evalcost": {"default": 0}, "implementation": "caosVM::v_TAN_", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_SQRT": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the square root of v.\n", "arguments": [{"name": "v", "type": "float"}], "name": "SQRT", "match": "SQRT", "type": "float", "syntaxstring": "SQRT (float) v (float)", "uniquename": "v_SQRT", "evalcost": {"default": 0}, "implementation": "caosVM::v_SQRT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v__P1_": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "The first argument given to the current script.\n", "arguments": [], "name": "_P1_", "match": "_P1_", "type": "variable", "syntaxstring": "_P1_ (variable)", "uniquename": "v__P1_", "evalcost": {"default": 0}, "implementation": "caosVM::v_P1", "pragma": {"implementation": "caosVM::v_P1", "saveimpl": "caosVM::s_P1", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_P1", "stackdelta": 1}, "v__P2_": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "The second argument given to the current script.\n", "arguments": [], "name": "_P2_", "match": "_P2_", "type": "variable", "syntaxstring": "_P2_ (variable)", "uniquename": "v__P2_", "evalcost": {"default": 0}, "implementation": "caosVM::v_P2", "pragma": {"implementation": "caosVM::v_P2", "saveimpl": "caosVM::s_P2", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_P2", "stackdelta": 1}, "v_AVAR": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the value of OVxx for the given agent, where xx is equal to 'index'.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "index", "type": "integer"}], "name": "AVAR", "match": "AVAR", "type": "variable", "syntaxstring": "AVAR (variable) agent (agent) index (integer)", "uniquename": "v_AVAR", "evalcost": {"default": 0}, "implementation": "caosVM::v_AVAR", "status": "maybe", "saveimpl": "caosVM::s_AVAR", "stackdelta": -1}, "v_VTOS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns a string representation of the given value.\n", "arguments": [{"name": "value", "type": "decimal"}], "name": "VTOS", "match": "VTOS", "type": "string", "syntaxstring": "VTOS (string) value (decimal)", "uniquename": "v_VTOS", "evalcost": {"default": 0}, "implementation": "caosVM::v_VTOS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_CHAR": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the character at position 'index' of the given string.\nIndexes start at 1.\n", "arguments": [{"name": "str", "type": "string"}, {"name": "index", "type": "integer"}], "name": "CHAR", "match": "CHAR", "type": "integer", "syntaxstring": "CHAR (integer) str (string) index (integer)", "uniquename": "v_CHAR", "evalcost": {"default": 0}, "implementation": "caosVM::v_CHAR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_CHAR": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Sets the character at position 'index' of the given string.\nIndexes start at 1.\n", "arguments": [{"name": "string", "type": "variable"}, {"name": "index", "type": "integer"}, {"name": "character", "type": "integer"}], "name": "CHAR", "match": "CHAR", "type": "command", "syntaxstring": "CHAR (command) string (variable) index (integer) character (integer)", "uniquename": "c_CHAR", "evalcost": {"default": 1}, "implementation": "caosVM::c_CHAR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_ITOF": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Converts the given integer to a float.\n", "arguments": [{"name": "number", "type": "integer"}], "name": "ITOF", "match": "ITOF", "type": "float", "syntaxstring": "ITOF (float) number (integer)", "uniquename": "v_ITOF", "evalcost": {"default": 0}, "implementation": "caosVM::v_ITOF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_FTOI": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Converts the given float to an integer, by rounding.\n", "arguments": [{"name": "number", "type": "float"}], "name": "FTOI", "match": "FTOI", "type": "integer", "syntaxstring": "FTOI (integer) number (float)", "uniquename": "v_FTOI", "evalcost": {"default": 0}, "implementation": "caosVM::v_FTOI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_STRL": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the length in characters of the given string.\n", "arguments": [{"name": "string", "type": "string"}], "name": "STRL", "match": "STRL", "type": "integer", "syntaxstring": "STRL (integer) string (string)", "uniquename": "v_STRL", "evalcost": {"default": 0}, "implementation": "caosVM::v_STRL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_READ": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the value of the string at 'offset' inside the given catalogue tag.\nOffsets start at zero. Throws an error if tag doesn't exist.\n", "arguments": [{"name": "tag", "type": "string"}, {"name": "offset", "type": "integer"}], "name": "READ", "match": "READ", "type": "string", "syntaxstring": "READ (string) tag (string) offset (integer)", "uniquename": "v_READ", "evalcost": {"default": 0}, "implementation": "caosVM::v_READ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_REAQ": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns 1 if the specified catalogue tag exists, or 0 otherwise.\n", "arguments": [{"name": "tag", "type": "string"}], "name": "REAQ", "match": "REAQ", "type": "integer", "syntaxstring": "REAQ (integer) tag (string)", "uniquename": "v_REAQ", "evalcost": {"default": 0}, "implementation": "caosVM::v_REAQ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_CATA": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the agent category of the TARG agent.\n", "arguments": [], "name": "CATA", "match": "CATA", "type": "integer", "syntaxstring": "CATA (integer)", "uniquename": "v_CATA", "evalcost": {"default": 0}, "implementation": "caosVM::v_CATA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CATI": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the agent category for the given family/genus/species.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "CATI", "match": "CATI", "type": "integer", "syntaxstring": "CATI (integer) family (integer) genus (integer) species (integer)", "uniquename": "v_CATI", "evalcost": {"default": 0}, "implementation": "caosVM::v_CATI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_CATX": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns a string containing the name of the given category.\n", "arguments": [{"name": "category_id", "type": "integer"}], "name": "CATX", "match": "CATX", "type": "string", "syntaxstring": "CATX (string) category_id (integer)", "uniquename": "v_CATX", "evalcost": {"default": 0}, "implementation": "caosVM::v_CATX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_CATO": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Sets the agent category of the TARG agent. If the specified category is -1, sets the category based on the family/genus/species of the agent (see CATI).\n", "arguments": [{"name": "category_id", "type": "integer"}], "name": "CATO", "match": "CATO", "type": "command", "syntaxstring": "CATO (command) category_id (integer)", "uniquename": "c_CATO", "evalcost": {"default": 1}, "implementation": "caosVM::c_CATO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_WILD": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Searches for a catalogue tag starting with 'tag' and matching the given\nfamily/genus/species.  For instance, 'Agent Help 2 3 4' where family is 2,\ngenus is 3 and species is 4.  If it doesn't find it, it sets the minor value\nto 0 repeatedly until it either finds one, or discovers 'tag 0 0 0' doesn't\nexist, at which point an error is thrown.  If it does find a suitable one, it\nreturns the string at offset inside the tag. See READ.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "tag", "type": "string"}, {"name": "offset", "type": "integer"}], "name": "WILD", "match": "WILD", "type": "string", "syntaxstring": "WILD (string) family (integer) genus (integer) species (integer) tag (string) offset (integer)", "uniquename": "v_WILD", "evalcost": {"default": 0}, "implementation": "caosVM::v_WILD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_NAME": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Named, agent-local variables (like OVxx) in the TARG agent.\n", "arguments": [{"name": "name", "type": "anything"}], "name": "NAME", "match": "NAME", "type": "variable", "syntaxstring": "NAME (variable) name (anything)", "uniquename": "v_NAME", "evalcost": {"default": 0}, "implementation": "caosVM::v_NAME", "status": "maybe", "saveimpl": "caosVM::s_NAME", "stackdelta": 0}, "v_MAME": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Like NAME variables, except for OWNR rather than TARG.\n", "arguments": [{"name": "name", "type": "anything"}], "name": "MAME", "match": "MAME", "type": "variable", "syntaxstring": "MAME (variable) name (anything)", "uniquename": "v_MAME", "evalcost": {"default": 0}, "implementation": "caosVM::v_MAME", "status": "maybe", "saveimpl": "caosVM::s_MAME", "stackdelta": 0}, "v_SUBS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the text in a string starting at 'start' into the string (starting at 1), and with 'count' characters.\n", "arguments": [{"name": "value", "type": "string"}, {"name": "start", "type": "integer"}, {"name": "count", "type": "integer"}], "name": "SUBS", "match": "SUBS", "type": "string", "syntaxstring": "SUBS (string) value (string) start (integer) count (integer)", "uniquename": "v_SUBS", "evalcost": {"default": 0}, "implementation": "caosVM::v_SUBS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_STOI": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the provided string as an integer, or 0 if it can't be converted.\n", "arguments": [{"name": "string", "type": "string"}], "name": "STOI", "match": "STOI", "type": "integer", "syntaxstring": "STOI (integer) string (string)", "uniquename": "v_STOI", "evalcost": {"default": 0}, "implementation": "caosVM::v_STOI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_STOF": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the provided string as a float, or 0 if it can't be converted.\n", "arguments": [{"name": "string", "type": "string"}], "name": "STOF", "match": "STOF", "type": "float", "syntaxstring": "STOF (float) string (string)", "uniquename": "v_STOF", "evalcost": {"default": 0}, "implementation": "caosVM::v_STOF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_LOWA": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Return a lower-cased version of a string.\n", "arguments": [{"name": "string", "type": "string"}], "name": "LOWA", "match": "LOWA", "type": "string", "syntaxstring": "LOWA (string) string (string)", "uniquename": "v_LOWA", "evalcost": {"default": 0}, "implementation": "caosVM::v_LOWA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_UPPA": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Return an upper-cased version of a string.\n", "arguments": [{"name": "string", "type": "string"}], "name": "UPPA", "match": "UPPA", "type": "string", "syntaxstring": "UPPA (string) string (string)", "uniquename": "v_UPPA", "evalcost": {"default": 0}, "implementation": "caosVM::v_UPPA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_SINS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Searches for an occurance of 'searchstring' inside 'string', starting at the given index inside 'string' (first character is 1).\nThe index of the 'searchstring' inside the string is returned, or -1 if the searchstring wasn't found.\n", "arguments": [{"name": "string", "type": "string"}, {"name": "index", "type": "integer"}, {"name": "searchstring", "type": "string"}], "name": "SINS", "match": "SINS", "type": "integer", "syntaxstring": "SINS (integer) string (string) index (integer) searchstring (string)", "uniquename": "v_SINS", "evalcost": {"default": 0}, "implementation": "caosVM::v_SINS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_REAN": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Return number of strings associated with the catalogue tag specified.\n", "arguments": [{"name": "tag", "type": "string"}], "name": "REAN", "match": "REAN", "type": "integer", "syntaxstring": "REAN (integer) tag (string)", "uniquename": "v_REAN", "evalcost": {"default": 0}, "implementation": "caosVM::v_REAN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DELN": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Delete the specified NAME variable on the target agent.\n", "arguments": [{"name": "name", "type": "anything"}], "name": "DELN", "match": "DELN", "type": "command", "syntaxstring": "DELN (command) name (anything)", "uniquename": "c_DELN", "evalcost": {"default": 1}, "implementation": "caosVM::c_DELN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_GAMN": {"filename": "caosVM_variables.cpp", "category": "variables", "arguments": [{"name": "previous", "type": "string"}], "name": "GAMN", "match": "GAMN", "type": "string", "syntaxstring": "GAMN (string) previous (string)", "uniquename": "v_GAMN", "evalcost": {"default": 0}, "implementation": "caosVM::v_GAMN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NAMN": {"filename": "caosVM_variables.cpp", "category": "variables", "arguments": [{"name": "previous", "type": "variable"}], "name": "NAMN", "match": "NAMN", "type": "command", "syntaxstring": "NAMN (command) previous (variable)", "uniquename": "c_NAMN", "evalcost": {"default": 1}, "implementation": "caosVM::c_NAMN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_POWV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Raises value to the exponent power, and saves the result back in value.\nResults are undefined if value is negative.\n\nOpenc2e-only command\n", "arguments": [{"name": "value", "type": "variable"}, {"name": "exponent", "type": "decimal"}], "name": "POWV", "match": "POWV", "type": "command", "syntaxstring": "POWV (command) value (variable) exponent (decimal)", "uniquename": "c_POWV", "evalcost": {"default": 1}, "implementation": "caosVM::c_POWV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_VEC_MAKE": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Creates and returns a vector with the given components.\n\nOpenc2e-only command\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "VEC: MAKE", "match": "MAKE", "type": "vector", "syntaxstring": "VEC: MAKE (vector) x (float) y (float)", "uniquename": "v_VEC_MAKE", "namespace": "vec:", "evalcost": {"default": 0}, "implementation": "caosVM::v_VEC_MAKE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_VEC_GETC": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Extracts the components of vector vec and places them in x and y.\n\nOpenc2e-only command\n", "arguments": [{"name": "vec", "type": "vector"}, {"name": "x", "type": "variable"}, {"name": "y", "type": "variable"}], "name": "VEC: GETC", "match": "GETC", "type": "command", "syntaxstring": "VEC: GETC (command) vec (vector) x (variable) y (variable)", "uniquename": "c_VEC_GETC", "namespace": "vec:", "evalcost": {"default": 1}, "implementation": "caosVM::c_VEC_GETC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_VEC_ANGL": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Find and return the angle from the X-axis of the given vector.\nThis is computed using atan(y/x) if X is nonzero, and a hard-coded\nreturn if X is nonzero. If the input vector is the null vector (0,0),\nzero will be returned.\n\nThe returned angle is in degrees, and in the range -180 to 180 degrees.\n\nOpenc2e-only command.\n", "arguments": [{"name": "vec", "type": "vector"}], "name": "VEC: ANGL", "match": "ANGL", "type": "float", "syntaxstring": "VEC: ANGL (float) vec (vector)", "uniquename": "v_VEC_ANGL", "namespace": "vec:", "evalcost": {"default": 0}, "implementation": "caosVM::v_VEC_ANGL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_VEC_SUBV": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Subtracts vec2 from vec1 and stores the result in vec1.\n\nOpenc2e-only command.\n", "arguments": [{"name": "vec1", "type": "variable"}, {"name": "vec2", "type": "vector"}], "name": "VEC: SUBV", "match": "SUBV", "type": "command", "syntaxstring": "VEC: SUBV (command) vec1 (variable) vec2 (vector)", "uniquename": "c_VEC_SUBV", "namespace": "vec:", "evalcost": {"default": 1}, "implementation": "caosVM::c_VEC_SUBV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_VEC_ADDV": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Adds vec1 to vec2 and stores the result in vec1.\n\nOpenc2e-only command.\n", "arguments": [{"name": "vec1", "type": "variable"}, {"name": "vec2", "type": "vector"}], "name": "VEC: ADDV", "match": "ADDV", "type": "command", "syntaxstring": "VEC: ADDV (command) vec1 (variable) vec2 (vector)", "uniquename": "c_VEC_ADDV", "namespace": "vec:", "evalcost": {"default": 1}, "implementation": "caosVM::c_VEC_ADDV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_VEC_MULV": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Multiplies the magnitude of the vector vec by mag, and stores the result\nin vec.\n\nOpenc2e-only command\n", "arguments": [{"name": "vec", "type": "variable"}, {"name": "mag", "type": "decimal"}], "name": "VEC: MULV", "match": "MULV", "type": "command", "syntaxstring": "VEC: MULV (command) vec (variable) mag (decimal)", "uniquename": "c_VEC_MULV", "namespace": "vec:", "evalcost": {"default": 1}, "implementation": "caosVM::c_VEC_MULV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_VEC_UNIT": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Constructs and returns a unit vector with angle angle.\n\nOpenc2e-only command,\n", "arguments": [{"name": "angle", "type": "decimal"}], "name": "VEC: UNIT", "match": "UNIT", "type": "vector", "syntaxstring": "VEC: UNIT (vector) angle (decimal)", "uniquename": "v_VEC_UNIT", "namespace": "vec:", "evalcost": {"default": 0}, "implementation": "caosVM::v_VEC_UNIT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_VEC_NULL": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Returns the nullary (0,0) vector.\n\nOpenc2e-only command\n", "arguments": [], "name": "VEC: NULL", "match": "NULL", "type": "vector", "syntaxstring": "VEC: NULL (vector)", "uniquename": "v_VEC_NULL", "namespace": "vec:", "evalcost": {"default": 0}, "implementation": "caosVM::v_VEC_NULL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_VEC_MAGN": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Returns the magnitude of the passed vector.\n\nOpenc2e-only command.\n", "arguments": [{"name": "vec", "type": "vector"}], "name": "VEC: MAGN", "match": "MAGN", "type": "float", "syntaxstring": "VEC: MAGN (float) vec (vector)", "uniquename": "v_VEC_MAGN", "namespace": "vec:", "evalcost": {"default": 0}, "implementation": "caosVM::v_VEC_MAGN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_VEC_SETV": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Sets the variable passed in dest to the vector in src\n\nOpenc2e-only command\n", "arguments": [{"name": "dest", "type": "variable"}, {"name": "src", "type": "vector"}], "name": "VEC: SETV", "match": "SETV", "type": "command", "syntaxstring": "VEC: SETV (command) dest (variable) src (vector)", "uniquename": "c_VEC_SETV", "namespace": "vec:", "evalcost": {"default": 1}, "implementation": "caosVM::c_VEC_SETV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_CABN": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [{"name": "left", "type": "integer"}, {"name": "top", "type": "integer"}, {"name": "right", "type": "integer"}, {"name": "bottom", "type": "integer"}], "name": "CABN", "match": "CABN", "type": "command", "syntaxstring": "CABN (command) left (integer) top (integer) right (integer) bottom (integer)", "uniquename": "c_CABN", "evalcost": {"default": 1}, "implementation": "caosVM::c_CABN", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_CABW": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [{"name": "cap", "type": "integer"}], "name": "CABW", "match": "CABW", "type": "command", "syntaxstring": "CABW (command) cap (integer)", "uniquename": "c_CABW", "evalcost": {"default": 1}, "implementation": "caosVM::c_CABW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SPAS": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "description": "make specified vehicle agent pick up specified passenger\n", "arguments": [{"name": "vehicle", "type": "agent"}, {"name": "passenger", "type": "agent"}], "name": "SPAS", "match": "SPAS", "type": "command", "syntaxstring": "SPAS (command) vehicle (agent) passenger (agent)", "uniquename": "c_SPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_SPAS", "pragma": {"variants": "c1 c2 cv c3"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_GPAS": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "description": "pick up all nearby agents matching classifier, as passengers to target vehicle\noptions = 0 to pick up based on agent bounding rect, or 1 to pick up based on cabin rect\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "options", "type": "integer"}], "name": "GPAS", "match": "GPAS", "type": "command", "syntaxstring": "GPAS (command) family (integer) genus (integer) species (integer) options (integer)", "uniquename": "c_GPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_GPAS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_DPAS": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "description": "drop all agents matching classifier from target vehicle\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "DPAS", "match": "DPAS", "type": "command", "syntaxstring": "DPAS (command) family (integer) genus (integer) species (integer)", "uniquename": "c_DPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_DPAS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_CABP": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [{"name": "plane", "type": "integer"}], "name": "CABP", "match": "CABP", "type": "command", "syntaxstring": "CABP (command) plane (integer)", "uniquename": "c_CABP", "evalcost": {"default": 1}, "implementation": "caosVM::c_CABP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_CABV": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [{"name": "room_id", "type": "integer"}], "name": "CABV", "match": "CABV", "type": "command", "syntaxstring": "CABV (command) room_id (integer)", "uniquename": "c_CABV", "evalcost": {"default": 1}, "implementation": "caosVM::c_CABV", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_CABV": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [], "name": "CABV", "match": "CABV", "type": "integer", "syntaxstring": "CABV (integer)", "uniquename": "v_CABV", "evalcost": {"default": 0}, "implementation": "caosVM::v_CABV", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_RPAS": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [{"name": "vehicle", "type": "agent"}, {"name": "passenger", "type": "agent"}], "name": "RPAS", "match": "RPAS", "type": "command", "syntaxstring": "RPAS (command) vehicle (agent) passenger (agent)", "uniquename": "c_RPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_RPAS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_LOAD": {"filename": "caosVM_world.cpp", "category": "world", "arguments": [{"name": "worldname", "type": "string"}], "name": "LOAD", "match": "LOAD", "type": "command", "syntaxstring": "LOAD (command) worldname (string)", "uniquename": "c_LOAD", "evalcost": {"default": 1}, "implementation": "caosVM::c_LOAD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SAVE": {"filename": "caosVM_world.cpp", "category": "world", "description": "Save the world at the start of the next tick. Beware; if you don't put this\nin an INST, it might save directly after your SAVE call (meaning upon loading,\nthe script will execute the next instruction, often QUIT or LOAD, which is\nbad).\n", "arguments": [], "name": "SAVE", "match": "SAVE", "type": "command", "syntaxstring": "SAVE (command)", "uniquename": "c_SAVE", "evalcost": {"default": 1}, "implementation": "caosVM::c_SAVE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_QUIT": {"filename": "caosVM_world.cpp", "category": "world", "description": "Quit the game engine at the start of the nexttick\n", "arguments": [], "name": "QUIT", "match": "QUIT", "type": "command", "syntaxstring": "QUIT (command)", "uniquename": "c_QUIT", "evalcost": {"default": 1}, "implementation": "caosVM::c_QUIT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_WNAM": {"filename": "caosVM_world.cpp", "category": "world", "description": "Returns the name of the current world.\n", "arguments": [], "name": "WNAM", "match": "WNAM", "type": "string", "syntaxstring": "WNAM (string)", "uniquename": "v_WNAM", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNAM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WUID": {"filename": "caosVM_world.cpp", "category": "world", "description": "Returns the unique identifier (moniker?) of the current world.\n", "arguments": [], "name": "WUID", "match": "WUID", "type": "string", "syntaxstring": "WUID (string)", "uniquename": "v_WUID", "evalcost": {"default": 0}, "implementation": "caosVM::v_WUID", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_WTNT": {"filename": "caosVM_world.cpp", "category": "world", "description": "Sets an index in the mysterious global tint table to have the specified values. No, we have no idea what that means either.\n", "arguments": [{"name": "index", "type": "integer"}, {"name": "red", "type": "integer"}, {"name": "green", "type": "integer"}, {"name": "blue", "type": "integer"}, {"name": "rotation", "type": "integer"}, {"name": "swap", "type": "integer"}], "name": "WTNT", "match": "WTNT", "type": "command", "syntaxstring": "WTNT (command) index (integer) red (integer) green (integer) blue (integer) rotation (integer) swap (integer)", "uniquename": "c_WTNT", "evalcost": {"default": 1}, "implementation": "caosVM::c_WTNT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "v_NWLD": {"filename": "caosVM_world.cpp", "category": "world", "arguments": [], "name": "NWLD", "match": "NWLD", "type": "integer", "syntaxstring": "NWLD (integer)", "uniquename": "v_NWLD", "evalcost": {"default": 0}, "implementation": "caosVM::v_NWLD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_WRLD": {"filename": "caosVM_world.cpp", "category": "world", "description": "Create a new world directory to prepare for the creation of the specified world.\n", "arguments": [{"name": "name", "type": "string"}], "name": "WRLD", "match": "WRLD", "type": "command", "syntaxstring": "WRLD (command) name (string)", "uniquename": "c_WRLD", "evalcost": {"default": 1}, "implementation": "caosVM::c_WRLD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_WRLD": {"filename": "caosVM_world.cpp", "category": "world", "description": "Return the name of the specified world (zero-indexed, see NWLD).\n", "arguments": [{"name": "world", "type": "integer"}], "name": "WRLD", "match": "WRLD", "type": "string", "syntaxstring": "WRLD (string) world (integer)", "uniquename": "v_WRLD", "evalcost": {"default": 0}, "implementation": "caosVM::v_WRLD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PSWD": {"filename": "caosVM_world.cpp", "category": "world", "arguments": [{"name": "password", "type": "string"}], "name": "PSWD", "match": "PSWD", "type": "command", "syntaxstring": "PSWD (command) password (string)", "uniquename": "c_PSWD", "evalcost": {"default": 1}, "implementation": "caosVM::c_PSWD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PSWD": {"filename": "caosVM_world.cpp", "category": "world", "description": "Return the password for the specified world (zero-indexed, see NWLD), or an empty string for no password.\n", "arguments": [{"name": "world", "type": "integer"}], "name": "PSWD", "match": "PSWD", "type": "string", "syntaxstring": "PSWD (string) world (integer)", "uniquename": "v_PSWD", "evalcost": {"default": 0}, "implementation": "caosVM::v_PSWD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_WNTI": {"filename": "caosVM_world.cpp", "category": "world", "description": "Return the world identifier for the specified world name, or -1 if it doesn't exist.\n", "arguments": [{"name": "name", "type": "string"}], "name": "WNTI", "match": "WNTI", "type": "integer", "syntaxstring": "WNTI (integer) name (string)", "uniquename": "v_WNTI", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNTI", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DELW": {"filename": "caosVM_world.cpp", "category": "world", "description": "Delete the specified world directory and all contents.\n", "arguments": [{"name": "name", "type": "string"}], "name": "DELW", "match": "DELW", "type": "command", "syntaxstring": "DELW (command) name (string)", "uniquename": "c_DELW", "evalcost": {"default": 1}, "implementation": "caosVM::c_DELW", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}}, "sm": {"v_TOUC": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Determines whether the two given agents are touching.  Returns 0 (if not) or 1 (if so).\n", "arguments": [{"name": "first", "type": "agent"}, {"name": "second", "type": "agent"}], "name": "TOUC", "match": "TOUC", "type": "integer", "syntaxstring": "TOUC (integer) first (agent) second (agent)", "uniquename": "v_TOUC", "evalcost": {"default": 0, "c1": 0, "c2": 0}, "implementation": "caosVM::v_TOUC", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_RTAR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets TARG to a random agent with the given family/genus/species.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "RTAR", "match": "RTAR", "type": "command", "syntaxstring": "RTAR (command) family (integer) genus (integer) species (integer)", "uniquename": "c_RTAR", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_RTAR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_TTAR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Locates a random agent that is touching OWNR (see ETCH) and that\nmatches the given classifier, and sets it to TARG.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "TTAR", "match": "TTAR", "type": "command", "syntaxstring": "TTAR (command) family (integer) genus (integer) species (integer)", "uniquename": "c_TTAR", "evalcost": {"default": 1}, "implementation": "caosVM::c_TTAR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_STAR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Locates a random agent that is visible to OWNR (see ESEE) and that\nmatches the given classifier, then sets it to TARG.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "STAR", "match": "STAR", "type": "command", "syntaxstring": "STAR (command) family (integer) genus (integer) species (integer)", "uniquename": "c_STAR", "evalcost": {"default": 1}, "implementation": "caosVM::c_STAR", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_NEW_SIMP": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Creates a new simple agent with given family/genus/species, given spritefile with image_count sprites\navailable starting at first_image in the spritefile, at the screen depth given by plane.\nTARG is set to the newly-created agent.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "sprite_file", "type": "string"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "plane", "type": "integer"}], "name": "NEW: SIMP", "match": "SIMP", "type": "command", "syntaxstring": "NEW: SIMP (command) family (integer) genus (integer) species (integer) sprite_file (string) image_count (integer) first_image (integer) plane (integer)", "uniquename": "c_NEW_SIMP", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_SIMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "c_NEW_COMP": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Creates a new composite agent with given family/genus/species, given spritefile with image_count sprites\navailable starting at first_image in the spritefile, with the first part at the screen depth given by plane.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "sprite_file", "type": "string"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "plane", "type": "integer"}], "name": "NEW: COMP", "match": "COMP", "type": "command", "syntaxstring": "NEW: COMP (command) family (integer) genus (integer) species (integer) sprite_file (string) image_count (integer) first_image (integer) plane (integer)", "uniquename": "c_NEW_COMP", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_COMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "c_NEW_VHCL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Creates a new vehicle agent with given family/genus/species, given spritefile with image_count sprites\navailable starting at first_image in the spritefile, with the first part at the screen depth given by plane.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "sprite_file", "type": "string"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "plane", "type": "integer"}], "name": "NEW: VHCL", "match": "VHCL", "type": "command", "syntaxstring": "NEW: VHCL (command) family (integer) genus (integer) species (integer) sprite_file (string) image_count (integer) first_image (integer) plane (integer)", "uniquename": "c_NEW_VHCL", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_VHCL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "v_TARG": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns TARG, the currently-targeted agent.\n", "arguments": [], "name": "TARG", "match": "TARG", "type": "agent", "syntaxstring": "TARG (agent)", "uniquename": "v_TARG", "evalcost": {"default": 0}, "implementation": "caosVM::v_TARG", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_OWNR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns OWNR, the agent that is running the script.\n", "arguments": [], "name": "OWNR", "match": "OWNR", "type": "agent", "syntaxstring": "OWNR (agent)", "uniquename": "v_OWNR", "evalcost": {"default": 0, "c1": 0, "c2": 0}, "implementation": "caosVM::v_OWNR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NULL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns a null (zero) agent.\n", "arguments": [], "name": "NULL", "match": "NULL", "type": "agent", "syntaxstring": "NULL (agent)", "uniquename": "v_NULL", "evalcost": {"default": 0}, "implementation": "caosVM::v_NULL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_POSE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the displayed sprite of TARG to the frame in the sprite file with the given integer.\n", "arguments": [{"name": "pose", "type": "integer"}], "name": "POSE", "match": "POSE", "type": "command", "syntaxstring": "POSE (command) pose (integer)", "uniquename": "c_POSE", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_POSE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ATTR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets attributes of the TARG agent.\n", "arguments": [{"name": "attr", "type": "integer"}], "name": "ATTR", "match": "ATTR", "type": "command", "syntaxstring": "ATTR (command) attr (integer)", "uniquename": "c_ATTR", "evalcost": {"default": 1}, "implementation": "caosVM::c_ATTR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ATTR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Attributes of the TARG agent.\n", "arguments": [], "name": "ATTR", "match": "ATTR", "type": "variable", "syntaxstring": "ATTR (variable)", "uniquename": "v_ATTR", "evalcost": {"default": 0}, "implementation": "caosVM::v_ATTR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_ATTR", "stackdelta": 1}, "c_TICK": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Initiates the agent timer-- the Timer script will then be run once every tickrate ticks.\nSetting tickrate to zero will stop the timer.\n", "arguments": [{"name": "tickrate", "type": "integer"}], "name": "TICK", "match": "TICK", "type": "command", "syntaxstring": "TICK (command) tickrate (integer)", "uniquename": "c_TICK", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_TICK", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_BHVR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the behaviour of the TARG agent.\n", "arguments": [{"name": "bhvr", "type": "integer"}], "name": "BHVR", "match": "BHVR", "type": "command", "syntaxstring": "BHVR (command) bhvr (integer)", "uniquename": "c_BHVR", "evalcost": {"default": 1}, "implementation": "caosVM::c_BHVR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TARG": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets TARG (the target agent) to the given agent.\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "TARG", "match": "TARG", "type": "command", "syntaxstring": "TARG (command) agent (agent)", "uniquename": "c_TARG", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_TARG", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FROM": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the agent that sent the message being processed, or NULL if no agent was involved.\n", "arguments": [], "name": "FROM", "match": "FROM", "type": "agent", "syntaxstring": "FROM (agent)", "uniquename": "v_FROM", "evalcost": {"default": 0}, "implementation": "caosVM::v_FROM", "pragma": {"variants": "c1 c2 cv sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the number of the frame in the TARG part/agent's sprite file that is currently being displayed, or -1 if part# doesn't exist on a compound agent.\n", "arguments": [], "name": "POSE", "match": "POSE", "type": "integer", "syntaxstring": "POSE (integer)", "uniquename": "v_POSE", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_KILL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Destroys the agent in question. However, you cannot destroy PNTR.\nRemember, use DEAD first for Creatures!\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "KILL", "match": "KILL", "type": "command", "syntaxstring": "KILL (command) agent (agent)", "uniquename": "c_KILL", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_KILL", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ANIM": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the animation string for TARG, in the format '1 2 3 4'.\nIf it ends with '255', loops back to beginning; if it ends with '255 X', loops back to frame X.\n\n<i>todo: compound agent stuff</i>\n", "arguments": [{"name": "poselist", "type": "bytestring"}], "name": "ANIM", "match": "ANIM", "type": "command", "syntaxstring": "ANIM (command) poselist (bytestring)", "uniquename": "c_ANIM", "evalcost": {"default": 1}, "implementation": "caosVM::c_ANIM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ANMS": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Exactly like ANIM, only using a string and not a bytestring for poselist source.\n", "arguments": [{"name": "poselist", "type": "string"}], "name": "ANMS", "match": "ANMS", "type": "command", "syntaxstring": "ANMS (command) poselist (string)", "uniquename": "c_ANMS", "evalcost": {"default": 1}, "implementation": "caosVM::c_ANMS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ABBA": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the first_image (ie, absolute base) value for the current agent/part, or -1 if part# doesn't exist on a compound agent.\n", "arguments": [], "name": "ABBA", "match": "ABBA", "type": "integer", "syntaxstring": "ABBA (integer)", "uniquename": "v_ABBA", "evalcost": {"default": 0}, "implementation": "caosVM::v_ABBA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_BASE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the frame in the TARG agent's spritefile that will be used as its base image.\nThis is relative to the first image set with one of the NEW: commands.\n", "arguments": [{"name": "index", "type": "integer"}], "name": "BASE", "match": "BASE", "type": "command", "syntaxstring": "BASE (command) index (integer)", "uniquename": "c_BASE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_BASE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_BASE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the frame in the TARG agent/part's spritefile being used as the BASE image, or -1 if part# doesn't exist on a compound agent.\n", "arguments": [], "name": "BASE", "match": "BASE", "type": "integer", "syntaxstring": "BASE (integer)", "uniquename": "v_BASE", "evalcost": {"default": 0}, "implementation": "caosVM::v_BASE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_BHVR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the behaviour of the TARG agent.\n", "arguments": [], "name": "BHVR", "match": "BHVR", "type": "integer", "syntaxstring": "BHVR (integer)", "uniquename": "v_BHVR", "evalcost": {"default": 0}, "implementation": "caosVM::v_BHVR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CARR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the agent that is carrying the TARG agent.  If TARG is not being carried, returns\nNULL.\n", "arguments": [], "name": "CARR", "match": "CARR", "type": "agent", "syntaxstring": "CARR (agent)", "uniquename": "v_CARR", "evalcost": {"default": 0}, "implementation": "caosVM::v_CARR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_FMLY": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the family of the TARG agent.\n", "arguments": [], "name": "FMLY", "match": "FMLY", "type": "integer", "syntaxstring": "FMLY (integer)", "uniquename": "v_FMLY", "evalcost": {"default": 0}, "implementation": "caosVM::v_FMLY", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_GNUS": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the genus of the TARG agent.\n", "arguments": [], "name": "GNUS", "match": "GNUS", "type": "integer", "syntaxstring": "GNUS (integer)", "uniquename": "v_GNUS", "evalcost": {"default": 0}, "implementation": "caosVM::v_GNUS", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_SPCS": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the species of the TARG agent.\n", "arguments": [], "name": "SPCS", "match": "SPCS", "type": "integer", "syntaxstring": "SPCS (integer)", "uniquename": "v_SPCS", "evalcost": {"default": 0}, "implementation": "caosVM::v_SPCS", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_PLNE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the plane (z-order) of the TARG agent.\n", "arguments": [], "name": "PLNE", "match": "PLNE", "type": "integer", "syntaxstring": "PLNE (integer)", "uniquename": "v_PLNE", "evalcost": {"default": 0}, "implementation": "caosVM::v_PLNE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_PNTR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the pointer agent (the Hand).\n", "arguments": [], "name": "PNTR", "match": "PNTR", "type": "agent", "syntaxstring": "PNTR (agent)", "uniquename": "v_PNTR", "evalcost": {"default": 0}, "implementation": "caosVM::v_PNTR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MESG_WRIT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sends a message of type message_id to the given agent.  FROM will be set to OWNR unless\nthere is no agent involved in sending the message.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "message_id", "type": "integer"}], "name": "MESG WRIT", "match": "WRIT", "type": "command", "syntaxstring": "MESG WRIT (command) agent (agent) message_id (integer)", "uniquename": "c_MESG_WRIT", "namespace": "mesg", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MESG_WRIT", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_MESG_WRT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sends a message of type message_id to the given agent, much like MESG WRIT, but with the\naddition of parameters.  The message will be sent after waiting the number of ticks set\nin delay (except doesn't, right now.  Delay must be set to zero for now.)\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "message_id", "type": "integer"}, {"name": "param_1", "type": "anything"}, {"name": "param_2", "type": "anything"}, {"name": "delay", "type": "integer"}], "name": "MESG WRT+", "match": "WRT+", "type": "command", "syntaxstring": "MESG WRT+ (command) agent (agent) message_id (integer) param_1 (anything) param_2 (anything) delay (integer)", "uniquename": "c_MESG_WRT", "namespace": "mesg", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MESG_WRT", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "v_TOTL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the total number of in-game agents matching the given family/genus/species.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "TOTL", "match": "TOTL", "type": "integer", "syntaxstring": "TOTL (integer) family (integer) genus (integer) species (integer)", "uniquename": "v_TOTL", "evalcost": {"default": 0}, "implementation": "caosVM::v_TOTL", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_SHOW": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets visibility of the TARG agent to cameras. 0 = invisible, 1 = visible.\n", "arguments": [{"name": "visibility", "type": "integer"}], "name": "SHOW", "match": "SHOW", "type": "command", "syntaxstring": "SHOW (command) visibility (integer)", "uniquename": "c_SHOW", "evalcost": {"default": 1}, "implementation": "caosVM::c_SHOW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_SHOW": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [], "name": "SHOW", "match": "SHOW", "type": "integer", "syntaxstring": "SHOW (integer)", "uniquename": "v_SHOW", "evalcost": {"default": 0}, "implementation": "caosVM::v_SHOW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSX": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the X position of the TARG agent in the world.\n", "arguments": [], "name": "POSX", "match": "POSX", "type": "float", "syntaxstring": "POSX (float)", "uniquename": "v_POSX", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSX", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSY": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the Y position of the TARG agent in the world.\n", "arguments": [], "name": "POSY", "match": "POSY", "type": "float", "syntaxstring": "POSY (float)", "uniquename": "v_POSY", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSY", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FRAT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the delay between frame changes of the TARG agent or current PART.\nMust be from 1 to 255, 1 being the normal rate, 2 being half as quickly, and so on.\n", "arguments": [{"name": "framerate", "type": "integer"}], "name": "FRAT", "match": "FRAT", "type": "command", "syntaxstring": "FRAT (command) framerate (integer)", "uniquename": "c_FRAT", "evalcost": {"default": 1}, "implementation": "caosVM::c_FRAT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_OVER": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Waits (blocks the TARG agent) until the animation of the TARG agent or PART is over.\n", "arguments": [], "name": "OVER", "match": "OVER", "type": "command", "syntaxstring": "OVER (command)", "uniquename": "c_OVER", "evalcost": {"default": 1}, "implementation": "caosVM::c_OVER", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PUHL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets relative x/y coordinates for TARG's pickup point.\nPose is -1 for all poses, or a pose relative to the first image specified in NEW: (not BASE).\n", "arguments": [{"name": "pose", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "PUHL", "match": "PUHL", "type": "command", "syntaxstring": "PUHL (command) pose (integer) x (integer) y (integer)", "uniquename": "c_PUHL", "evalcost": {"default": 1}, "implementation": "caosVM::c_PUHL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_PUHL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the coordinate for TARG's pickup point. x_or_y should be 1 for x, or 2 for y.\n", "arguments": [{"name": "pose", "type": "integer"}, {"name": "x_or_y", "type": "integer"}], "name": "PUHL", "match": "PUHL", "type": "integer", "syntaxstring": "PUHL (integer) pose (integer) x_or_y (integer)", "uniquename": "v_PUHL", "evalcost": {"default": 0}, "implementation": "caosVM::v_PUHL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_POSL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the left side of TARG's bounding box.\n", "arguments": [], "name": "POSL", "match": "POSL", "type": "float", "syntaxstring": "POSL (float)", "uniquename": "v_POSL", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSL", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POST": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the top side of TARG's bounding box.\n", "arguments": [], "name": "POST", "match": "POST", "type": "float", "syntaxstring": "POST (float)", "uniquename": "v_POST", "evalcost": {"default": 0}, "implementation": "caosVM::v_POST", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the right side of TARG's bounding box.\n", "arguments": [], "name": "POSR", "match": "POSR", "type": "float", "syntaxstring": "POSR (float)", "uniquename": "v_POSR", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSR", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_POSB": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the position of the bottom side of TARG's bounding box.\n", "arguments": [], "name": "POSB", "match": "POSB", "type": "float", "syntaxstring": "POSB (float)", "uniquename": "v_POSB", "evalcost": {"default": 0}, "implementation": "caosVM::v_POSB", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WDTH": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the TARG agent's width.\n", "arguments": [], "name": "WDTH", "match": "WDTH", "type": "integer", "syntaxstring": "WDTH (integer)", "uniquename": "v_WDTH", "evalcost": {"default": 0}, "implementation": "caosVM::v_WDTH", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PLNE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the plane (the z-order) of the TARG agent.  Higher values are closer to the camera.\n", "arguments": [{"name": "depth", "type": "integer"}], "name": "PLNE", "match": "PLNE", "type": "command", "syntaxstring": "PLNE (command) depth (integer)", "uniquename": "c_PLNE", "evalcost": {"default": 1}, "implementation": "caosVM::c_PLNE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TINT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the tinting of the TARG agent to the given red, blue, and green values.\n", "arguments": [{"name": "red_tint", "type": "integer"}, {"name": "green_tint", "type": "integer"}, {"name": "blue_tint", "type": "integer"}, {"name": "rotation", "type": "integer"}, {"name": "swap", "type": "integer"}], "name": "TINT", "match": "TINT", "type": "command", "syntaxstring": "TINT (command) red_tint (integer) green_tint (integer) blue_tint (integer) rotation (integer) swap (integer)", "uniquename": "c_TINT", "evalcost": {"default": 1}, "implementation": "caosVM::c_TINT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_RNGE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the TARG agent's range (i.e., the distance it can see and hear).\n", "arguments": [{"name": "distance", "type": "float"}], "name": "RNGE", "match": "RNGE", "type": "command", "syntaxstring": "RNGE (command) distance (float)", "uniquename": "c_RNGE", "evalcost": {"default": 1}, "implementation": "caosVM::c_RNGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_RNGE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the TARG agent's range.\n", "arguments": [], "name": "RNGE", "match": "RNGE", "type": "integer", "syntaxstring": "RNGE (integer)", "uniquename": "v_RNGE", "evalcost": {"default": 0}, "implementation": "caosVM::v_RNGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_TRAN": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Tests if the pixel at (x,y) on the TARG agent is transparent.\nReturns 0 or 1.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "TRAN", "match": "TRAN", "type": "integer", "syntaxstring": "TRAN (integer) x (integer) y (integer)", "uniquename": "v_TRAN", "evalcost": {"default": 0}, "implementation": "caosVM::v_TRAN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TRAN": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the TARG agent's behaviour with regard to transparency.  If set to 1, invisible\nparts of the agent can't be clicked.  If 0, anywhere on the agent (including transparent\nparts) can be clicked.\n", "arguments": [{"name": "transparency", "type": "integer"}, {"name": "part_no", "type": "integer"}], "name": "TRAN", "match": "TRAN", "type": "command", "syntaxstring": "TRAN (command) transparency (integer) part_no (integer)", "uniquename": "c_TRAN", "evalcost": {"default": 1}, "implementation": "caosVM::c_TRAN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_HGHT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the TARG agent's height.\n", "arguments": [], "name": "HGHT", "match": "HGHT", "type": "integer", "syntaxstring": "HGHT (integer)", "uniquename": "v_HGHT", "evalcost": {"default": 0}, "implementation": "caosVM::v_HGHT", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HAND": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the name of the Hand; default is 'hand'.\n", "arguments": [], "name": "HAND", "match": "HAND", "type": "string", "syntaxstring": "HAND (string)", "uniquename": "v_HAND", "evalcost": {"default": 0}, "implementation": "caosVM::v_HAND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_HAND": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the name of the Hand.\n", "arguments": [{"name": "name", "type": "string"}], "name": "HAND", "match": "HAND", "type": "command", "syntaxstring": "HAND (command) name (string)", "uniquename": "c_HAND", "evalcost": {"default": 1}, "implementation": "caosVM::c_HAND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_TICK": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Return the agent timer tick rate of the TARG agent.\n", "arguments": [], "name": "TICK", "match": "TICK", "type": "integer", "syntaxstring": "TICK (integer)", "uniquename": "v_TICK", "evalcost": {"default": 0}, "implementation": "caosVM::v_TICK", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PUPT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets relative x/y coordinates for the location in the world where the TARG agent picks up\nobjects.  The pose is relative to the first image set in NEW: (not BASE).\n", "arguments": [{"name": "pose", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "PUPT", "match": "PUPT", "type": "command", "syntaxstring": "PUPT (command) pose (integer) x (integer) y (integer)", "uniquename": "c_PUPT", "evalcost": {"default": 1}, "implementation": "caosVM::c_PUPT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_STPT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Stop the script running in TARG, if any.\n", "arguments": [], "name": "STPT", "match": "STPT", "type": "command", "syntaxstring": "STPT (command)", "uniquename": "c_STPT", "evalcost": {"default": 1}, "implementation": "caosVM::c_STPT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DCOR": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Turns the display of the TARG agent's physical core on and off. Gives a general idea of\nits size and location (including invisible agents).\n", "arguments": [{"name": "core_on", "type": "integer"}], "name": "DCOR", "match": "DCOR", "type": "command", "syntaxstring": "DCOR (command) core_on (integer)", "uniquename": "c_DCOR", "evalcost": {"default": 1}, "implementation": "caosVM::c_DCOR", "pragma": {"variants": "all"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_MIRA": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Determines whether or not the TARG agent's current sprite is mirrored. Returns 0 or 1.\n", "arguments": [], "name": "MIRA", "match": "MIRA", "type": "integer", "syntaxstring": "MIRA (integer)", "uniquename": "v_MIRA", "evalcost": {"default": 0}, "implementation": "caosVM::v_MIRA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MIRA": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Turns mirroring of the TARG agent's current sprite on or off (0 or 1).\n", "arguments": [{"name": "mirror_on", "type": "integer"}], "name": "MIRA", "match": "MIRA", "type": "command", "syntaxstring": "MIRA (command) mirror_on (integer)", "uniquename": "c_MIRA", "evalcost": {"default": 1}, "implementation": "caosVM::c_MIRA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_DISQ": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Calculates the square of the distance between the centers of the TARG agent and the given\nagent.\n", "arguments": [{"name": "other", "type": "agent"}], "name": "DISQ", "match": "DISQ", "type": "float", "syntaxstring": "DISQ (float) other (agent)", "uniquename": "v_DISQ", "evalcost": {"default": 0}, "implementation": "caosVM::v_DISQ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ALPH": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Sets the degree of alpha blending on the TARG agent, to a value from 0 (solid) to 256\n(invisible). The second parameter will turn alpha blending on and off.\n", "arguments": [{"name": "alpha_value", "type": "integer"}, {"name": "enable", "type": "integer"}], "name": "ALPH", "match": "ALPH", "type": "command", "syntaxstring": "ALPH (command) alpha_value (integer) enable (integer)", "uniquename": "c_ALPH", "evalcost": {"default": 1}, "implementation": "caosVM::c_ALPH", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_HELD": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the agent currently held by the TARG agent, or a random one if there are more than one.\n", "arguments": [], "name": "HELD", "match": "HELD", "type": "agent", "syntaxstring": "HELD (agent)", "uniquename": "v_HELD", "evalcost": {"default": 0}, "implementation": "caosVM::v_HELD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_GALL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Changes the sprite file and first image associated with the TARG agent or current PART.\n", "arguments": [{"name": "spritefile", "type": "string"}, {"name": "first_image", "type": "integer"}], "name": "GALL", "match": "GALL", "type": "command", "syntaxstring": "GALL (command) spritefile (string) first_image (integer)", "uniquename": "c_GALL", "evalcost": {"default": 1}, "implementation": "caosVM::c_GALL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_GALL": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the name of the sprite file associated with the TARG agent or current PART, or a blank string if part# is invalid on a compound agent.\n", "arguments": [], "name": "GALL", "match": "GALL", "type": "string", "syntaxstring": "GALL (string)", "uniquename": "v_GALL", "evalcost": {"default": 0}, "implementation": "caosVM::v_GALL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_SEEE": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns 1 if the first agent can see the other, or 0 otherwise.\n", "arguments": [{"name": "first", "type": "agent"}, {"name": "second", "type": "agent"}], "name": "SEEE", "match": "SEEE", "type": "integer", "syntaxstring": "SEEE (integer) first (agent) second (agent)", "uniquename": "v_SEEE", "evalcost": {"default": 0}, "implementation": "caosVM::v_SEEE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_TINT": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Returns the tint value for TARG agent. Pass 1 for red, 2 for blue, 3 for green, 4 for rotation or 5 for swap.\n", "arguments": [{"name": "attribute", "type": "integer"}], "name": "TINT", "match": "TINT", "type": "integer", "syntaxstring": "TINT (integer) attribute (integer)", "uniquename": "v_TINT", "evalcost": {"default": 0}, "implementation": "caosVM::v_TINT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_TINO": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Works like the TINT command, but only applies the tint to the current frame, and discards the rest.\n", "arguments": [{"name": "red", "type": "integer"}, {"name": "green", "type": "integer"}, {"name": "blue", "type": "integer"}, {"name": "rotation", "type": "integer"}, {"name": "swap", "type": "integer"}], "name": "TINO", "match": "TINO", "type": "command", "syntaxstring": "TINO (command) red (integer) green (integer) blue (integer) rotation (integer) swap (integer)", "uniquename": "c_TINO", "evalcost": {"default": 1}, "implementation": "caosVM::c_TINO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_DROP": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Causes the TARG agent to drop what it is carrying in a safe location.\n", "arguments": [], "name": "DROP", "match": "DROP", "type": "command", "syntaxstring": "DROP (command)", "uniquename": "c_DROP", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_DROP", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_NCLS": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "previous", "type": "agent"}, {"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "NCLS", "match": "NCLS", "type": "agent", "syntaxstring": "NCLS (agent) previous (agent) family (integer) genus (integer) species (integer)", "uniquename": "v_NCLS", "evalcost": {"default": 0}, "implementation": "caosVM::v_NCLS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_PCLS": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "previous", "type": "agent"}, {"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "PCLS", "match": "PCLS", "type": "agent", "syntaxstring": "PCLS (agent) previous (agent) family (integer) genus (integer) species (integer)", "uniquename": "v_PCLS", "evalcost": {"default": 0}, "implementation": "caosVM::v_PCLS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_TCOR": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "topy", "type": "float"}, {"name": "bottomy", "type": "float"}, {"name": "leftx", "type": "float"}, {"name": "rightx", "type": "float"}], "name": "TCOR", "match": "TCOR", "type": "integer", "syntaxstring": "TCOR (integer) topy (float) bottomy (float) leftx (float) rightx (float)", "uniquename": "v_TCOR", "evalcost": {"default": 0}, "implementation": "caosVM::v_TCOR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_CORE": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "topy", "type": "float"}, {"name": "bottomy", "type": "float"}, {"name": "leftx", "type": "float"}, {"name": "rightx", "type": "float"}], "name": "CORE", "match": "CORE", "type": "command", "syntaxstring": "CORE (command) topy (float) bottomy (float) leftx (float) rightx (float)", "uniquename": "c_CORE", "evalcost": {"default": 1}, "implementation": "caosVM::c_CORE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_TWIN": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "source", "type": "agent"}, {"name": "null_vars", "type": "integer"}], "name": "TWIN", "match": "TWIN", "type": "agent", "syntaxstring": "TWIN (agent) source (agent) null_vars (integer)", "uniquename": "v_TWIN", "evalcost": {"default": 0}, "implementation": "caosVM::v_TWIN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SCLE": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "pose", "type": "integer"}, {"name": "scaleby", "type": "integer"}], "name": "SCLE", "match": "SCLE", "type": "command", "syntaxstring": "SCLE (command) pose (integer) scaleby (integer)", "uniquename": "c_SCLE", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCLE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_STRC": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Draw the current agent (or part? don't know) with the given width/height (ie, stretch the sprite). Set enable to 1 to enable, or 0 to disable.\n", "arguments": [{"name": "width", "type": "integer"}, {"name": "height", "type": "integer"}, {"name": "enable", "type": "integer"}], "name": "STRC", "match": "STRC", "type": "command", "syntaxstring": "STRC (command) width (integer) height (integer) enable (integer)", "uniquename": "c_STRC", "evalcost": {"default": 1}, "implementation": "caosVM::c_STRC", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_IMGE": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "filename", "type": "string"}], "name": "IMGE", "match": "IMGE", "type": "command", "syntaxstring": "IMGE (command) filename (string)", "uniquename": "c_IMGE", "evalcost": {"default": 1}, "implementation": "caosVM::c_IMGE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TNTW": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "index", "type": "integer"}], "name": "TNTW", "match": "TNTW", "type": "command", "syntaxstring": "TNTW (command) index (integer)", "uniquename": "c_TNTW", "evalcost": {"default": 1}, "implementation": "caosVM::c_TNTW", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PRNT": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "pose", "type": "integer"}], "name": "PRNT", "match": "PRNT", "type": "command", "syntaxstring": "PRNT (command) pose (integer)", "uniquename": "c_PRNT", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRNT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_BLCK": {"filename": "caosVM_agent.cpp", "category": "agents", "arguments": [{"name": "width", "type": "integer"}, {"name": "height", "type": "integer"}], "name": "BLCK", "match": "BLCK", "type": "command", "syntaxstring": "BLCK (command) width (integer) height (integer)", "uniquename": "c_BLCK", "evalcost": {"default": 1}, "implementation": "caosVM::c_BLCK", "pragma": {"variants": "sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_SHAD": {"filename": "caosVM_agent.cpp", "category": "agents", "description": "Enable/disable drawing of a shadow on the target agent with the specified intensity at the given x/y offset.\n", "arguments": [{"name": "intensity", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "enable", "type": "integer"}], "name": "SHAD", "match": "SHAD", "type": "command", "syntaxstring": "SHAD (command) intensity (integer) x (integer) y (integer) enable (integer)", "uniquename": "c_SHAD", "evalcost": {"default": 1}, "implementation": "caosVM::c_SHAD", "pragma": {"variants": "sm"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_VISI": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns 1 if the TARG agent is on camera, or 0 otherwise. If checkall is 0, only checks\nmain camera, otherwise checks all.\n", "arguments": [{"name": "checkall", "type": "integer"}], "name": "VISI", "match": "VISI", "type": "integer", "syntaxstring": "VISI (integer) checkall (integer)", "uniquename": "v_VISI", "evalcost": {"default": 0}, "implementation": "caosVM::v_VISI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ONTV": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns 1 if the specified agent is on camera, or 0 otherwise. If checkall is 0, only checks\nmain camera, otherwise checks all.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "checkall", "type": "integer"}], "name": "ONTV", "match": "ONTV", "type": "integer", "syntaxstring": "ONTV (integer) agent (agent) checkall (integer)", "uniquename": "v_ONTV", "evalcost": {"default": 0}, "implementation": "caosVM::v_ONTV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_META": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Sets the metaroom that the current camera is pointing at.  Coordinates point to top left of new\ncamera position.  Set a coordinate to -1 to use the top-left corner of the metaroom.\n\nTransition: 0 for none, 1 for flip horzizontally, 2 for burst.\n", "arguments": [{"name": "metaroom_id", "type": "integer"}, {"name": "camera_x", "type": "integer"}, {"name": "camera_y", "type": "integer"}, {"name": "transition", "type": "integer"}], "name": "META", "match": "META", "type": "command", "syntaxstring": "META (command) metaroom_id (integer) camera_x (integer) camera_y (integer) transition (integer)", "uniquename": "c_META", "evalcost": {"default": 1}, "implementation": "caosVM::c_META", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_META": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the metaroom the current camera is looking at.\n", "arguments": [], "name": "META", "match": "META", "type": "integer", "syntaxstring": "META (integer)", "uniquename": "v_META", "evalcost": {"default": 0}, "implementation": "caosVM::v_META", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_CMRT": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Focuses the current camera on the TARG agent.\n\nSet pan to 0 for no panning (jump), 1 for smooth scrolling if in the same metaroom, or 2\nfor smooth scrolling if the given location is already visible.\n", "arguments": [{"name": "pan", "type": "integer"}], "name": "CMRT", "match": "CMRT", "type": "command", "syntaxstring": "CMRT (command) pan (integer)", "uniquename": "c_CMRT", "evalcost": {"default": 1}, "implementation": "caosVM::c_CMRT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_CMRA": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Sets the position of the current camera so that the top left corner of the view is at the\ngiven coordinates.\n\nSet pan to 0 for no panning (jump), or 1 for smooth scrolling if in the same metaroom.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "pan", "type": "integer"}], "name": "CMRA", "match": "CMRA", "type": "command", "syntaxstring": "CMRA (command) x (integer) y (integer) pan (integer)", "uniquename": "c_CMRA", "evalcost": {"default": 1}, "implementation": "caosVM::c_CMRA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_CMRP": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Sets the position of the current camera so that the view centers on the given coordinates.\n\nSet pan to 0 for no panning (jump), 1 for smooth scrolling if in the same metaroom, or 2\nfor smooth scrolling if the given location is already visible.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "pan", "type": "integer"}], "name": "CMRP", "match": "CMRP", "type": "command", "syntaxstring": "CMRP (command) x (integer) y (integer) pan (integer)", "uniquename": "c_CMRP", "evalcost": {"default": 1}, "implementation": "caosVM::c_CMRP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_CMRX": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the X position at the center of the current camera's view.\n", "arguments": [], "name": "CMRX", "match": "CMRX", "type": "integer", "syntaxstring": "CMRX (integer)", "uniquename": "v_CMRX", "evalcost": {"default": 0}, "implementation": "caosVM::v_CMRX", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CMRY": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the Y position at the center of the current camera's view.\n", "arguments": [], "name": "CMRY", "match": "CMRY", "type": "integer", "syntaxstring": "CMRY (integer)", "uniquename": "v_CMRY", "evalcost": {"default": 0}, "implementation": "caosVM::v_CMRY", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDW": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the width of the current camera's view.\n", "arguments": [], "name": "WNDW", "match": "WNDW", "type": "integer", "syntaxstring": "WNDW (integer)", "uniquename": "v_WNDW", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDH": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the height of the current camera's view.\n", "arguments": [], "name": "WNDH", "match": "WNDH", "type": "integer", "syntaxstring": "WNDH (integer)", "uniquename": "v_WNDH", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDH", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDB": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the position of the bottom edge of the current camera's view.\n", "arguments": [], "name": "WNDB", "match": "WNDB", "type": "integer", "syntaxstring": "WNDB (integer)", "uniquename": "v_WNDB", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDL": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the position of the left edge of the current camera's view.\n", "arguments": [], "name": "WNDL", "match": "WNDL", "type": "integer", "syntaxstring": "WNDL (integer)", "uniquename": "v_WNDL", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDR": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the position of the right edge of the current camera's view.\n", "arguments": [], "name": "WNDR", "match": "WNDR", "type": "integer", "syntaxstring": "WNDR (integer)", "uniquename": "v_WNDR", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WNDT": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns the position of the top edge of the current camera's view.\n", "arguments": [], "name": "WNDT", "match": "WNDT", "type": "integer", "syntaxstring": "WNDT (integer)", "uniquename": "v_WNDT", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNDT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_WDOW": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Toggles full-screen mode on and off.\n", "arguments": [], "name": "WDOW", "match": "WDOW", "type": "command", "syntaxstring": "WDOW (command)", "uniquename": "c_WDOW", "evalcost": {"default": 1}, "implementation": "caosVM::c_WDOW", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_WDOW": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns 1 if in full-screen mode, or 0 otherwise (windowed).\n", "arguments": [], "name": "WDOW", "match": "WDOW", "type": "integer", "syntaxstring": "WDOW (integer)", "uniquename": "v_WDOW", "evalcost": {"default": 0}, "implementation": "caosVM::v_WDOW", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_TRCK": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Tell the current camera to track the specified agent, or set to NULL to stop tracking.\nxpercent and ypercent define a rectangle on the screen which the camera should keep the tracked agent inside.\nStyle 0 is brittle-- tracking is broken easily.  Style 1 is flexible-- moving the camera\nback inside the rectangle resumes tracking.  Style 3 is hard-- you can't move outside the\nrectangle.\nRransition: 0 for none, 1 for flip horizontal, 2 for burst.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "xpercent", "type": "integer"}, {"name": "ypercent", "type": "integer"}, {"name": "style", "type": "integer"}, {"name": "transition", "type": "integer"}], "name": "TRCK", "match": "TRCK", "type": "command", "syntaxstring": "TRCK (command) agent (agent) xpercent (integer) ypercent (integer) style (integer) transition (integer)", "uniquename": "c_TRCK", "evalcost": {"default": 1}, "implementation": "caosVM::c_TRCK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "v_TRCK": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Returns agent being tracked by the current camera, if any.\n", "arguments": [], "name": "TRCK", "match": "TRCK", "type": "agent", "syntaxstring": "TRCK (agent)", "uniquename": "v_TRCK", "evalcost": {"default": 0}, "implementation": "caosVM::v_TRCK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_LINE": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Draw a line between two endpoints with the given coordinates, in the color specified by\nthe given red, green, and blue values.\n\nSet stipple_on to a number of pixels to alternate for stippling, or set stipple_off to\nturn stippling off.\n\nSetting the the endpoints to the same point will remove all lines for the agent.\n", "arguments": [{"name": "x1", "type": "integer"}, {"name": "y1", "type": "integer"}, {"name": "x2", "type": "integer"}, {"name": "y2", "type": "integer"}, {"name": "r", "type": "integer"}, {"name": "g", "type": "integer"}, {"name": "b", "type": "integer"}, {"name": "stipple_on", "type": "integer"}, {"name": "stipple_off", "type": "integer"}], "name": "LINE", "match": "LINE", "type": "command", "syntaxstring": "LINE (command) x1 (integer) y1 (integer) x2 (integer) y2 (integer) r (integer) g (integer) b (integer) stipple_on (integer) stipple_off (integer)", "uniquename": "c_LINE", "evalcost": {"default": 1}, "implementation": "caosVM::c_LINE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -9}, "v_SNAX": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Determines whether or not the given image file exists in the world\nimages directory (0 or 1).\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SNAX", "match": "SNAX", "type": "integer", "syntaxstring": "SNAX (integer) filename (string)", "uniquename": "v_SNAX", "evalcost": {"default": 0}, "implementation": "caosVM::v_SNAX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SCAM": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Sets which camera to use in camera macro commands.  If 'agent' and\n'part' are NULL, the main camera will be used.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "part", "type": "integer"}], "name": "SCAM", "match": "SCAM", "type": "command", "syntaxstring": "SCAM (command) agent (agent) part (integer)", "uniquename": "c_SCAM", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCAM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_ZOOM": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Zoom the current camera by the given number of pixels on the given x/y\ncoordinates in the world.  If the coordinates are set to -1, the\ncurrent center position of the camera's view will be used.\n", "arguments": [{"name": "pixels", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "ZOOM", "match": "ZOOM", "type": "command", "syntaxstring": "ZOOM (command) pixels (integer) x (integer) y (integer)", "uniquename": "c_ZOOM", "evalcost": {"default": 1}, "implementation": "caosVM::c_ZOOM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_SNAP": {"filename": "caosVM_camera.cpp", "category": "cameras", "description": "Take a snapshot and save it to the given filename (don't include the extension). x/y are the centerpoint, width/height the size, and zoom the percentage to zoom out.\n", "arguments": [{"name": "filename", "type": "string"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "width", "type": "integer"}, {"name": "height", "type": "integer"}, {"name": "zoom", "type": "integer"}], "name": "SNAP", "match": "SNAP", "type": "command", "syntaxstring": "SNAP (command) filename (string) x (integer) y (integer) width (integer) height (integer) zoom (integer)", "uniquename": "c_SNAP", "evalcost": {"default": 1}, "implementation": "caosVM::c_SNAP", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "v_LOFT": {"filename": "caosVM_camera.cpp", "category": "cameras", "arguments": [{"name": "filename", "type": "string"}], "name": "LOFT", "match": "LOFT", "type": "integer", "syntaxstring": "LOFT (integer) filename (string)", "uniquename": "v_LOFT", "evalcost": {"default": 0}, "implementation": "caosVM::v_LOFT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_BKGD": {"filename": "caosVM_camera.cpp", "category": "cameras", "arguments": [{"name": "metaroom_id", "type": "integer"}, {"name": "background", "type": "string"}, {"name": "transition", "type": "integer"}], "name": "BKGD", "match": "BKGD", "type": "command", "syntaxstring": "BKGD (command) metaroom_id (integer) background (string) transition (integer)", "uniquename": "c_BKGD", "evalcost": {"default": 1}, "implementation": "caosVM::c_BKGD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_BKGD": {"filename": "caosVM_camera.cpp", "category": "cameras", "arguments": [{"name": "metaroom_id", "type": "integer"}], "name": "BKGD", "match": "BKGD", "type": "string", "syntaxstring": "BKGD (string) metaroom_id (integer)", "uniquename": "v_BKGD", "evalcost": {"default": 0}, "implementation": "caosVM::v_BKGD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_FRSH": {"filename": "caosVM_camera.cpp", "category": "cameras", "arguments": [], "name": "FRSH", "match": "FRSH", "type": "command", "syntaxstring": "FRSH (command)", "uniquename": "c_FRSH", "evalcost": {"default": 1}, "implementation": "caosVM::c_FRSH", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PART": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Sets the part number of the TARGeted compound agent or vehicle to work on (ANIM/POSE use this,\namongst other commands).\n", "arguments": [{"name": "part_id", "type": "integer"}], "name": "PART", "match": "PART", "type": "command", "syntaxstring": "PART (command) part_id (integer)", "uniquename": "c_PART", "evalcost": {"default": 1}, "implementation": "caosVM::c_PART", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PART": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Returns 1 if the given part number exists on the target agent, or 0 if otherwise.\n", "arguments": [{"name": "part_id", "type": "integer"}], "name": "PART", "match": "PART", "type": "integer", "syntaxstring": "PART (integer) part_id (integer)", "uniquename": "v_PART", "evalcost": {"default": 0}, "implementation": "caosVM::v_PART", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PAT_DULL": {"filename": "caosVM_compound.cpp", "category": "compound agents", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "no_images", "type": "integer"}], "name": "PAT: DULL", "match": "DULL", "type": "command", "syntaxstring": "PAT: DULL (command) part (integer) sprite (string) first_image (integer) x (integer) y (integer) plane (integer) no_images (integer)", "uniquename": "c_PAT_DULL", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_DULL_sm", "pragma": {"variants": "sm", "implementation": "caosVM::c_PAT_DULL_sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "c_PAT_BUTT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Adds a new 'button' part to the TARGed compound agent/vehicle.\nPart ID numbers begin at 1. x/y/plane are relative to the agent you're working on.\n'hoveranim' is the animation to use when the part is mouse-overed - see ANIM for details.\n'messageid' is the message sent when the button is clicked - _p1_ of the message is set to the part number.\nIf option is 1, mouseclicks/hovers only apply to non-transparent areas. otherwise, option should be 0.\n", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "image_count", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "hoveranim", "type": "byte-string"}, {"name": "messageid", "type": "integer"}, {"name": "option", "type": "integer"}], "name": "PAT: BUTT", "match": "BUTT", "type": "command", "syntaxstring": "PAT: BUTT (command) part (integer) sprite (string) first_image (integer) image_count (integer) x (integer) y (integer) plane (integer) hoveranim (byte-string) messageid (integer) option (integer)", "uniquename": "c_PAT_BUTT", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_BUTT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -10}, "c_PAT_FIXD": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Adds a new 'fixed' text part to the TARGed compound agent/vehicle,\nPart ID numbers begin at 1. x/y/plane are relative to the agent you're working on.\nThe 'first_image' frame of the given sprite file will be used underneath the text, which is set with PTXT.\n", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "fontsprite", "type": "string"}], "name": "PAT: FIXD", "match": "FIXD", "type": "command", "syntaxstring": "PAT: FIXD (command) part (integer) sprite (string) first_image (integer) x (integer) y (integer) plane (integer) fontsprite (string)", "uniquename": "c_PAT_FIXD", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_FIXD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "c_PAT_TEXT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Adds a new text entry part to the TARGed compound agent/vehicle.\nPart ID numbers begin at 1. x/y/plane are relative to the agent you're working on.\nThe 'first_image' frame of the given sprite file will be used underneath the text.  The part will\ngain the focus when FCUS is called or when it is clicked.  A message of the given type will be sent.\n", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "message_id", "type": "integer"}, {"name": "fontsprite", "type": "string"}], "name": "PAT: TEXT", "match": "TEXT", "type": "command", "syntaxstring": "PAT: TEXT (command) part (integer) sprite (string) first_image (integer) x (integer) y (integer) plane (integer) message_id (integer) fontsprite (string)", "uniquename": "c_PAT_TEXT", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_TEXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -8}, "c_PAT_CMRA": {"filename": "caosVM_compound.cpp", "category": "compound agents", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "viewwidth", "type": "integer"}, {"name": "viewheight", "type": "integer"}, {"name": "camerawidth", "type": "integer"}, {"name": "cameraheight", "type": "integer"}], "name": "PAT: CMRA", "match": "CMRA", "type": "command", "syntaxstring": "PAT: CMRA (command) part (integer) sprite (string) first_image (integer) x (integer) y (integer) plane (integer) viewwidth (integer) viewheight (integer) camerawidth (integer) cameraheight(integer)", "uniquename": "c_PAT_CMRA", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_CMRA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -10}, "c_PAT_GRPH": {"filename": "caosVM_compound.cpp", "category": "compound agents", "arguments": [{"name": "part", "type": "integer"}, {"name": "sprite", "type": "string"}, {"name": "first_image", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "plane", "type": "integer"}, {"name": "numvalues", "type": "integer"}], "name": "PAT: GRPH", "match": "GRPH", "type": "command", "syntaxstring": "PAT: GRPH (command) part (integer) sprite (string) first_image (integer) x (integer) y (integer) plane (integer) numvalues (integer)", "uniquename": "c_PAT_GRPH", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_GRPH", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "c_PAT_KILL": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Kills the specified part of the TARGed compound agent or vehicle.\n", "arguments": [{"name": "part", "type": "integer"}], "name": "PAT: KILL", "match": "KILL", "type": "command", "syntaxstring": "PAT: KILL (command) part (integer)", "uniquename": "c_PAT_KILL", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_KILL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PAT_MOVE": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "move the compound part specified to the new relative position specified\n", "arguments": [{"name": "part", "type": "integer"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "PAT: MOVE", "match": "MOVE", "type": "command", "syntaxstring": "PAT: MOVE (command) part (integer) x (integer) y (integer)", "uniquename": "c_PAT_MOVE", "namespace": "pat:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAT_MOVE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_FCUS": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Focus the current targeted part, which must be a PAT: TEXT.\nIf the target is null, then the current part will be unfocused.\n", "arguments": [], "name": "FCUS", "match": "FCUS", "type": "command", "syntaxstring": "FCUS (command)", "uniquename": "c_FCUS", "evalcost": {"default": 1}, "implementation": "caosVM::c_FCUS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_FRMT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Alters the appearance of the target text part.  The spacing values and margins are to be specified in\npixels.  Justification can be 0 for left, 1 for right, 2 for center, 4 for bottom, 8 for middle or 16\nfor 'last page scroll' (TODO?), and you can add these together (except 0/1 are mutually exclusive, obviously).\n", "arguments": [{"name": "left_margin", "type": "integer"}, {"name": "top_margin", "type": "integer"}, {"name": "right_margin", "type": "integer"}, {"name": "button_margin", "type": "integer"}, {"name": "line_spacing", "type": "integer"}, {"name": "char_spacing", "type": "integer"}, {"name": "justification", "type": "integer"}], "name": "FRMT", "match": "FRMT", "type": "command", "syntaxstring": "FRMT (command) left_margin (integer) top_margin (integer) right_margin (integer) button_margin (integer) line_spacing (integer) char_spacing (integer) justification (integer)", "uniquename": "c_FRMT", "evalcost": {"default": 1}, "implementation": "caosVM::c_FRMT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -7}, "c_PTXT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Sets the text displayed in the current text part.\n", "arguments": [{"name": "text", "type": "string"}], "name": "PTXT", "match": "PTXT", "type": "command", "syntaxstring": "PTXT (command) text (string)", "uniquename": "c_PTXT", "evalcost": {"default": 1}, "implementation": "caosVM::c_PTXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PTXT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Returns the text displayed in the current text part.\n", "arguments": [], "name": "PTXT", "match": "PTXT", "type": "string", "syntaxstring": "PTXT (string)", "uniquename": "v_PTXT", "evalcost": {"default": 0}, "implementation": "caosVM::v_PTXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_PNXT": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Returns the next part of the TARG compound agent or vehicle, (or -1 if you have reached the end, or\nthe first part if you go past -1).\n", "arguments": [{"name": "previous_part", "type": "integer"}], "name": "PNXT", "match": "PNXT", "type": "integer", "syntaxstring": "PNXT (integer) previous_part (integer)", "uniquename": "v_PNXT", "evalcost": {"default": 0}, "implementation": "caosVM::v_PNXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PAGE": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Sets the zero-based page number of the current text part.  This must be less than NPGS.\n", "arguments": [{"name": "page", "type": "integer"}], "name": "PAGE", "match": "PAGE", "type": "command", "syntaxstring": "PAGE (command) page (integer)", "uniquename": "c_PAGE", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PAGE": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Returns the zero-based page number of the current text part.\n", "arguments": [], "name": "PAGE", "match": "PAGE", "type": "integer", "syntaxstring": "PAGE (integer)", "uniquename": "v_PAGE", "evalcost": {"default": 0}, "implementation": "caosVM::v_PAGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NPGS": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Returns the number of pages for the current text part.\n", "arguments": [], "name": "NPGS", "match": "NPGS", "type": "integer", "syntaxstring": "NPGS (integer)", "uniquename": "v_NPGS", "evalcost": {"default": 0}, "implementation": "caosVM::v_NPGS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_GRPV": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Add the given value to the given line on a graph.\n", "arguments": [{"name": "line", "type": "integer"}, {"name": "value", "type": "float"}], "name": "GRPV", "match": "GRPV", "type": "command", "syntaxstring": "GRPV (command) line (integer) value (float)", "uniquename": "c_GRPV", "evalcost": {"default": 1}, "implementation": "caosVM::c_GRPV", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_GRPL": {"filename": "caosVM_compound.cpp", "category": "compound agents", "description": "Add a new line to a graph created with PAT: GRPH with the given\ncharacteristics.\n", "arguments": [{"name": "red", "type": "integer"}, {"name": "green", "type": "integer"}, {"name": "blue", "type": "integer"}, {"name": "min", "type": "float"}, {"name": "max", "type": "float"}], "name": "GRPL", "match": "GRPL", "type": "command", "syntaxstring": "GRPL (command) red (integer) green (integer) blue (integer) min (float) max (float)", "uniquename": "c_GRPL", "evalcost": {"default": 1}, "implementation": "caosVM::c_GRPL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_OUTX": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Prints the given string on the output stream, after first quoting it and transforming\nescapes in the string to quoted escapes.\n", "arguments": [{"name": "val", "type": "string"}], "name": "OUTX", "match": "OUTX", "type": "command", "syntaxstring": "OUTX (command) val (string)", "uniquename": "c_OUTX", "evalcost": {"default": 1}, "implementation": "caosVM::c_OUTX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_OUTS": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Prints the given string to the output stream.  Does nothing when run inside a script.\n", "arguments": [{"name": "val", "type": "string"}], "name": "OUTS", "match": "OUTS", "type": "command", "syntaxstring": "OUTS (command) val (string)", "uniquename": "c_OUTS", "evalcost": {"default": 1}, "implementation": "caosVM::c_OUTS", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_OUTV": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Prints the given decimal value to the ouput stream.  Does nothing when run inside a script.\n", "arguments": [{"name": "val", "type": "decimal"}], "name": "OUTV", "match": "OUTV", "type": "command", "syntaxstring": "OUTV (command) val (decimal)", "uniquename": "c_OUTV", "evalcost": {"default": 1}, "implementation": "caosVM::c_OUTV", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_GAME": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns the game variable with the given name.\n", "arguments": [{"name": "name", "type": "string"}], "name": "GAME", "match": "GAME", "type": "variable", "syntaxstring": "GAME (variable) name (string)", "uniquename": "v_GAME", "evalcost": {"default": 0}, "implementation": "caosVM::v_GAME", "status": "maybe", "saveimpl": "caosVM::s_GAME", "stackdelta": 0}, "v_EAME": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns the non-persistent game variable with the given name.\n", "arguments": [{"name": "name", "type": "anything"}], "name": "EAME", "match": "EAME", "type": "variable", "syntaxstring": "EAME (variable) name (anything)", "uniquename": "v_EAME", "evalcost": {"default": 0}, "implementation": "caosVM::v_EAME", "status": "maybe", "saveimpl": "caosVM::s_EAME", "stackdelta": 0}, "c_DELG": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Deletes the game variable with the given name.\n", "arguments": [{"name": "name", "type": "string"}], "name": "DELG", "match": "DELG", "type": "command", "syntaxstring": "DELG (command) name (string)", "uniquename": "c_DELG", "evalcost": {"default": 1}, "implementation": "caosVM::c_DELG", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SCRP": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the beginning of a normal script applying to the agent with the given classifier\ninfo.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "SCRP", "match": "SCRP", "type": "command", "syntaxstring": "SCRP (command) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "c_SCRP", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCRP", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_RSCR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the beginning of a removal script.\n", "arguments": [], "name": "RSCR", "match": "RSCR", "type": "command", "syntaxstring": "RSCR (command)", "uniquename": "c_RSCR", "evalcost": {"default": 1}, "implementation": "caosVM::c_RSCR", "pragma": {"variants": "c2 cv c3 sm"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ISCR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the beginning of an installer script.\n", "arguments": [], "name": "ISCR", "match": "ISCR", "type": "command", "syntaxstring": "ISCR (command)", "uniquename": "c_ISCR", "evalcost": {"default": 1}, "implementation": "caosVM::c_ISCR", "pragma": {"variants": "c2 cv c3 sm"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ENDM": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Marks the end of a script.\n", "arguments": [], "name": "ENDM", "match": "ENDM", "type": "command", "syntaxstring": "ENDM (command)", "uniquename": "c_ENDM", "evalcost": {"default": 1}, "implementation": "caosVM::c_ENDM", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_RGAM": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Restore all game variables to their saved or default values.\n", "arguments": [], "name": "RGAM", "match": "RGAM", "type": "command", "syntaxstring": "RGAM (command)", "uniquename": "c_RGAM", "evalcost": {"default": 1}, "implementation": "caosVM::c_RGAM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MOWS": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns whether the lawn was cut last Sunday or not, in theory.\nHow the C2E engine determines this, and whose lawn, exactly, and whether or not it takes into account the fact that the lawn may have been mown on Saturday or Friday, and whether it will cut you any slack if it's winter and the grass isn't growing much, is currently unknown.\n\nIn openc2e, currently a no-op (ie, the lawn is never, ever cut properly).\n", "arguments": [], "name": "MOWS", "match": "MOWS", "type": "integer", "syntaxstring": "MOWS (integer)", "uniquename": "v_MOWS", "evalcost": {"default": 0}, "implementation": "caosVM::v_MOWS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_VMNR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns the minor version number of the engine.\n", "arguments": [], "name": "VMNR", "match": "VMNR", "type": "integer", "syntaxstring": "VMNR (integer)", "uniquename": "v_VMNR", "evalcost": {"default": 0}, "implementation": "caosVM::v_VMNR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_VMJR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns the major version number of the engine.\n", "arguments": [], "name": "VMJR", "match": "VMJR", "type": "integer", "syntaxstring": "VMJR (integer)", "uniquename": "v_VMJR", "evalcost": {"default": 0}, "implementation": "caosVM::v_VMJR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WOLF": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "This returns/sets some engine settings which are useful for 'wolfing runs', among other things.\nSet andmask for the information you want returned, and eormask for the information you want changed.\n\n1 is for display rendering (turn it off to speed up the game)\n2 is for running ticks as fast as possible, rather than according to BUZZ\n4 is for refreshing the display (when display rendering is turned off, this will update the display at the end of the tick)\n(note that 4 is unset by the engine when the display is refreshed)\n8 is autokill\n", "arguments": [{"name": "andmask", "type": "integer"}, {"name": "eormask", "type": "integer"}], "name": "WOLF", "match": "WOLF", "type": "integer", "syntaxstring": "WOLF (integer) andmask (integer) eormask (integer)", "uniquename": "v_WOLF", "evalcost": {"default": 0}, "implementation": "caosVM::v_WOLF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_LANG": {"filename": "caosVM_core.cpp", "category": "core functions", "arguments": [], "name": "LANG", "match": "LANG", "type": "string", "syntaxstring": "LANG (string)", "uniquename": "v_LANG", "evalcost": {"default": 0}, "implementation": "caosVM::v_LANG", "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_OC2E_DDIR": {"filename": "caosVM_core.cpp", "category": "core functions", "description": "Returns a list of the data directories available, separated with \\n. Remember that the last one is the working directory.\n", "arguments": [], "name": "OC2E DDIR", "match": "DDIR", "type": "string", "syntaxstring": "OC2E DDIR (string)", "uniquename": "v_OC2E_DDIR", "namespace": "oc2e", "evalcost": {"default": 0}, "implementation": "caosVM::v_OC2E_DDIR", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_STIM_SHOU": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Send a stimulus of the given type to all Creatures who can hear OWNR.\n", "arguments": [{"name": "stimulus", "type": "integer"}, {"name": "strength", "type": "float"}], "name": "STIM SHOU", "match": "SHOU", "type": "command", "syntaxstring": "STIM SHOU (command) stimulus (integer) strength (float)", "uniquename": "c_STIM_SHOU", "namespace": "stim", "evalcost": {"default": 1}, "implementation": "caosVM::c_STIM_SHOU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_STIM_SIGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Sends a stimulus of the given type to all Creatures who can see OWNR.\n", "arguments": [{"name": "stimulus", "type": "integer"}, {"name": "strength", "type": "float"}], "name": "STIM SIGN", "match": "SIGN", "type": "command", "syntaxstring": "STIM SIGN (command) stimulus (integer) strength (float)", "uniquename": "c_STIM_SIGN", "namespace": "stim", "evalcost": {"default": 1}, "implementation": "caosVM::c_STIM_SIGN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_STIM_TACT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Sends a stimulus of the given type to all Creatures who are touching OWNR.\n", "arguments": [{"name": "stimulus", "type": "integer"}, {"name": "strength", "type": "float"}], "name": "STIM TACT", "match": "TACT", "type": "command", "syntaxstring": "STIM TACT (command) stimulus (integer) strength (float)", "uniquename": "c_STIM_TACT", "namespace": "stim", "evalcost": {"default": 1}, "implementation": "caosVM::c_STIM_TACT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_STIM_WRIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Sends a stimulus of the given type to specific Creature.\n", "arguments": [{"name": "creature", "type": "agent"}, {"name": "stimulus", "type": "integer"}, {"name": "strength", "type": "float"}], "name": "STIM WRIT", "match": "WRIT", "type": "command", "syntaxstring": "STIM WRIT (command) creature (agent) stimulus (integer) strength (float)", "uniquename": "c_STIM_WRIT", "namespace": "stim", "evalcost": {"default": 1}, "implementation": "caosVM::c_STIM_WRIT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_SWAY_SHOU": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Adjusts these four drives in all Creatures who can hear OWNR.\n", "arguments": [{"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "SWAY SHOU", "match": "SHOU", "type": "command", "syntaxstring": "SWAY SHOU (command) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float)", "uniquename": "c_SWAY_SHOU", "namespace": "sway", "evalcost": {"default": 1}, "implementation": "caosVM::c_SWAY_SHOU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -8}, "c_SWAY_SIGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Adjusts these four drives in all Creatures who can see OWNR.\n", "arguments": [{"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "SWAY SIGN", "match": "SIGN", "type": "command", "syntaxstring": "SWAY SIGN (command) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float)", "uniquename": "c_SWAY_SIGN", "namespace": "sway", "evalcost": {"default": 1}, "implementation": "caosVM::c_SWAY_SIGN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -8}, "c_SWAY_TACT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Adjusts these four drives in all Creatures who are touching OWNR.\n", "arguments": [{"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "SWAY TACT", "match": "TACT", "type": "command", "syntaxstring": "SWAY TACT (command) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float)", "uniquename": "c_SWAY_TACT", "namespace": "sway", "evalcost": {"default": 1}, "implementation": "caosVM::c_SWAY_TACT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -8}, "c_SWAY_WRIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Adjusts these four drives in the specified creature.\n", "arguments": [{"name": "creature", "type": "agent"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}, {"name": "drive", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "SWAY WRIT", "match": "WRIT", "type": "command", "syntaxstring": "SWAY WRIT (command) creature (agent) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float)", "uniquename": "c_SWAY_WRIT", "namespace": "sway", "evalcost": {"default": 1}, "implementation": "caosVM::c_SWAY_WRIT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -9}, "c_NOHH": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Tells the target Creature to stop holding hands with the pointer.\n", "arguments": [], "name": "NOHH", "match": "NOHH", "type": "command", "syntaxstring": "NOHH (command)", "uniquename": "c_NOHH", "evalcost": {"default": 1}, "implementation": "caosVM::c_NOHH", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ZOMB": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Turns zombification of the target Creature on and off.  Set to 1 to disconnect the brain and\nmotor of the target Creature, and 0 to undo.\n", "arguments": [{"name": "zombie", "type": "integer"}], "name": "ZOMB", "match": "ZOMB", "type": "command", "syntaxstring": "ZOMB (command) zombie (integer)", "uniquename": "c_ZOMB", "evalcost": {"default": 1}, "implementation": "caosVM::c_ZOMB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ZOMB": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns 1 if target Creature is zombified, or 0 if otherwise.\n", "arguments": [], "name": "ZOMB", "match": "ZOMB", "type": "integer", "syntaxstring": "ZOMB (integer)", "uniquename": "v_ZOMB", "evalcost": {"default": 0}, "implementation": "caosVM::v_ZOMB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_DIRN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Changes the target Creature to face a different direction.\n", "arguments": [{"name": "direction", "type": "integer"}], "name": "DIRN", "match": "DIRN", "type": "command", "syntaxstring": "DIRN (command) direction (integer)", "uniquename": "c_DIRN", "evalcost": {"default": 1}, "implementation": "caosVM::c_DIRN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HHLD": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns Creatures that are holding hands with pointer, or NULL if none.\n", "arguments": [], "name": "HHLD", "match": "HHLD", "type": "agent", "syntaxstring": "HHLD (agent)", "uniquename": "v_HHLD", "evalcost": {"default": 0}, "implementation": "caosVM::v_HHLD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MVFT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Move the target Creature's foot (along with the rest of the Creature, obviously) to the given\ncoordinates.  You should use this rather than MVTO for Creatures.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "MVFT", "match": "MVFT", "type": "command", "syntaxstring": "MVFT (command) x (float) y (float)", "uniquename": "c_MVFT", "evalcost": {"default": 1}, "implementation": "caosVM::c_MVFT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_CREA": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Determines whether the given agent is a creature or not (0 or 1).\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "CREA", "match": "CREA", "type": "integer", "syntaxstring": "CREA (integer) agent (agent)", "uniquename": "v_CREA", "evalcost": {"default": 0}, "implementation": "caosVM::v_CREA", "status": "done", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_VOCB": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature learn all vocabulary words immediately.\n", "arguments": [], "name": "VOCB", "match": "VOCB", "type": "command", "syntaxstring": "VOCB (command)", "uniquename": "c_VOCB", "evalcost": {"default": 1}, "implementation": "caosVM::c_VOCB", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DEAD": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Kill the target Creature biologically.\n", "arguments": [], "name": "DEAD", "match": "DEAD", "type": "command", "syntaxstring": "DEAD (command)", "uniquename": "c_DEAD", "evalcost": {"default": 1}, "implementation": "caosVM::c_DEAD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NORN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Sets the target Creature to the given one.\n", "arguments": [{"name": "creature", "type": "agent"}], "name": "NORN", "match": "NORN", "type": "command", "syntaxstring": "NORN (command) creature (agent)", "uniquename": "c_NORN", "evalcost": {"default": 1}, "implementation": "caosVM::c_NORN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_URGE_SHOU": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Urges all Creatures who can hear OWNR to perform the given action on OWNR.\nThe two stimuli parameters can range from -1.0 (discourage) to 1.0 (encourage).\n", "arguments": [{"name": "noun_stim", "type": "float"}, {"name": "verb_id", "type": "integer"}, {"name": "verb_stim", "type": "float"}], "name": "URGE SHOU", "match": "SHOU", "type": "command", "syntaxstring": "URGE SHOU (command) noun_stim (float) verb_id (integer) verb_stim (float)", "uniquename": "c_URGE_SHOU", "namespace": "urge", "evalcost": {"default": 1}, "implementation": "caosVM::c_URGE_SHOU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_URGE_SIGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Urges all Creatures who can see OWNR to perform the given action on OWNR.\nThe two stimuli parameters can range from -1.0 (discourage) to 1.0 (encourage).\n", "arguments": [{"name": "noun_stim", "type": "float"}, {"name": "verb_id", "type": "integer"}, {"name": "verb_stim", "type": "float"}], "name": "URGE SIGN", "match": "SIGN", "type": "command", "syntaxstring": "URGE SIGN (command) noun_stim (float) verb_id (integer) verb_stim (float)", "uniquename": "c_URGE_SIGN", "namespace": "urge", "evalcost": {"default": 1}, "implementation": "caosVM::c_URGE_SIGN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_URGE_TACT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Urges all Creatures who are touching OWNR to perform the given action on OWNR.\nThe two stimuli parameters can range from -1.0 (discourage) to 1.0 (encourage).\n", "arguments": [{"name": "noun_stim", "type": "float"}, {"name": "verb_id", "type": "integer"}, {"name": "verb_stim", "type": "float"}], "name": "URGE TACT", "match": "TACT", "type": "command", "syntaxstring": "URGE TACT (command) noun_stim (float) verb_id (integer) verb_stim (float)", "uniquename": "c_URGE_TACT", "namespace": "urge", "evalcost": {"default": 1}, "implementation": "caosVM::c_URGE_TACT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_URGE_WRIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Urges the specified Creature to perform the specified action (verb) on the specified object type\n(noun).  Provide a stim greater than 1 to force, and an id of -1 and a stim greater than 1 to unforce.\n", "arguments": [{"name": "creature", "type": "agent"}, {"name": "noun_id", "type": "integer"}, {"name": "noun_stim", "type": "float"}, {"name": "verb_id", "type": "integer"}, {"name": "verb_stim", "type": "float"}], "name": "URGE WRIT", "match": "WRIT", "type": "command", "syntaxstring": "URGE WRIT (command) creature (agent) noun_id (integer) noun_stim (float) verb_id (integer) verb_stim (float)", "uniquename": "c_URGE_WRIT", "namespace": "urge", "evalcost": {"default": 1}, "implementation": "caosVM::c_URGE_WRIT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_DRIV": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Modifies the level of a drive in target Creature by the given level, which can range from -1.0 (decrease) to 1.0 (increase).\n", "arguments": [{"name": "drive_id", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "DRIV", "match": "DRIV", "type": "command", "syntaxstring": "DRIV (command) drive_id (integer) adjust (float)", "uniquename": "c_DRIV", "evalcost": {"default": 1}, "implementation": "caosVM::c_DRIV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_DRIV": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the level of a drive (0.0 to 1.0) in target Creature.\n", "arguments": [{"name": "drive_id", "type": "integer"}], "name": "DRIV", "match": "DRIV", "type": "float", "syntaxstring": "DRIV (float) drive_id (integer)", "uniquename": "v_DRIV", "evalcost": {"default": 0}, "implementation": "caosVM::v_DRIV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_CHEM": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Modifies the level of a chemical in target Creature's bloodstream by adjust, which can range from -1.0 (decrease) to 1.0 (increase).\n", "arguments": [{"name": "chemical_id", "type": "integer"}, {"name": "adjust", "type": "float"}], "name": "CHEM", "match": "CHEM", "type": "command", "syntaxstring": "CHEM (command) chemical_id (integer) adjust (float)", "uniquename": "c_CHEM", "evalcost": {"default": 1}, "implementation": "caosVM::c_CHEM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_CHEM": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the level of a chemical (0.0 to 1.0) in target creature's bloodstream.\n", "arguments": [{"name": "chemical_id", "type": "integer"}], "name": "CHEM", "match": "CHEM", "type": "float", "syntaxstring": "CHEM (float) chemical_id (integer)", "uniquename": "v_CHEM", "evalcost": {"default": 0}, "implementation": "caosVM::v_CHEM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_UNCS": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature conscious if 0, or unconscious if 1.\n", "arguments": [{"name": "unconscious", "type": "integer"}], "name": "UNCS", "match": "UNCS", "type": "command", "syntaxstring": "UNCS (command) unconscious (integer)", "uniquename": "c_UNCS", "evalcost": {"default": 1}, "implementation": "caosVM::c_UNCS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_FACE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "number", "type": "integer"}], "name": "FACE", "match": "FACE", "type": "command", "syntaxstring": "FACE (command) number (integer)", "uniquename": "c_FACE", "evalcost": {"default": 1}, "implementation": "caosVM::c_FACE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FACE_INT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the front-facing pose for the current facial expression of the target creature.\n", "arguments": [], "name": "FACE INT", "match": "INT", "type": "integer", "syntaxstring": "FACE INT (integer)", "uniquename": "v_FACE_INT", "namespace": "face", "evalcost": {"default": 0}, "implementation": "caosVM::v_FACE_INT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_FACE_STRING": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the current sprite filename for the face of the target creature.\n", "arguments": [], "name": "FACE STRING", "match": "STRING", "type": "string", "syntaxstring": "FACE STRING (string)", "uniquename": "v_FACE_STRING", "namespace": "face", "evalcost": {"default": 0}, "implementation": "caosVM::v_FACE_STRING", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_LIKE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Causes the target Creature to state an opinion about the specified Creature.\n", "arguments": [{"name": "creature", "type": "agent"}], "name": "LIKE", "match": "LIKE", "type": "command", "syntaxstring": "LIKE (command) creature (agent)", "uniquename": "c_LIKE", "evalcost": {"default": 1}, "implementation": "caosVM::c_LIKE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_LIMB": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns the filename for the specified part of a Creature, substituting as necessary.\n", "arguments": [{"name": "bodypart", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "gender", "type": "integer"}, {"name": "age", "type": "integer"}, {"name": "variant", "type": "integer"}], "name": "LIMB", "match": "LIMB", "type": "string", "syntaxstring": "LIMB (string) bodypart (integer) genus (integer) gender (integer) age (integer) variant (integer)", "uniquename": "v_LIMB", "evalcost": {"default": 0}, "implementation": "caosVM::v_LIMB", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_ORDR_SHOU": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature speak the specified speech to all creatures in hearing range.\n", "arguments": [{"name": "speech", "type": "string"}], "name": "ORDR SHOU", "match": "SHOU", "type": "command", "syntaxstring": "ORDR SHOU (command) speech (string)", "uniquename": "c_ORDR_SHOU", "namespace": "ordr", "evalcost": {"default": 1}, "implementation": "caosVM::c_ORDR_SHOU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ORDR_SIGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature speak the specified speech to all creatures that can see it.\n", "arguments": [{"name": "speech", "type": "string"}], "name": "ORDR SIGN", "match": "SIGN", "type": "command", "syntaxstring": "ORDR SIGN (command) speech (string)", "uniquename": "c_ORDR_SIGN", "namespace": "ordr", "evalcost": {"default": 1}, "implementation": "caosVM::c_ORDR_SIGN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ORDR_TACT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature speak the specified speech to all creatures that are touching it.\n", "arguments": [{"name": "speech", "type": "string"}], "name": "ORDR TACT", "match": "TACT", "type": "command", "syntaxstring": "ORDR TACT (command) speech (string)", "uniquename": "c_ORDR_TACT", "namespace": "ordr", "evalcost": {"default": 1}, "implementation": "caosVM::c_ORDR_TACT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ORDR_WRIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Makes the target Creature speak the specified speech to the specified creature.\n", "arguments": [{"name": "creature", "type": "agent"}, {"name": "speech", "type": "string"}], "name": "ORDR WRIT", "match": "WRIT", "type": "command", "syntaxstring": "ORDR WRIT (command) creature (agent) speech (string)", "uniquename": "c_ORDR_WRIT", "namespace": "ordr", "evalcost": {"default": 1}, "implementation": "caosVM::c_ORDR_WRIT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_DREA": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Turns a Creature's dreaming on and off.  A Creature's instincts are\nprocessed while it is dreaming.  If it is not asleep already, then it\nwill be made to sleep before dreaming begins.\n", "arguments": [{"name": "dream", "type": "integer"}], "name": "DREA", "match": "DREA", "type": "command", "syntaxstring": "DREA (command) dream (integer)", "uniquename": "c_DREA", "evalcost": {"default": 1}, "implementation": "caosVM::c_DREA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_DREA": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns whether or not the target Creature is dreaming (0 or 1).\n", "arguments": [], "name": "DREA", "match": "DREA", "type": "integer", "syntaxstring": "DREA (integer)", "uniquename": "v_DREA", "evalcost": {"default": 0}, "implementation": "caosVM::v_DREA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_BORN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Registers the birth of the target Creature, and sends a birth event to\nthe game.\n", "arguments": [], "name": "BORN", "match": "BORN", "type": "command", "syntaxstring": "BORN (command)", "uniquename": "c_BORN", "evalcost": {"default": 1}, "implementation": "caosVM::c_BORN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_BYIT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Determines whether or not the target Creature can reach the IT agent (0\nor 1).\n", "arguments": [], "name": "BYIT", "match": "BYIT", "type": "integer", "syntaxstring": "BYIT (integer)", "uniquename": "v_BYIT", "evalcost": {"default": 0}, "implementation": "caosVM::v_BYIT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_NEWC": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Creates a new creature over the space of a few ticks, using the specified agent/slot for genetic data. sex is 0 for random, 1 for male or 2 for female.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "gene_agent", "type": "agent"}, {"name": "gene_slot", "type": "integer"}, {"name": "sex", "type": "integer"}, {"name": "variant", "type": "integer"}], "name": "NEWC", "match": "NEWC", "type": "command", "syntaxstring": "NEWC (command) family (integer) gene_agent (agent) gene_slot (integer) sex (integer) variant (integer)", "uniquename": "c_NEWC", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEWC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_NEW_CREA": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Creates a new creature using the specified agent/slot for genetic data. sex is 0 for random, 1 for male or 2 for female.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "gene_agent", "type": "agent"}, {"name": "gene_slot", "type": "integer"}, {"name": "sex", "type": "integer"}, {"name": "variant", "type": "integer"}], "name": "NEW: CREA", "match": "CREA", "type": "command", "syntaxstring": "NEW: CREA (command) family (integer) gene_agent (agent) gene_slot (integer) sex (integer) variant (integer)", "uniquename": "c_NEW_CREA", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_CREA", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_NEW_CRAG": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "family", "type": "integer"}, {"name": "gene_agent", "type": "agent"}, {"name": "gene_slot", "type": "integer"}, {"name": "sex", "type": "integer"}, {"name": "variant", "type": "integer"}, {"name": "sprite_file", "type": "string"}, {"name": "image_count", "type": "integer"}, {"name": "first_image", "type": "integer"}, {"name": "plane", "type": "integer"}], "name": "NEW: CRAG", "match": "CRAG", "type": "command", "syntaxstring": "NEW: CRAG (command) family (integer) gene_agent (agent) gene_slot (integer) sex (integer) variant (integer) sprite_file (string) image_count (integer) first_image (integer) plane (integer)", "uniquename": "c_NEW_CRAG", "namespace": "new:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NEW_CRAG", "pragma": {"variants": "c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -9}, "v_IITT": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Return the agent which the target creature is currently focused on. Note that you should probably use _IT_ in creature scripts.\n", "arguments": [], "name": "IITT", "match": "IITT", "type": "agent", "syntaxstring": "IITT (agent)", "uniquename": "v_IITT", "evalcost": {"default": 0}, "implementation": "caosVM::v_IITT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_AGES": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Age (ie, increase the life stage of) the target creature the specified number of times.\n", "arguments": [{"name": "times", "type": "integer"}], "name": "AGES", "match": "AGES", "type": "command", "syntaxstring": "AGES (command) times (integer)", "uniquename": "c_AGES", "evalcost": {"default": 1}, "implementation": "caosVM::c_AGES", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_LOCI": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Set the value of the specified loci of the target creature. 'type' is 0 for receptor loci and 1 for emitter loci.\nSee genetics documentation for details of the parameters.\n", "arguments": [{"name": "type", "type": "integer"}, {"name": "organ", "type": "integer"}, {"name": "tissue", "type": "integer"}, {"name": "id", "type": "integer"}, {"name": "value", "type": "float"}], "name": "LOCI", "match": "LOCI", "type": "command", "syntaxstring": "LOCI (command) type (integer) organ (integer) tissue (integer) id (integer) value (float)", "uniquename": "c_LOCI", "evalcost": {"default": 1}, "implementation": "caosVM::c_LOCI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "v_LOCI": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Return the current value of the specified loci of the target creature. 'type' is 0 for receptor loci and 1 for emitter loci.\nSee genetics documentation for details of thei parameters.\n", "arguments": [{"name": "type", "type": "integer"}, {"name": "organ", "type": "integer"}, {"name": "tissue", "type": "integer"}, {"name": "id", "type": "integer"}], "name": "LOCI", "match": "LOCI", "type": "float", "syntaxstring": "LOCI (float) type (integer) organ (integer) tissue (integer) id (integer)", "uniquename": "v_LOCI", "evalcost": {"default": 0}, "implementation": "caosVM::v_LOCI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_TAGE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns age of target creature, in ticks. Only counts ticks since it was BORN.\n", "arguments": [], "name": "TAGE", "match": "TAGE", "type": "integer", "syntaxstring": "TAGE (integer)", "uniquename": "v_TAGE", "evalcost": {"default": 0}, "implementation": "caosVM::v_TAGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_ORGN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Return the number of organs the target creature has.\n", "arguments": [], "name": "ORGN", "match": "ORGN", "type": "integer", "syntaxstring": "ORGN (integer)", "uniquename": "v_ORGN", "evalcost": {"default": 0}, "implementation": "caosVM::v_ORGN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_ORGF": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Return some data about the specified organ (numbered starting at zero) of the target creature.\n\nvalue should be one of the following types of data:\n0: clock rate\n1: short term life force as a proportion of the initial life force\n2: repair rate\n3: injury to apply\n4: initial life force\n5: short term life force\n6: long term life force\n7: damage rate\n8: energy cost\n9: atp damage coefficient\n\nReturns -1 if the specified organ or value is invalid.\n", "arguments": [{"name": "organ", "type": "integer"}, {"name": "value", "type": "integer"}], "name": "ORGF", "match": "ORGF", "type": "float", "syntaxstring": "ORGF (float) organ (integer) value (integer)", "uniquename": "v_ORGF", "evalcost": {"default": 0}, "implementation": "caosVM::v_ORGF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ORGI": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Returns a count of receptors (value 0), emitters (value 1) or reactions (value 2) in the specified organ (numbered starting at zero) of the target creature.\n\nReturns -1 if the specified organ or value is invalid.\n", "arguments": [{"name": "organ", "type": "integer"}, {"name": "value", "type": "integer"}], "name": "ORGI", "match": "ORGI", "type": "integer", "syntaxstring": "ORGI (integer) organ (integer) value (integer)", "uniquename": "v_ORGI", "evalcost": {"default": 0}, "implementation": "caosVM::v_ORGI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SOUL": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}, {"name": "on", "type": "integer"}], "name": "SOUL", "match": "SOUL", "type": "command", "syntaxstring": "SOUL (command) part (integer) on (integer)", "uniquename": "c_SOUL", "evalcost": {"default": 1}, "implementation": "caosVM::c_SOUL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_SOUL": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}], "name": "SOUL", "match": "SOUL", "type": "integer", "syntaxstring": "SOUL (integer) part (integer)", "uniquename": "v_SOUL", "evalcost": {"default": 0}, "implementation": "caosVM::v_SOUL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DECN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "DECN", "match": "DECN", "type": "integer", "syntaxstring": "DECN (integer)", "uniquename": "v_DECN", "evalcost": {"default": 0}, "implementation": "caosVM::v_DECN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_ATTN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "ATTN", "match": "ATTN", "type": "integer", "syntaxstring": "ATTN (integer)", "uniquename": "v_ATTN", "evalcost": {"default": 0}, "implementation": "caosVM::v_ATTN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FORF": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "creature", "type": "agent"}], "name": "FORF", "match": "FORF", "type": "command", "syntaxstring": "FORF (command) creature (agent)", "uniquename": "c_FORF", "evalcost": {"default": 1}, "implementation": "caosVM::c_FORF", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_BRED": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}], "name": "BRED", "match": "BRED", "type": "integer", "syntaxstring": "BRED (integer) part (integer)", "uniquename": "v_BRED", "evalcost": {"default": 0}, "implementation": "caosVM::v_BRED", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_BVAR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "BVAR", "match": "BVAR", "type": "integer", "syntaxstring": "BVAR (integer)", "uniquename": "v_BVAR", "evalcost": {"default": 0}, "implementation": "caosVM::v_BVAR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_EXPR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "index", "type": "integer"}, {"name": "ticks", "type": "integer"}], "name": "EXPR", "match": "EXPR", "type": "command", "syntaxstring": "EXPR (command) index (integer) ticks (integer)", "uniquename": "c_EXPR", "evalcost": {"default": 1}, "implementation": "caosVM::c_EXPR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_EXPR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "EXPR", "match": "EXPR", "type": "integer", "syntaxstring": "EXPR (integer)", "uniquename": "v_EXPR", "evalcost": {"default": 0}, "implementation": "caosVM::v_EXPR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_TNTC": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "tintindex", "type": "integer"}, {"name": "part", "type": "integer"}, {"name": "commit", "type": "integer"}], "name": "TNTC", "match": "TNTC", "type": "command", "syntaxstring": "TNTC (command) tintindex (integer) part (integer) commit (integer)", "uniquename": "c_TNTC", "evalcost": {"default": 1}, "implementation": "caosVM::c_TNTC", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_MOTR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "enable", "type": "integer"}], "name": "MOTR", "match": "MOTR", "type": "command", "syntaxstring": "MOTR (command) enable (integer)", "uniquename": "c_MOTR", "evalcost": {"default": 1}, "implementation": "caosVM::c_MOTR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_MOTR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "MOTR", "match": "MOTR", "type": "integer", "syntaxstring": "MOTR (integer)", "uniquename": "v_MOTR", "evalcost": {"default": 0}, "implementation": "caosVM::v_MOTR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MIND": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "enable", "type": "integer"}], "name": "MIND", "match": "MIND", "type": "command", "syntaxstring": "MIND (command) enable (integer)", "uniquename": "c_MIND", "evalcost": {"default": 1}, "implementation": "caosVM::c_MIND", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_MIND": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "MIND", "match": "MIND", "type": "integer", "syntaxstring": "MIND (integer)", "uniquename": "v_MIND", "evalcost": {"default": 0}, "implementation": "caosVM::v_MIND", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_STEP": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "faculty", "type": "integer"}], "name": "STEP", "match": "STEP", "type": "command", "syntaxstring": "STEP (command) faculty (integer)", "uniquename": "c_STEP", "evalcost": {"default": 1}, "implementation": "caosVM::c_STEP", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_SEEN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "category", "type": "integer"}], "name": "SEEN", "match": "SEEN", "type": "agent", "syntaxstring": "SEEN (agent) category (integer)", "uniquename": "v_SEEN", "evalcost": {"default": 0}, "implementation": "caosVM::v_SEEN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DOIN": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Make the target creature process the specified number of instincts.\n", "arguments": [{"name": "noinstincts", "type": "integer"}], "name": "DOIN", "match": "DOIN", "type": "command", "syntaxstring": "DOIN (command) noinstincts (integer)", "uniquename": "c_DOIN", "evalcost": {"default": 1}, "implementation": "caosVM::c_DOIN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_INS": {"filename": "caosVM_creatures.cpp", "category": "creatures", "description": "Return the number of unprocessed instincts left in the instinct queue for the target creature.\n", "arguments": [], "name": "INS#", "match": "INS#", "type": "integer", "syntaxstring": "INS# (integer)", "uniquename": "v_INS", "evalcost": {"default": 0}, "implementation": "caosVM::v_INS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_BODY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "set", "type": "integer"}, {"name": "layer", "type": "integer"}], "name": "BODY", "match": "BODY", "type": "command", "syntaxstring": "BODY (command) set (integer) layer (integer)", "uniquename": "c_BODY", "evalcost": {"default": 1}, "implementation": "caosVM::c_BODY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_BODY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}], "name": "BODY", "match": "BODY", "type": "integer", "syntaxstring": "BODY (integer) part (integer)", "uniquename": "v_BODY", "evalcost": {"default": 0}, "implementation": "caosVM::v_BODY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DYED": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}, {"name": "overlay", "type": "integer"}, {"name": "set", "type": "integer"}, {"name": "layer", "type": "integer"}], "name": "DYED", "match": "DYED", "type": "command", "syntaxstring": "DYED (command) part (integer) overlay (integer) set (integer) layer (integer)", "uniquename": "c_DYED", "evalcost": {"default": 1}, "implementation": "caosVM::c_DYED", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_HAIR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "ruffleness", "type": "integer"}], "name": "HAIR", "match": "HAIR", "type": "command", "syntaxstring": "HAIR (command) ruffleness (integer)", "uniquename": "c_HAIR", "evalcost": {"default": 1}, "implementation": "caosVM::c_HAIR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_NUDE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "NUDE", "match": "NUDE", "type": "command", "syntaxstring": "NUDE (command)", "uniquename": "c_NUDE", "evalcost": {"default": 1}, "implementation": "caosVM::c_NUDE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_RSET": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "RSET", "match": "RSET", "type": "command", "syntaxstring": "RSET (command)", "uniquename": "c_RSET", "evalcost": {"default": 1}, "implementation": "caosVM::c_RSET", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_STRE": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "STRE", "match": "STRE", "type": "command", "syntaxstring": "STRE (command)", "uniquename": "c_STRE", "evalcost": {"default": 1}, "implementation": "caosVM::c_STRE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SWAP": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "variant", "type": "integer"}, {"name": "part", "type": "integer"}, {"name": "commit", "type": "integer"}], "name": "SWAP", "match": "SWAP", "type": "command", "syntaxstring": "SWAP (command) variant (integer) part (integer) commit (integer)", "uniquename": "c_SWAP", "evalcost": {"default": 1}, "implementation": "caosVM::c_SWAP", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_WEAR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}, {"name": "set", "type": "integer"}, {"name": "layer", "type": "integer"}], "name": "WEAR", "match": "WEAR", "type": "command", "syntaxstring": "WEAR (command) part (integer) set (integer) layer (integer)", "uniquename": "c_WEAR", "evalcost": {"default": 1}, "implementation": "caosVM::c_WEAR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_WEAR": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "part", "type": "integer"}, {"name": "layer", "type": "integer"}], "name": "WEAR", "match": "WEAR", "type": "integer", "syntaxstring": "WEAR (integer) part (integer) layer (integer)", "uniquename": "v_WEAR", "evalcost": {"default": 0}, "implementation": "caosVM::v_WEAR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_TNTO": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "tintindex", "type": "integer"}, {"name": "part", "type": "integer"}, {"name": "set", "type": "integer"}, {"name": "layer", "type": "integer"}], "name": "TNTO", "match": "TNTO", "type": "command", "syntaxstring": "TNTO (command) tintindex (integer) part (integer) set (integer) layer (integer)", "uniquename": "c_TNTO", "evalcost": {"default": 1}, "implementation": "caosVM::c_TNTO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_DFTX": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "DFTX", "match": "DFTX", "type": "float", "syntaxstring": "DFTX (float)", "uniquename": "v_DFTX", "evalcost": {"default": 0}, "implementation": "caosVM::v_DFTX", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DFTY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "DFTY", "match": "DFTY", "type": "float", "syntaxstring": "DFTY (float)", "uniquename": "v_DFTY", "evalcost": {"default": 0}, "implementation": "caosVM::v_DFTY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_UFTX": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "UFTX", "match": "UFTX", "type": "float", "syntaxstring": "UFTX (float)", "uniquename": "v_UFTX", "evalcost": {"default": 0}, "implementation": "caosVM::v_UFTX", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_UFTY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "UFTY", "match": "UFTY", "type": "float", "syntaxstring": "UFTY (float)", "uniquename": "v_UFTY", "evalcost": {"default": 0}, "implementation": "caosVM::v_UFTY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HEDX": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "index", "type": "integer"}], "name": "HEDX", "match": "HEDX", "type": "float", "syntaxstring": "HEDX (float) index (integer)", "uniquename": "v_HEDX", "evalcost": {"default": 0}, "implementation": "caosVM::v_HEDX", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HEDY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [{"name": "index", "type": "integer"}], "name": "HEDY", "match": "HEDY", "type": "float", "syntaxstring": "HEDY (float) index (integer)", "uniquename": "v_HEDY", "evalcost": {"default": 0}, "implementation": "caosVM::v_HEDY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MTHX": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "MTHX", "match": "MTHX", "type": "float", "syntaxstring": "MTHX (float)", "uniquename": "v_MTHX", "evalcost": {"default": 0}, "implementation": "caosVM::v_MTHX", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MTHY": {"filename": "caosVM_creatures.cpp", "category": "creatures", "arguments": [], "name": "MTHY", "match": "MTHY", "type": "float", "syntaxstring": "MTHY (float)", "uniquename": "v_MTHY", "evalcost": {"default": 0}, "implementation": "caosVM::v_MTHY", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_DBG_OUTS": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Outputs a string to the debug log.\n", "arguments": [{"name": "val", "type": "string"}], "name": "DBG: OUTS", "match": "OUTS", "type": "command", "syntaxstring": "DBG: OUTS (command) val (string)", "uniquename": "c_DBG_OUTS", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_OUTS", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_OUTV": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Outputs a decimal value to the debug log.\n", "arguments": [{"name": "val", "type": "decimal"}], "name": "DBG: OUTV", "match": "OUTV", "type": "command", "syntaxstring": "DBG: OUTV (command) val (decimal)", "uniquename": "c_DBG_OUTV", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_OUTV", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_UNID": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns the unique ID of the target agent.\nThis is currently no good for persisting.\n\nXXX: when serialization support works, this might well become good for\npersisting :)\n", "arguments": [], "name": "UNID", "match": "UNID", "type": "integer", "syntaxstring": "UNID (integer)", "uniquename": "v_UNID", "evalcost": {"default": 0}, "implementation": "caosVM::v_UNID", "pragma": {"variants": "c3 cv sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_AGNT": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns the agent with the given UNID, or NULL if agent has been deleted.\n", "arguments": [{"name": "id", "type": "integer"}], "name": "AGNT", "match": "AGNT", "type": "agent", "syntaxstring": "AGNT (agent) id (integer)", "uniquename": "v_AGNT", "evalcost": {"default": 0}, "implementation": "caosVM::v_AGNT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_MALLOC": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Dumps some random memory stats to stderr.\n", "arguments": [], "name": "DBG: MALLOC", "match": "MALLOC", "type": "command", "syntaxstring": "DBG: MALLOC (command)", "uniquename": "c_DBG_MALLOC", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_MALLOC", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_DUMP": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Dumps the current script's bytecode to stderr.\n", "arguments": [], "name": "DBG: DUMP", "match": "DUMP", "type": "command", "syntaxstring": "DBG: DUMP (command)", "uniquename": "c_DBG_DUMP", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_DUMP", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_TRACE": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Sets opcode trace level. Zero disables.\n", "arguments": [{"name": "level", "type": "integer"}], "name": "DBG: TRACE", "match": "TRACE", "type": "command", "syntaxstring": "DBG: TRACE (command) level (integer)", "uniquename": "c_DBG_TRACE", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_TRACE", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_MANN": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Looks up documentation on the given command and spits it on the current output stream.\n", "arguments": [{"name": "cmd", "type": "string"}], "name": "MANN", "match": "MANN", "type": "command", "syntaxstring": "MANN (command) cmd (string)", "uniquename": "c_MANN", "evalcost": {"default": 1}, "implementation": "caosVM::c_MANN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_DISA": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Dumps the \"bytecode\" of the indicated script to the current output channel.\nNote that this isn't really bytecode yet (though that's a possible future\nimprovement).\n\nIf the script is not found no output will be generated.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "DBG: DISA", "match": "DISA", "type": "command", "syntaxstring": "DBG: DISA (command) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "c_DBG_DISA", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_DISA", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_DBG_ASRT": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Blows up unless the given condition is true.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "DBG: ASRT", "match": "ASRT", "type": "command", "syntaxstring": "DBG: ASRT (command) condition (condition)", "uniquename": "c_DBG_ASRT", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_ASRT", "pragma": {"parser": "new AssertParser()", "variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_ASRF": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "(openc2e-only)\nBlows up unless the given condition is false.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "DBG: ASRF", "match": "ASRF", "type": "command", "syntaxstring": "DBG: ASRF (command) condition (condition)", "uniquename": "c_DBG_ASRF", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_ASRF", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_FAIL": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "(openc2e-only)\nBlows up.\n", "arguments": [], "name": "DBG: FAIL", "match": "FAIL", "type": "command", "syntaxstring": "DBG: FAIL (command)", "uniquename": "c_DBG_FAIL", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_FAIL", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DBG_IDNT": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "(openc2e-only)\nReturn a nicely-formatted string identifying the classifier of the agent,\nusing the catalogue to find the name if possible.\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "DBG: IDNT", "match": "IDNT", "type": "string", "syntaxstring": "DBG: IDNT (string) agent (agent)", "uniquename": "v_DBG_IDNT", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_IDNT", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_PROF": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Dumps the current agent profiling information to the output stream, in CSV format.\n", "arguments": [], "name": "DBG: PROF", "match": "PROF", "type": "command", "syntaxstring": "DBG: PROF (command)", "uniquename": "c_DBG_PROF", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_PROF", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_CPRO": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Clears the current agent profiling information.\n", "arguments": [], "name": "DBG: CPRO", "match": "CPRO", "type": "command", "syntaxstring": "DBG: CPRO (command)", "uniquename": "c_DBG_CPRO", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_CPRO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_DBG_STOK": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns the bare token in 'bareword' as a string.\n", "arguments": [{"name": "bareword", "type": "bareword"}], "name": "DBG: STOK", "match": "STOK", "type": "string", "syntaxstring": "DBG: STOK (string) bareword (bareword)", "uniquename": "v_DBG_STOK", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_STOK", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DBG_TSLC": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Sets the currently executing script's remaining timeslice value. This command\naffects only the current timeslice; future slices use the normal amount for\nthe dialect in question.\n", "arguments": [{"name": "timeslice", "type": "integer"}], "name": "DBG: TSLC", "match": "TSLC", "type": "command", "syntaxstring": "DBG: TSLC (command) timeslice (integer)", "uniquename": "c_DBG_TSLC", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::c_DBG_TSLC", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_DBG_TSLC": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns the number of ticks left in the current script's remaining timeslice.\n", "arguments": [], "name": "DBG: TSLC", "match": "TSLC", "type": "integer", "syntaxstring": "DBG: TSLC (integer)", "uniquename": "v_DBG_TSLC", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_TSLC", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DBG_SIZO": {"filename": "caosVM_debug.cpp", "category": "debugging", "description": "Returns a human-readable profile of the sizes and allocation counts of\nvarious internal data structures\n", "arguments": [], "name": "DBG: SIZO", "match": "SIZO", "type": "string", "syntaxstring": "DBG: SIZO (string)", "uniquename": "v_DBG_SIZO", "namespace": "dbg:", "evalcost": {"default": 0}, "implementation": "caosVM::v_DBG_SIZO", "pragma": {"variants": "all"}, "status": "ok", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FILE_GLOB": {"filename": "caosVM_files.cpp", "category": "files", "description": "Globs the given journal directory (pass 0 for the world directory, or 1 for the main directory) for the\ngiven filespec (you can use wildcards, and descend into subdirectories using '..').\n\nThe result is placed on the input stream for reading with standard input commands (eg, INNI and INNL);\nthis consists of the number of results on the first line, and then the full filename paths to the matched\nfiles on the remaining lines.\n", "arguments": [{"name": "directory", "type": "integer"}, {"name": "filespec", "type": "string"}], "name": "FILE GLOB", "match": "GLOB", "type": "command", "syntaxstring": "FILE GLOB (command) directory (integer) filespec (string)", "uniquename": "c_FILE_GLOB", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_GLOB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_FILE_ICLO": {"filename": "caosVM_files.cpp", "category": "files", "description": "Disconnects everything from the input stream.\n", "arguments": [], "name": "FILE ICLO", "match": "ICLO", "type": "command", "syntaxstring": "FILE ICLO (command)", "uniquename": "c_FILE_ICLO", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_ICLO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_FILE_IOPE": {"filename": "caosVM_files.cpp", "category": "files", "description": "Puts the given filename in the given directory (pass 1 for the world directory, or 0 for the main\ndirectory) on the current VM's input stream, for use by INOK, INNL, INNI and INNF.\nIf a file is already open, it will be closed first.\n", "arguments": [{"name": "directory", "type": "integer"}, {"name": "filename", "type": "string"}], "name": "FILE IOPE", "match": "IOPE", "type": "command", "syntaxstring": "FILE IOPE (command) directory (integer) filename (string)", "uniquename": "c_FILE_IOPE", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_IOPE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_FILE_JDEL": {"filename": "caosVM_files.cpp", "category": "files", "description": "Removes the given file in the given directory (pass 1 for the world directory, or 0 for the main\ndirectory) immediately.\n", "arguments": [{"name": "directory", "type": "integer"}, {"name": "filename", "type": "string"}], "name": "FILE JDEL", "match": "JDEL", "type": "command", "syntaxstring": "FILE JDEL (command) directory (integer) filename (string)", "uniquename": "c_FILE_JDEL", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_JDEL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_FILE_OCLO": {"filename": "caosVM_files.cpp", "category": "files", "description": "Disconnects everything from the output stream.\n", "arguments": [], "name": "FILE OCLO", "match": "OCLO", "type": "command", "syntaxstring": "FILE OCLO (command)", "uniquename": "c_FILE_OCLO", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_OCLO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_FILE_OFLU": {"filename": "caosVM_files.cpp", "category": "files", "description": "Flushes the current output stream; if this is a file, all data in the buffer will be written to it.\n", "arguments": [], "name": "FILE OFLU", "match": "OFLU", "type": "command", "syntaxstring": "FILE OFLU (command)", "uniquename": "c_FILE_OFLU", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_OFLU", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_FILE_OOPE": {"filename": "caosVM_files.cpp", "category": "files", "description": "Puts the given filename in the given directory (pass 1 for the world directory, or 0 for the main\ndirectory) on the current VM's output stream.\nIf a file is already open, it will be closed first.\n", "arguments": [{"name": "directory", "type": "integer"}, {"name": "filename", "type": "string"}, {"name": "append", "type": "integer"}], "name": "FILE OOPE", "match": "OOPE", "type": "command", "syntaxstring": "FILE OOPE (command) directory (integer) filename (string) append (integer)", "uniquename": "c_FILE_OOPE", "namespace": "file", "evalcost": {"default": 1}, "implementation": "caosVM::c_FILE_OOPE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_FVWM": {"filename": "caosVM_files.cpp", "category": "files", "description": "Returns an safe (not-in-use) filename for naming worlds and other saved files.\n", "arguments": [{"name": "name", "type": "string"}], "name": "FVWM", "match": "FVWM", "type": "string", "syntaxstring": "FVWM (string) name (string)", "uniquename": "v_FVWM", "evalcost": {"default": 0}, "implementation": "caosVM::v_FVWM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_INNF": {"filename": "caosVM_files.cpp", "category": "files", "description": "Fetches a float from the current input stream, or 0.0 if there is no data.\n", "arguments": [], "name": "INNF", "match": "INNF", "type": "float", "syntaxstring": "INNF (float)", "uniquename": "v_INNF", "evalcost": {"default": 0}, "implementation": "caosVM::v_INNF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_INNI": {"filename": "caosVM_files.cpp", "category": "files", "description": "Fetches an integer from the current input stream, or 0 if there is no data.\n", "arguments": [], "name": "INNI", "match": "INNI", "type": "integer", "syntaxstring": "INNI (integer)", "uniquename": "v_INNI", "evalcost": {"default": 0}, "implementation": "caosVM::v_INNI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_INNL": {"filename": "caosVM_files.cpp", "category": "files", "description": "Fetches a string of text from the input stream.\n", "arguments": [], "name": "INNL", "match": "INNL", "type": "string", "syntaxstring": "INNL (string)", "uniquename": "v_INNL", "evalcost": {"default": 0}, "implementation": "caosVM::v_INNL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_INOK": {"filename": "caosVM_files.cpp", "category": "files", "description": "Determines whether the current input stream is usable (0 or 1).\n", "arguments": [], "name": "INOK", "match": "INOK", "type": "integer", "syntaxstring": "INOK (integer)", "uniquename": "v_INOK", "evalcost": {"default": 0}, "implementation": "caosVM::v_INOK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_WEBB": {"filename": "caosVM_files.cpp", "category": "files", "description": "Launches the specified URL, prepended with 'http://' (so you'd only specify, for example, 'example.com/foo.html'), in the user's browser.\n", "arguments": [{"name": "url", "type": "string"}], "name": "WEBB", "match": "WEBB", "type": "command", "syntaxstring": "WEBB (command) url (string)", "uniquename": "c_WEBB", "evalcost": {"default": 1}, "implementation": "caosVM::c_WEBB", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DOIF": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Part of a DOIF/ELIF/ELSE/ENDI block. Jumps to the next part of the block if condition is false,\notherwise continues executing the script.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "DOIF", "match": "DOIF", "type": "command", "syntaxstring": "DOIF (command) condition (condition)", "uniquename": "c_DOIF", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_DOIF", "pragma": {"variants": "c1 c2 cv c3 sm", "stackdelta": "0"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ELIF": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Part of a DOIF/ELIF/ELSE/ENDI block. If none of the previous DOIF/ELIF conditions have been true, and condition evaluates to true, then the code in the ELIF block is executed.\nIf found outside a DOIF block, it is equivalent to a DOIF. If you take advantage of this behavior, fuzzie is of the opinion that you should be shot.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "ELIF", "match": "ELIF", "type": "command", "syntaxstring": "ELIF (command) condition (condition)", "uniquename": "c_ELIF", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ELIF", "pragma": {"variants": "all", "stackdelta": "0"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ELSE": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Part of a DOIF/ELIF/ELSE/ENDI block. If ELSE is present, it is jumped to when none of the previous DOIF/ELIF conditions are true.\n", "arguments": [], "name": "ELSE", "match": "ELSE", "type": "command", "syntaxstring": "ELSE (command)", "uniquename": "c_ELSE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ELSE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ENDI": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The end of a DOIF/ELIF/ELSE/ENDI block.\n", "arguments": [], "name": "ENDI", "match": "ENDI", "type": "command", "syntaxstring": "ENDI (command)", "uniquename": "c_ENDI", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ENDI", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_REPS": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The start of a REPS...REPE loop. The body of the loop will be executed (reps) times.\n", "arguments": [{"name": "reps", "type": "integer"}], "name": "REPS", "match": "REPS", "type": "command", "syntaxstring": "REPS (command) reps (integer)", "uniquename": "c_REPS", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_REPS", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_REPE": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The end of a REPS...REPE loop.\n", "arguments": [], "name": "REPE", "match": "REPE", "type": "command", "syntaxstring": "REPE (command)", "uniquename": "c_REPE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_REPE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_LOOP": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The start of a LOOP...EVER or LOOP...UNTL loop.\n", "arguments": [], "name": "LOOP", "match": "LOOP", "type": "command", "syntaxstring": "LOOP (command)", "uniquename": "c_LOOP", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_LOOP", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_EVER": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Jumps back to the matching LOOP, no matter what.\n", "arguments": [], "name": "EVER", "match": "EVER", "type": "command", "syntaxstring": "EVER (command)", "uniquename": "c_EVER", "evalcost": {"default": 1}, "implementation": "caosVM::c_EVER", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_UNTL": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Jumps back to the matching LOOP unless the condition evaluates to true.\n", "arguments": [{"name": "condition", "type": "condition"}], "name": "UNTL", "match": "UNTL", "type": "command", "syntaxstring": "UNTL (command) condition (condition)", "uniquename": "c_UNTL", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_UNTL", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_GSUB": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Jumps to a subroutine defined by SUBR with label (label).\n", "arguments": [{"name": "label", "type": "label"}], "name": "GSUB", "match": "GSUB", "type": "command", "syntaxstring": "GSUB (command) label (label)", "uniquename": "c_GSUB", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_GSUB", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SUBR": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Defines the start of a subroute to be called with GSUB, with label (label).\nIf the command is encountered during execution, it acts like a STOP.\n", "arguments": [{"name": "label", "type": "label"}], "name": "SUBR", "match": "SUBR", "type": "command", "syntaxstring": "SUBR (command) label (label)", "uniquename": "c_SUBR", "evalcost": {"default": 1}, "implementation": "caosVM::c_SUBR", "pragma": {"stackdelta": "0", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_RETN": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Returns from a subroutine called with GSUB.\n", "arguments": [], "name": "RETN", "match": "RETN", "type": "command", "syntaxstring": "RETN (command)", "uniquename": "c_RETN", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_RETN", "pragma": {"stackdelta": "any", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_NEXT": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "The end of an ENUM...NEXT loop.\n", "arguments": [], "name": "NEXT", "match": "NEXT", "type": "command", "syntaxstring": "NEXT (command)", "uniquename": "c_NEXT", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_NEXT", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_ENUM": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Loops through all agents with the given classifier.  0 on any field is a\nwildcard. The loop body is terminated by a NEXT.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "ENUM", "match": "ENUM", "type": "command", "syntaxstring": "ENUM (command) family (integer) genus (integer) species (integer)", "uniquename": "c_ENUM", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ENUM", "pragma": {"stackdelta": "any", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_ESEE": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Simular to ENUM, but iterates through agents visible to OWNR, or visible to TARG in an install script.\nAn agent can be seen if it is within the range set by RNGE, and is visible (this includes the PERM value\nof walls that lie between them, and, if the agent is a Creature, it not having the 'invisible' attribute).\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "ESEE", "match": "ESEE", "type": "command", "syntaxstring": "ESEE (command) family (integer) genus (integer) species (integer)", "uniquename": "c_ESEE", "evalcost": {"default": 1}, "implementation": "caosVM::c_ESEE", "pragma": {"stackdelta": "any", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_ETCH": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Similar to ENUM, but iterates through the agents OWNR is touching, or TARG is touching in an install script.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "ETCH", "match": "ETCH", "type": "command", "syntaxstring": "ETCH (command) family (integer) genus (integer) species (integer)", "uniquename": "c_ETCH", "evalcost": {"default": 1}, "implementation": "caosVM::c_ETCH", "pragma": {"stackdelta": "any", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_EPAS": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Similar to ENUM, but iterates through the OWNR vehicle's passengers.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "EPAS", "match": "EPAS", "type": "command", "syntaxstring": "EPAS (command) family (integer) genus (integer) species (integer)", "uniquename": "c_EPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_EPAS", "pragma": {"stackdelta": "any"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_ECON": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Loops through all the agents in the connective system containing the given agent.\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "ECON", "match": "ECON", "type": "command", "syntaxstring": "ECON (command) agent (agent)", "uniquename": "c_ECON", "evalcost": {"default": 1}, "implementation": "caosVM::c_ECON", "pragma": {"stackdelta": "any"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_CALL": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Calls script_no on OWNR, then waits for it to return. The invoked script\nwill inherit the caller's INST setting, but any changes it makes to it will\nbe reversed once it returns - so eg if you call a script when in INST mode,\nit calls OVER and returns, you'll still be in INST.\n\nScript variables (VAxx) will not be preserved - you'll have to use OVxx\nfor any parameters.\n", "arguments": [{"name": "script_no", "type": "integer"}, {"name": "p1", "type": "any"}, {"name": "p2", "type": "any"}], "name": "CALL", "match": "CALL", "type": "command", "syntaxstring": "CALL (command) script_no (integer) p1 (any) p2 (any)", "uniquename": "c_CALL", "evalcost": {"default": 1}, "implementation": "caosVM::c_CALL", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_CAOS": {"filename": "caosVM_flow.cpp", "category": "flow control", "description": "Runs commands as caos code immediately. If inline, copy _IT_ VAxx TARG OWNR, etc. If state_trans, copy FROM and\nOWNR.  If an error occurs, it catches it and stuffs it in the report. (XXX: non-conforming)\n", "arguments": [{"name": "inline", "type": "integer"}, {"name": "state_trans", "type": "integer"}, {"name": "p1", "type": "anything"}, {"name": "p2", "type": "anything"}, {"name": "commands", "type": "string"}, {"name": "throws", "type": "integer"}, {"name": "catches", "type": "integer"}, {"name": "report", "type": "variable"}], "name": "CAOS", "match": "CAOS", "type": "string", "syntaxstring": "CAOS (string) inline (integer) state_trans (integer) p1 (anything) p2 (anything) commands (string) throws (integer) catches (integer) report (variable)", "uniquename": "v_CAOS", "evalcost": {"default": 0}, "implementation": "caosVM::v_CAOS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "c_GENE_CLON": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Clone a genome. A new moniker is created.\n", "arguments": [{"name": "dest_agent", "type": "agent"}, {"name": "dest_slot", "type": "integer"}, {"name": "src_agent", "type": "agent"}, {"name": "src_slot", "type": "integer"}], "name": "GENE CLON", "match": "CLON", "type": "command", "syntaxstring": "GENE CLON (command) dest_agent (agent) dest_slot (integer) src_agent (agent) src_slot (integer)", "uniquename": "c_GENE_CLON", "namespace": "gene", "evalcost": {"default": 1}, "implementation": "caosVM::c_GENE_CLON", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_GENE_CROS": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Cross two genomes, creating a new one.\n", "arguments": [{"name": "dest_agent", "type": "agent"}, {"name": "dest_slot", "type": "integer"}, {"name": "mum_agent", "type": "agent"}, {"name": "mum_slot", "type": "integer"}, {"name": "dad_agent", "type": "agent"}, {"name": "dad_slot", "type": "integer"}, {"name": "mum_mutation_chance", "type": "integer"}, {"name": "mum_mutation_degree", "type": "integer"}, {"name": "dad_mutation_chance", "type": "integer"}, {"name": "dad_mutation_degree", "type": "integer"}], "name": "GENE CROS", "match": "CROS", "type": "command", "syntaxstring": "GENE CROS (command) dest_agent (agent) dest_slot (integer) mum_agent (agent) mum_slot (integer) dad_agent (agent) dad_slot (integer) mum_mutation_chance (integer) mum_mutation_degree (integer) dad_mutation_chance (integer) dad_mutation_degree (integer)", "uniquename": "c_GENE_CROS", "namespace": "gene", "evalcost": {"default": 1}, "implementation": "caosVM::c_GENE_CROS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -10}, "c_GENE_KILL": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Delete a genome from a slot.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "slot", "type": "integer"}], "name": "GENE KILL", "match": "KILL", "type": "command", "syntaxstring": "GENE KILL (command) agent (agent) slot (integer)", "uniquename": "c_GENE_KILL", "namespace": "gene", "evalcost": {"default": 1}, "implementation": "caosVM::c_GENE_KILL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_GENE_LOAD": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Load a genome file into a slot. You can use * and ? wildcards in the filename.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "slot", "type": "integer"}, {"name": "genefile", "type": "string"}], "name": "GENE LOAD", "match": "LOAD", "type": "command", "syntaxstring": "GENE LOAD (command) agent (agent) slot (integer) genefile (string)", "uniquename": "c_GENE_LOAD", "namespace": "gene", "evalcost": {"default": 1}, "implementation": "caosVM::c_GENE_LOAD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_GENE_MOVE": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Move a genome to another slot.\n", "arguments": [{"name": "dest_agent", "type": "agent"}, {"name": "dest_slot", "type": "integer"}, {"name": "src_agent", "type": "agent"}, {"name": "src_slot", "type": "integer"}], "name": "GENE MOVE", "match": "MOVE", "type": "command", "syntaxstring": "GENE MOVE (command) dest_agent (agent) dest_slot (integer) src_agent (agent) src_slot (integer)", "uniquename": "c_GENE_MOVE", "namespace": "gene", "evalcost": {"default": 1}, "implementation": "caosVM::c_GENE_MOVE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_GTOS": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Return the moniker stored in the given gene slot of the target agent.\n", "arguments": [{"name": "slot", "type": "integer"}], "name": "GTOS", "match": "GTOS", "type": "string", "syntaxstring": "GTOS (string) slot (integer)", "uniquename": "v_GTOS", "evalcost": {"default": 0}, "implementation": "caosVM::v_GTOS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MTOA": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Return the agent which has the given moniker stored in a gene slot, or NULL if none.\n", "arguments": [{"name": "moniker", "type": "string"}], "name": "MTOA", "match": "MTOA", "type": "agent", "syntaxstring": "MTOA (agent) moniker (string)", "uniquename": "v_MTOA", "evalcost": {"default": 0}, "implementation": "caosVM::v_MTOA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MTOC": {"filename": "caosVM_genetics.cpp", "category": "genetics", "description": "Return the live creature with the given moniker, or NULL if none.\n", "arguments": [{"name": "moniker", "type": "string"}], "name": "MTOC", "match": "MTOC", "type": "agent", "syntaxstring": "MTOC (agent) moniker (string)", "uniquename": "v_MTOC", "evalcost": {"default": 0}, "implementation": "caosVM::v_MTOC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_CAGE": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST CAGE", "match": "CAGE", "type": "integer", "syntaxstring": "HIST CAGE (integer) moniker (string) event (integer)", "uniquename": "v_HIST_CAGE", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_CAGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_COUN": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST COUN", "match": "COUN", "type": "integer", "syntaxstring": "HIST COUN (integer) moniker (string)", "uniquename": "v_HIST_COUN", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_COUN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_CROS": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST CROS", "match": "CROS", "type": "integer", "syntaxstring": "HIST CROS (integer) moniker (string)", "uniquename": "v_HIST_CROS", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_CROS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_HIST_EVNT": {"filename": "caosVM_history.cpp", "category": "history", "description": "Fire a life event of the specified type with the specified moniker.\n", "arguments": [{"name": "moniker", "type": "string"}, {"name": "type", "type": "integer"}, {"name": "relatedmoniker1", "type": "string"}, {"name": "relatedmoniker2", "type": "string"}], "name": "HIST EVNT", "match": "EVNT", "type": "command", "syntaxstring": "HIST EVNT (command) moniker (string) type (integer) relatedmoniker1 (string) relatedmoniker2 (string)", "uniquename": "c_HIST_EVNT", "namespace": "hist", "evalcost": {"default": 1}, "implementation": "caosVM::c_HIST_EVNT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_HIST_FIND": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}, {"name": "from", "type": "integer"}], "name": "HIST FIND", "match": "FIND", "type": "integer", "syntaxstring": "HIST FIND (integer) moniker (string) event (integer) from (integer)", "uniquename": "v_HIST_FIND", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_FIND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_HIST_FINR": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}, {"name": "from", "type": "integer"}], "name": "HIST FINR", "match": "FINR", "type": "integer", "syntaxstring": "HIST FINR (integer) moniker (string) event (integer) from (integer)", "uniquename": "v_HIST_FINR", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_FINR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_HIST_FOTO": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST FOTO", "match": "FOTO", "type": "string", "syntaxstring": "HIST FOTO (string) moniker (string) event (integer)", "uniquename": "v_HIST_FOTO", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_FOTO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_HIST_FOTO": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}, {"name": "photo", "type": "string"}], "name": "HIST FOTO", "match": "FOTO", "type": "command", "syntaxstring": "HIST FOTO (command) moniker (string) event (integer) photo (string)", "uniquename": "c_HIST_FOTO", "namespace": "hist", "evalcost": {"default": 1}, "implementation": "caosVM::c_HIST_FOTO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_HIST_GEND": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST GEND", "match": "GEND", "type": "integer", "syntaxstring": "HIST GEND (integer) moniker (string)", "uniquename": "v_HIST_GEND", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_GEND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_GNUS": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST GNUS", "match": "GNUS", "type": "integer", "syntaxstring": "HIST GNUS (integer) moniker (string)", "uniquename": "v_HIST_GNUS", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_GNUS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_MON1": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST MON1", "match": "MON1", "type": "string", "syntaxstring": "HIST MON1 (string) moniker (string) event (integer)", "uniquename": "v_HIST_MON1", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_MON1", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_MON2": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST MON2", "match": "MON2", "type": "string", "syntaxstring": "HIST MON2 (string) moniker (string) event (integer)", "uniquename": "v_HIST_MON2", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_MON2", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_MUTE": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST MUTE", "match": "MUTE", "type": "integer", "syntaxstring": "HIST MUTE (integer) moniker (string)", "uniquename": "v_HIST_MUTE", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_MUTE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_NAME": {"filename": "caosVM_history.cpp", "category": "history", "description": "Return the name of the creature with the given moniker.\n", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST NAME", "match": "NAME", "type": "string", "syntaxstring": "HIST NAME (string) moniker (string)", "uniquename": "v_HIST_NAME", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_NAME", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_HIST_NAME": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "name", "type": "string"}], "name": "HIST NAME", "match": "NAME", "type": "command", "syntaxstring": "HIST NAME (command) moniker (string) name (string)", "uniquename": "c_HIST_NAME", "namespace": "hist", "evalcost": {"default": 1}, "implementation": "caosVM::c_HIST_NAME", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_HIST_NETU": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST NETU", "match": "NETU", "type": "string", "syntaxstring": "HIST NETU (string) moniker (string) event (integer)", "uniquename": "v_HIST_NETU", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_NETU", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_NEXT": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST NEXT", "match": "NEXT", "type": "string", "syntaxstring": "HIST NEXT (string) moniker (string)", "uniquename": "v_HIST_NEXT", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_NEXT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_PREV": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST PREV", "match": "PREV", "type": "string", "syntaxstring": "HIST PREV (string) moniker (string)", "uniquename": "v_HIST_PREV", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_PREV", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_RTIM": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST RTIM", "match": "RTIM", "type": "integer", "syntaxstring": "HIST RTIM (integer) moniker (string) event (integer)", "uniquename": "v_HIST_RTIM", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_RTIM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_TAGE": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST TAGE", "match": "TAGE", "type": "integer", "syntaxstring": "HIST TAGE (integer) moniker (string) event (integer)", "uniquename": "v_HIST_TAGE", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_TAGE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_TYPE": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST TYPE", "match": "TYPE", "type": "integer", "syntaxstring": "HIST TYPE (integer) moniker (string) event (integer)", "uniquename": "v_HIST_TYPE", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_TYPE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_HIST_UTXT": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}, {"name": "value", "type": "string"}], "name": "HIST UTXT", "match": "UTXT", "type": "command", "syntaxstring": "HIST UTXT (command) moniker (string) event (integer) value (string)", "uniquename": "c_HIST_UTXT", "namespace": "hist", "evalcost": {"default": 1}, "implementation": "caosVM::c_HIST_UTXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_HIST_UTXT": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST UTXT", "match": "UTXT", "type": "string", "syntaxstring": "HIST UTXT (string) moniker (string) event (integer)", "uniquename": "v_HIST_UTXT", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_UTXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_VARI": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST VARI", "match": "VARI", "type": "integer", "syntaxstring": "HIST VARI (integer) moniker (string)", "uniquename": "v_HIST_VARI", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_VARI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_HIST_WIPE": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST WIPE", "match": "WIPE", "type": "command", "syntaxstring": "HIST WIPE (command) moniker (string)", "uniquename": "c_HIST_WIPE", "namespace": "hist", "evalcost": {"default": 1}, "implementation": "caosVM::c_HIST_WIPE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_WNAM": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST WNAM", "match": "WNAM", "type": "string", "syntaxstring": "HIST WNAM (string) moniker (string) event (integer)", "uniquename": "v_HIST_WNAM", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_WNAM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_WTIK": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST WTIK", "match": "WTIK", "type": "integer", "syntaxstring": "HIST WTIK (integer) moniker (string) event (integer)", "uniquename": "v_HIST_WTIK", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_WTIK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_WUID": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}, {"name": "event", "type": "integer"}], "name": "HIST WUID", "match": "WUID", "type": "string", "syntaxstring": "HIST WUID (string) moniker (string) event (integer)", "uniquename": "v_HIST_WUID", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_WUID", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIST_WVET": {"filename": "caosVM_history.cpp", "category": "history", "arguments": [{"name": "moniker", "type": "string"}], "name": "HIST WVET", "match": "WVET", "type": "integer", "syntaxstring": "HIST WVET (integer) moniker (string)", "uniquename": "v_HIST_WVET", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_WVET", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_OOWW": {"filename": "caosVM_history.cpp", "category": "history", "description": "Return the current status of the given moniker.\n0 is unknown (never existed?), 1 is in slot, 2 is NEW: CREA creature, 3 is BORN creature, 4 is exported, 5 is dead, 6 is gone (no body), 7 is unreferenced.\n", "arguments": [{"name": "moniker", "type": "string"}], "name": "OOWW", "match": "OOWW", "type": "integer", "syntaxstring": "OOWW (integer) moniker (string)", "uniquename": "v_OOWW", "evalcost": {"default": 0}, "implementation": "caosVM::v_OOWW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_CLAC": {"filename": "caosVM_input.cpp", "category": "input", "description": "Sets the type of message sent to the TARG agent when clicked.  If set to -1, no message\nwill be sent.  Using this command will override and reset the value set with CLIK.\n", "arguments": [{"name": "message", "type": "integer"}], "name": "CLAC", "match": "CLAC", "type": "command", "syntaxstring": "CLAC (command) message (integer)", "uniquename": "c_CLAC", "evalcost": {"default": 1}, "implementation": "caosVM::c_CLAC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_CLAC": {"filename": "caosVM_input.cpp", "category": "input", "arguments": [], "name": "CLAC", "match": "CLAC", "type": "integer", "syntaxstring": "CLAC (integer)", "uniquename": "v_CLAC", "evalcost": {"default": 0}, "implementation": "caosVM::v_CLAC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_CLIK": {"filename": "caosVM_input.cpp", "category": "input", "description": "Sets three different message types that will sent to the TARG agent when clicked, on a\nrotating basis.  Setting any of the three types to -1 will cause it to be ignored. Using\nthis command will override and reset the value set by CLAC.\n", "arguments": [{"name": "msg1", "type": "integer"}, {"name": "msg2", "type": "integer"}, {"name": "msg3", "type": "integer"}], "name": "CLIK", "match": "CLIK", "type": "command", "syntaxstring": "CLIK (command) msg1 (integer) msg2 (integer) msg3 (integer)", "uniquename": "c_CLIK", "evalcost": {"default": 1}, "implementation": "caosVM::c_CLIK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_CLIK": {"filename": "caosVM_input.cpp", "category": "input", "arguments": [{"name": "data", "type": "integer"}], "name": "CLIK", "match": "CLIK", "type": "integer", "syntaxstring": "CLIK (integer) data (integer)", "uniquename": "v_CLIK", "evalcost": {"default": 0}, "implementation": "caosVM::v_CLIK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_IMSK": {"filename": "caosVM_input.cpp", "category": "input", "description": "Sets the input event flags for the target agent, which tell the engine which events the\nagent requires scripts to be fired for. For example, setting the \"key up\" flag means the\ntarget agent has the relevant script executed every time a key is released.\n\nAdd the following values together to calculate the flags parameter: 1 for key down, 2 for key up, 4 for mouse move, 8 for mouse down, 16 for mouse up, 32 for mouse wheel movement and 64 for (translated) keypress.\n\nTODO: link to the script details (event numbers and parameters).\n", "arguments": [{"name": "flags", "type": "integer"}], "name": "IMSK", "match": "IMSK", "type": "command", "syntaxstring": "IMSK (command) flags (integer)", "uniquename": "c_IMSK", "evalcost": {"default": 1}, "implementation": "caosVM::c_IMSK", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_IMSK": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns the input event flags for the target agent. See the IMSK command for details.\n", "arguments": [], "name": "IMSK", "match": "IMSK", "type": "integer", "syntaxstring": "IMSK (integer)", "uniquename": "v_IMSK", "evalcost": {"default": 0}, "implementation": "caosVM::v_IMSK", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_KEYD": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns 1 if the specified key is held down, or 0 otherwise.\n", "arguments": [{"name": "keycode", "type": "integer"}], "name": "KEYD", "match": "KEYD", "type": "integer", "syntaxstring": "KEYD (integer) keycode (integer)", "uniquename": "v_KEYD", "evalcost": {"default": 0}, "implementation": "caosVM::v_KEYD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HOTS": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns the agent that is currently underneath the Hand.\nNB: this command is not a real c1/c2 command, backported for convenience\n", "arguments": [], "name": "HOTS", "match": "HOTS", "type": "agent", "syntaxstring": "HOTS (agent)", "uniquename": "v_HOTS", "evalcost": {"default": 0}, "implementation": "caosVM::v_HOTS", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HOTP": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns the PART of the agent (given by HOTS) that is currently underneath the Hand.\n\nTransparency of the parts themselves is ignored.\n", "arguments": [], "name": "HOTP", "match": "HOTP", "type": "integer", "syntaxstring": "HOTP (integer)", "uniquename": "v_HOTP", "evalcost": {"default": 0}, "implementation": "caosVM::v_HOTP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PURE": {"filename": "caosVM_input.cpp", "category": "input", "description": "Turns the normal pointing and clicking behavior of the Hand on (0) and off (1).\n\nIf set to off, CLIK and CLAC will not work, and clicking events must be handled by IMSK.\n", "arguments": [{"name": "value", "type": "integer"}], "name": "PURE", "match": "PURE", "type": "command", "syntaxstring": "PURE (command) value (integer)", "uniquename": "c_PURE", "evalcost": {"default": 1}, "implementation": "caosVM::c_PURE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PURE": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns whether the normal pointing and clicking behavior of the Hand is on or off.\n", "arguments": [], "name": "PURE", "match": "PURE", "type": "integer", "syntaxstring": "PURE (integer)", "uniquename": "v_PURE", "evalcost": {"default": 0}, "implementation": "caosVM::v_PURE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MOPX": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns the current X coordinate of the Hand in the world.\n", "arguments": [], "name": "MOPX", "match": "MOPX", "type": "integer", "syntaxstring": "MOPX (integer)", "uniquename": "v_MOPX", "evalcost": {"default": 0}, "implementation": "caosVM::v_MOPX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MOPY": {"filename": "caosVM_input.cpp", "category": "input", "description": "Returns the current Y coordinate of the Hand in the world.\n", "arguments": [], "name": "MOPY", "match": "MOPY", "type": "integer", "syntaxstring": "MOPY (integer)", "uniquename": "v_MOPY", "evalcost": {"default": 0}, "implementation": "caosVM::v_MOPY", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_SCOL": {"filename": "caosVM_input.cpp", "category": "input", "arguments": [{"name": "andmask", "type": "integer"}, {"name": "eormask", "type": "integer"}, {"name": "upspeeds", "type": "bytestring"}, {"name": "downspeeds", "type": "bytestring"}], "name": "SCOL", "match": "SCOL", "type": "integer", "syntaxstring": "SCOL (integer) andmask (integer) eormask (integer) upspeeds (bytestring) downspeeds (bytestring)", "uniquename": "v_SCOL", "evalcost": {"default": 0}, "implementation": "caosVM::v_SCOL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_SCRL": {"filename": "caosVM_input.cpp", "category": "input", "description": "Turns on (1) or off (0) keyboard/mouse scrolling.\n", "arguments": [{"name": "enable", "type": "integer"}], "name": "SCRL", "match": "SCRL", "type": "command", "syntaxstring": "SCRL (command) enable (integer)", "uniquename": "c_SCRL", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCRL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_MOUS": {"filename": "caosVM_input.cpp", "category": "input", "arguments": [{"name": "behaviour", "type": "integer"}], "name": "MOUS", "match": "MOUS", "type": "command", "syntaxstring": "MOUS (command) behaviour (integer)", "uniquename": "c_MOUS", "evalcost": {"default": 1}, "implementation": "caosVM::c_MOUS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ADDM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Creates a metaroom with the given height and width, at the coordinates given.  Returns the id of the new metaroom.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "width", "type": "integer"}, {"name": "height", "type": "integer"}, {"name": "background", "type": "string"}], "name": "ADDM", "match": "ADDM", "type": "integer", "syntaxstring": "ADDM (integer) x (integer) y (integer) width (integer) height (integer) background (string)", "uniquename": "v_ADDM", "evalcost": {"default": 0}, "implementation": "caosVM::v_ADDM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_ADDB": {"filename": "caosVM_map.cpp", "category": "map", "description": "Adds a new background to an existing metaroom, to be displayed with BKGD.\n", "arguments": [{"name": "metaroom_id", "type": "integer"}, {"name": "background", "type": "string"}], "name": "ADDB", "match": "ADDB", "type": "command", "syntaxstring": "ADDB (command) metaroom_id (integer) background (string)", "uniquename": "c_ADDB", "evalcost": {"default": 1}, "implementation": "caosVM::c_ADDB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_BRMI": {"filename": "caosVM_map.cpp", "category": "map", "description": "Sets the base ID numbers for new metarooms and rooms to the given values.\n", "arguments": [{"name": "metaroom_base", "type": "integer"}, {"name": "room_base", "type": "integer"}], "name": "BRMI", "match": "BRMI", "type": "command", "syntaxstring": "BRMI (command) metaroom_base (integer) room_base (integer)", "uniquename": "c_BRMI", "evalcost": {"default": 1}, "implementation": "caosVM::c_BRMI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_MAPD": {"filename": "caosVM_map.cpp", "category": "map", "description": "Sets the world map dimensions, inside which metarooms are placed.\n", "arguments": [{"name": "width", "type": "integer"}, {"name": "height", "type": "integer"}], "name": "MAPD", "match": "MAPD", "type": "command", "syntaxstring": "MAPD (command) width (integer) height (integer)", "uniquename": "c_MAPD", "evalcost": {"default": 1}, "implementation": "caosVM::c_MAPD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_MAPW": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the width of the world map.\n", "arguments": [], "name": "MAPW", "match": "MAPW", "type": "integer", "syntaxstring": "MAPW (integer)", "uniquename": "v_MAPW", "evalcost": {"default": 0}, "implementation": "caosVM::v_MAPW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MAPH": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the height of the world map.\n", "arguments": [], "name": "MAPH", "match": "MAPH", "type": "integer", "syntaxstring": "MAPH (integer)", "uniquename": "v_MAPH", "evalcost": {"default": 0}, "implementation": "caosVM::v_MAPH", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MAPK": {"filename": "caosVM_map.cpp", "category": "map", "description": "Resets and empties the world map.\n", "arguments": [], "name": "MAPK", "match": "MAPK", "type": "command", "syntaxstring": "MAPK (command)", "uniquename": "c_MAPK", "evalcost": {"default": 1}, "implementation": "caosVM::c_MAPK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_BKDS": {"filename": "caosVM_map.cpp", "category": "map", "description": "Determines all of the background names in use by the given metaroom, and returns them in a comma-seperated string.\n", "arguments": [{"name": "metaroomid", "type": "integer"}], "name": "BKDS", "match": "BKDS", "type": "string", "syntaxstring": "BKDS (string) metaroomid (integer)", "uniquename": "v_BKDS", "evalcost": {"default": 0}, "implementation": "caosVM::v_BKDS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ADDR": {"filename": "caosVM_map.cpp", "category": "map", "description": "Makes a new room inside the given metaroom.  Rooms can have sloped floors and ceilings, but only vertical walls.\nThe id of the new room is returned.\n", "arguments": [{"name": "metaroomid", "type": "integer"}, {"name": "x_left", "type": "integer"}, {"name": "x_right", "type": "integer"}, {"name": "y_left_ceiling", "type": "integer"}, {"name": "y_right_ceiling", "type": "integer"}, {"name": "y_left_floor", "type": "integer"}, {"name": "y_right_floor", "type": "integer"}], "name": "ADDR", "match": "ADDR", "type": "integer", "syntaxstring": "ADDR (integer) metaroomid (integer) x_left (integer) x_right (integer) y_left_ceiling (integer) y_right_ceiling (integer) y_left_floor (integer) y_right_floor (integer)", "uniquename": "v_ADDR", "evalcost": {"default": 0}, "implementation": "caosVM::v_ADDR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "c_RTYP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Defines the 'type' of the given room.  The types vary with different games.\n", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "roomtype", "type": "integer"}], "name": "RTYP", "match": "RTYP", "type": "command", "syntaxstring": "RTYP (command) roomid (integer) roomtype (integer)", "uniquename": "c_RTYP", "evalcost": {"default": 1}, "implementation": "caosVM::c_RTYP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_RTYP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the 'type' of the given room, or -1 if 'roomid' is invalid.\n", "arguments": [{"name": "roomid", "type": "integer"}], "name": "RTYP", "match": "RTYP", "type": "integer", "syntaxstring": "RTYP (integer) roomid (integer)", "uniquename": "v_RTYP", "evalcost": {"default": 0}, "implementation": "caosVM::v_RTYP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DOOR": {"filename": "caosVM_map.cpp", "category": "map", "description": "Sets how permeable the door between the two given rooms will be. (See PERM).\n", "arguments": [{"name": "room1", "type": "integer"}, {"name": "room2", "type": "integer"}, {"name": "perm", "type": "integer"}], "name": "DOOR", "match": "DOOR", "type": "command", "syntaxstring": "DOOR (command) room1 (integer) room2 (integer) perm (integer)", "uniquename": "c_DOOR", "evalcost": {"default": 1}, "implementation": "caosVM::c_DOOR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_DOOR": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "room1", "type": "integer"}, {"name": "room2", "type": "integer"}], "name": "DOOR", "match": "DOOR", "type": "integer", "syntaxstring": "DOOR (integer) room1 (integer) room2 (integer)", "uniquename": "v_DOOR", "evalcost": {"default": 0}, "implementation": "caosVM::v_DOOR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_RATE": {"filename": "caosVM_map.cpp", "category": "map", "description": "Defines the rates of the given CA in the given room.  'gain' defines how easily the CA will be absorbed from\nagents inside the room, 'loss' defines how much will be lost into the air, and 'diffusion' defines how easily it\nwill spread to other rooms.\n", "arguments": [{"name": "roomtype", "type": "integer"}, {"name": "caindex", "type": "integer"}, {"name": "gain", "type": "float"}, {"name": "loss", "type": "float"}, {"name": "diffusion", "type": "float"}], "name": "RATE", "match": "RATE", "type": "command", "syntaxstring": "RATE (command) roomtype (integer) caindex (integer) gain (float) loss (float) diffusion (float)", "uniquename": "c_RATE", "evalcost": {"default": 1}, "implementation": "caosVM::c_RATE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "v_ROOM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the room that contains the given agent (jugding by its center).\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "ROOM", "match": "ROOM", "type": "integer", "syntaxstring": "ROOM (integer) agent (agent)", "uniquename": "v_ROOM", "evalcost": {"default": 0}, "implementation": "caosVM::v_ROOM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_LEFT": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the left constant (0).\n", "arguments": [], "name": "LEFT", "match": "LEFT", "type": "integer", "syntaxstring": "LEFT (integer)", "uniquename": "v_LEFT", "evalcost": {"default": 0}, "implementation": "caosVM::v_LEFT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_RGHT": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the right constant (1).\n", "arguments": [], "name": "RGHT", "match": "RGHT", "type": "integer", "syntaxstring": "RGHT (integer)", "uniquename": "v_RGHT", "evalcost": {"default": 0}, "implementation": "caosVM::v_RGHT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v__UP_": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the up constant (2).\n", "arguments": [], "name": "_UP_", "match": "_UP_", "type": "integer", "syntaxstring": "_UP_ (integer)", "uniquename": "v__UP_", "evalcost": {"default": 0}, "implementation": "caosVM::v_UP", "pragma": {"implementation": "caosVM::v_UP"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DOWN": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the down constant (3).\n", "arguments": [], "name": "DOWN", "match": "DOWN", "type": "integer", "syntaxstring": "DOWN (integer)", "uniquename": "v_DOWN", "evalcost": {"default": 0}, "implementation": "caosVM::v_DOWN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PROP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Defines the level of the given CA in the given room.  Valid settings are between 0 and 1; if higher, it will be\nreset to 1.\n", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "caindex", "type": "integer"}, {"name": "cavalue", "type": "float"}], "name": "PROP", "match": "PROP", "type": "command", "syntaxstring": "PROP (command) roomid (integer) caindex (integer) cavalue (float)", "uniquename": "c_PROP", "evalcost": {"default": 1}, "implementation": "caosVM::c_PROP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_PROP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the level of the given CA in the given room, or 0 if a roomid of -1 is passed.\n", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "caindex", "type": "integer"}], "name": "PROP", "match": "PROP", "type": "float", "syntaxstring": "PROP (float) roomid (integer) caindex (integer)", "uniquename": "v_PROP", "evalcost": {"default": 0}, "implementation": "caosVM::v_PROP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PERM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Sets the TARG agent's permiability.  Valid settings are between 1 and 100.\n", "arguments": [{"name": "perm", "type": "integer"}], "name": "PERM", "match": "PERM", "type": "command", "syntaxstring": "PERM (command) perm (integer)", "uniquename": "c_PERM", "evalcost": {"default": 1}, "implementation": "caosVM::c_PERM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PERM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the TARG agent's permiability.\n", "arguments": [], "name": "PERM", "match": "PERM", "type": "integer", "syntaxstring": "PERM (integer)", "uniquename": "v_PERM", "evalcost": {"default": 0}, "implementation": "caosVM::v_PERM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_GRAP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the id of the room at the coordinates (x, y), or -1 if nothing's there.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "GRAP", "match": "GRAP", "type": "integer", "syntaxstring": "GRAP (integer) x (float) y (float)", "uniquename": "v_GRAP", "evalcost": {"default": 0}, "implementation": "caosVM::v_GRAP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_GMAP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the id of the metaroom at the coordinates (x, y), or -1 if nothing's there.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "GMAP", "match": "GMAP", "type": "integer", "syntaxstring": "GMAP (integer) x (float) y (float)", "uniquename": "v_GMAP", "evalcost": {"default": 0}, "implementation": "caosVM::v_GMAP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_LINK": {"filename": "caosVM_map.cpp", "category": "map", "description": "Defines the permeability of the link between the two given rooms.  This is used for CA diffusion.\n", "arguments": [{"name": "room1", "type": "integer"}, {"name": "room2", "type": "integer"}, {"name": "perm", "type": "integer"}], "name": "LINK", "match": "LINK", "type": "command", "syntaxstring": "LINK (command) room1 (integer) room2 (integer) perm (integer)", "uniquename": "c_LINK", "evalcost": {"default": 1}, "implementation": "caosVM::c_LINK", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_LINK": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the permeability of the link between the given two rooms, or 0 if no link exists.\n", "arguments": [{"name": "room1", "type": "integer"}, {"name": "room2", "type": "integer"}], "name": "LINK", "match": "LINK", "type": "integer", "syntaxstring": "LINK (integer) room1 (integer) room2 (integer)", "uniquename": "v_LINK", "evalcost": {"default": 0}, "implementation": "caosVM::v_LINK", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_GRID": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the nearest adjacent room to the specified agent in the given direction (one of the direction constants), or\n-1 otherwise.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "direction", "type": "integer"}], "name": "GRID", "match": "GRID", "type": "integer", "syntaxstring": "GRID (integer) agent (agent) direction (integer)", "uniquename": "v_GRID", "evalcost": {"default": 0}, "implementation": "caosVM::v_GRID", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_EMIT": {"filename": "caosVM_map.cpp", "category": "map", "description": "Makes the TARG agent continually emit the specified amount of the specified CA into the room.\n", "arguments": [{"name": "caindex", "type": "integer"}, {"name": "amount", "type": "float"}], "name": "EMIT", "match": "EMIT", "type": "command", "syntaxstring": "EMIT (command) caindex (integer) amount (float)", "uniquename": "c_EMIT", "evalcost": {"default": 1}, "implementation": "caosVM::c_EMIT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_WALL": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns the direction of the last wall the TARG agent collided with.\n", "arguments": [], "name": "WALL", "match": "WALL", "type": "integer", "syntaxstring": "WALL (integer)", "uniquename": "v_WALL", "evalcost": {"default": 0}, "implementation": "caosVM::v_WALL", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_ALTR": {"filename": "caosVM_map.cpp", "category": "map", "description": "Modifies the level of the given CA in the room specified.\nIf 'roomid' is -1, the room containing the TARG agent will be used.\n", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "caindex", "type": "integer"}, {"name": "delta", "type": "float"}], "name": "ALTR", "match": "ALTR", "type": "command", "syntaxstring": "ALTR (command) roomid (integer) caindex (integer) delta (float)", "uniquename": "c_ALTR", "evalcost": {"default": 1}, "implementation": "caosVM::c_ALTR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_RLOC": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns a string containing the location of the given room in the following format: x_left, x_right, y_left_ceiling,\ny_right_ceiling, y_left_floor, y_right_floor.\n", "arguments": [{"name": "roomid", "type": "integer"}], "name": "RLOC", "match": "RLOC", "type": "string", "syntaxstring": "RLOC (string) roomid (integer)", "uniquename": "v_RLOC", "evalcost": {"default": 0}, "implementation": "caosVM::v_RLOC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MLOC": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns a string containing the location of the given metaroom in the following format: x y width height\n", "arguments": [{"name": "metaroomid", "type": "integer"}], "name": "MLOC", "match": "MLOC", "type": "string", "syntaxstring": "MLOC (string) metaroomid (integer)", "uniquename": "v_MLOC", "evalcost": {"default": 0}, "implementation": "caosVM::v_MLOC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DMAP": {"filename": "caosVM_map.cpp", "category": "map", "description": "Turns the debug map on and off, which shows the edges of rooms and vehicles.\n", "arguments": [{"name": "mapon", "type": "integer"}], "name": "DMAP", "match": "DMAP", "type": "command", "syntaxstring": "DMAP (command) mapon (integer)", "uniquename": "c_DMAP", "evalcost": {"default": 1}, "implementation": "caosVM::c_DMAP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ERID": {"filename": "caosVM_map.cpp", "category": "map", "description": "Returns a space-seperated list of all room id's contained by the given metaroom.\n", "arguments": [{"name": "metaroom_id", "type": "integer"}], "name": "ERID", "match": "ERID", "type": "string", "syntaxstring": "ERID (string) metaroom_id (integer)", "uniquename": "v_ERID", "evalcost": {"default": 0}, "implementation": "caosVM::v_ERID", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DELR": {"filename": "caosVM_map.cpp", "category": "map", "description": "Removes the given room from the map.\n", "arguments": [{"name": "room_id", "type": "integer"}], "name": "DELR", "match": "DELR", "type": "command", "syntaxstring": "DELR (command) room_id (integer)", "uniquename": "c_DELR", "evalcost": {"default": 1}, "implementation": "caosVM::c_DELR", "pragma": {"variants": "c2 cv c3 sm"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DELM": {"filename": "caosVM_map.cpp", "category": "map", "description": "Removes the given metaroom from the map.\n", "arguments": [{"name": "metaroom_id", "type": "integer"}], "name": "DELM", "match": "DELM", "type": "command", "syntaxstring": "DELM (command) metaroom_id (integer)", "uniquename": "c_DELM", "evalcost": {"default": 1}, "implementation": "caosVM::c_DELM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_HIRP": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "caindex", "type": "integer"}, {"name": "direction", "type": "integer"}], "name": "HIRP", "match": "HIRP", "type": "integer", "syntaxstring": "HIRP (integer) roomid (integer) caindex (integer) direction (integer)", "uniquename": "v_HIRP", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIRP", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_LORP": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "roomid", "type": "integer"}, {"name": "caindex", "type": "integer"}, {"name": "direction", "type": "integer"}], "name": "LORP", "match": "LORP", "type": "integer", "syntaxstring": "LORP (integer) roomid (integer) caindex (integer) direction (integer)", "uniquename": "v_LORP", "evalcost": {"default": 0}, "implementation": "caosVM::v_LORP", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_TORX": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "roomid", "type": "integer"}], "name": "TORX", "match": "TORX", "type": "float", "syntaxstring": "TORX (float) roomid (integer)", "uniquename": "v_TORX", "evalcost": {"default": 0}, "implementation": "caosVM::v_TORX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_TORY": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "roomid", "type": "integer"}], "name": "TORY", "match": "TORY", "type": "float", "syntaxstring": "TORY (float) roomid (integer)", "uniquename": "v_TORY", "evalcost": {"default": 0}, "implementation": "caosVM::v_TORY", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_CACL": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "caindex", "type": "integer"}], "name": "CACL", "match": "CACL", "type": "command", "syntaxstring": "CACL (command) family (integer) genus (integer) species (integer) caindex (integer)", "uniquename": "c_CACL", "evalcost": {"default": 1}, "implementation": "caosVM::c_CACL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_DOCA": {"filename": "caosVM_map.cpp", "category": "map", "arguments": [{"name": "times", "type": "integer"}], "name": "DOCA", "match": "DOCA", "type": "command", "syntaxstring": "DOCA (command) times (integer)", "uniquename": "c_DOCA", "evalcost": {"default": 1}, "implementation": "caosVM::c_DOCA", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_WRAP": {"filename": "caosVM_map.cpp", "category": "map", "description": "The world-wrapping flag for the specified metaroom. 1 to enable wrapping, 0 to disable.\n", "arguments": [{"name": "metaroom_id", "type": "integer"}], "name": "WRAP", "match": "WRAP", "type": "variable", "syntaxstring": "WRAP (variable) metaroom_id (integer)", "uniquename": "v_WRAP", "evalcost": {"default": 0}, "implementation": "caosVM::v_WRAP", "pragma": {"variants": "all"}, "status": "broken", "saveimpl": "caosVM::s_WRAP", "stackdelta": 0}, "c_ELAS": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the elasticity (in other words, bounciness) of the TARG agent.\n", "arguments": [{"name": "elas", "type": "integer"}], "name": "ELAS", "match": "ELAS", "type": "command", "syntaxstring": "ELAS (command) elas (integer)", "uniquename": "c_ELAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_ELAS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ELAS": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the elasticity of the TARG agent.\n", "arguments": [], "name": "ELAS", "match": "ELAS", "type": "integer", "syntaxstring": "ELAS (integer)", "uniquename": "v_ELAS", "evalcost": {"default": 0}, "implementation": "caosVM::v_ELAS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_MVTO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Places the TARG agent at the given x/y position in the world (using the upper left hand corner of the agent).\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "MVTO", "match": "MVTO", "type": "command", "syntaxstring": "MVTO (command) x (float) y (float)", "uniquename": "c_MVTO", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_MVTO", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_MVBY": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Changes the TARG agent's position by the given relative distances.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "MVBY", "match": "MVBY", "type": "command", "syntaxstring": "MVBY (command) x (float) y (float)", "uniquename": "c_MVBY", "evalcost": {"default": 1, "c1": 1, "c2": 1}, "implementation": "caosVM::c_MVBY", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_VELX": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the current horizontal velocity, in pixels/tick, of the TARG agent.\n", "arguments": [], "name": "VELX", "match": "VELX", "type": "variable", "syntaxstring": "VELX (variable)", "uniquename": "v_VELX", "evalcost": {"default": 0}, "implementation": "caosVM::v_VELX", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_VELX", "stackdelta": 1}, "v_VELY": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the current vertical velocity, in pixels/tick, of the TARG agent.\n", "arguments": [], "name": "VELY", "match": "VELY", "type": "variable", "syntaxstring": "VELY (variable)", "uniquename": "v_VELY", "evalcost": {"default": 0}, "implementation": "caosVM::v_VELY", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_VELY", "stackdelta": 1}, "v_OBST": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the distance from the TARG agent to the nearest wall that it might collide with in the given direction.\n(except right now it just gives the direction to the nearest wall at world edge - fuzzie)\n", "arguments": [{"name": "direction", "type": "integer"}], "name": "OBST", "match": "OBST", "type": "float", "syntaxstring": "OBST (float) direction (integer)", "uniquename": "v_OBST", "evalcost": {"default": 0}, "implementation": "caosVM::v_OBST", "pragma": {"variants": "cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_TMVB": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns 1 if the TARG agent could move by (deltax, deltay) and still be in room system, or 0 otherwise.\n", "arguments": [{"name": "deltax", "type": "float"}, {"name": "deltay", "type": "float"}], "name": "TMVB", "match": "TMVB", "type": "integer", "syntaxstring": "TMVB (integer) deltax (float) deltay (float)", "uniquename": "v_TMVB", "evalcost": {"default": 0}, "implementation": "caosVM::v_TMVB", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_TMVT": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns 1 if the TARG agent could move to (x, y) and still be in room system, or 0 if otherwise.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "TMVT", "match": "TMVT", "type": "integer", "syntaxstring": "TMVT (integer) x (float) y (float)", "uniquename": "v_TMVT", "evalcost": {"default": 0}, "implementation": "caosVM::v_TMVT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_TMVF": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns 1 if the TARG Creature could move foot to (x, y) and still be in room system, or 0 if otherwise.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "TMVF", "match": "TMVF", "type": "integer", "syntaxstring": "TMVF (integer) x (float) y (float)", "uniquename": "v_TMVF", "evalcost": {"default": 0}, "implementation": "caosVM::v_TMVF", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ACCG": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the TARG agent's free-fall acceleration, in pixels/tick squared.\n", "arguments": [{"name": "accel", "type": "float"}], "name": "ACCG", "match": "ACCG", "type": "command", "syntaxstring": "ACCG (command) accel (float)", "uniquename": "c_ACCG", "evalcost": {"default": 1}, "implementation": "caosVM::c_ACCG", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ACCG": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the TARG agent's free-fall acceleration, in pixels/tick squared.\n", "arguments": [], "name": "ACCG", "match": "ACCG", "type": "float", "syntaxstring": "ACCG (float)", "uniquename": "v_ACCG", "evalcost": {"default": 0}, "implementation": "caosVM::v_ACCG", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_AERO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the aerodynamics of the TARG agent to the given float value.\n", "arguments": [{"name": "aero", "type": "float"}], "name": "AERO", "match": "AERO", "type": "command", "syntaxstring": "AERO (command) aero (float)", "uniquename": "c_AERO", "evalcost": {"default": 1}, "implementation": "caosVM::c_AERO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_AERO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the aerodynamics of the TARG agent.\n", "arguments": [], "name": "AERO", "match": "AERO", "type": "float", "syntaxstring": "AERO (float)", "uniquename": "v_AERO", "evalcost": {"default": 0}, "implementation": "caosVM::v_AERO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_RELX": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the relative horizontal distance between the centers of the two given agents.\n", "arguments": [{"name": "first", "type": "agent"}, {"name": "second", "type": "agent"}], "name": "RELX", "match": "RELX", "type": "float", "syntaxstring": "RELX (float) first (agent) second (agent)", "uniquename": "v_RELX", "evalcost": {"default": 0}, "implementation": "caosVM::v_RELX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_RELY": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the relative vertical distance between the centers of the two given agents.\n", "arguments": [{"name": "first", "type": "agent"}, {"name": "second", "type": "agent"}], "name": "RELY", "match": "RELY", "type": "float", "syntaxstring": "RELY (float) first (agent) second (agent)", "uniquename": "v_RELY", "evalcost": {"default": 0}, "implementation": "caosVM::v_RELY", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_VELO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the horizontal and vertical velocity of the TARG agent, in pixels/tick.\n", "arguments": [{"name": "xvel", "type": "float"}, {"name": "yvel", "type": "float"}], "name": "VELO", "match": "VELO", "type": "command", "syntaxstring": "VELO (command) xvel (float) yvel (float)", "uniquename": "c_VELO", "evalcost": {"default": 1}, "implementation": "caosVM::c_VELO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_MVSF": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Move the target agent to an area inside the room system at about (x, y).\nThis allows 'safe' moves.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "MVSF", "match": "MVSF", "type": "command", "syntaxstring": "MVSF (command) x (float) y (float)", "uniquename": "c_MVSF", "evalcost": {"default": 1}, "implementation": "caosVM::c_MVSF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_FRIC": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the TARG agent's coefficient of friction as a percentage.\n", "arguments": [], "name": "FRIC", "match": "FRIC", "type": "float", "syntaxstring": "FRIC (float)", "uniquename": "v_FRIC", "evalcost": {"default": 0}, "implementation": "caosVM::v_FRIC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FRIC": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the TARG agent's coefficient of friction, or the percentage of motion that will be lost as it slides on a\nsurface.\n", "arguments": [{"name": "friction", "type": "integer"}], "name": "FRIC", "match": "FRIC", "type": "command", "syntaxstring": "FRIC (command) friction (integer)", "uniquename": "c_FRIC", "evalcost": {"default": 1}, "implementation": "caosVM::c_FRIC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FALL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns 1 if the TARG agent is moving due to gravity, or 0 if otherwise.\n", "arguments": [], "name": "FALL", "match": "FALL", "type": "integer", "syntaxstring": "FALL (integer)", "uniquename": "v_FALL", "evalcost": {"default": 0}, "implementation": "caosVM::v_FALL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MOVS": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns an integer representing the motion status of the TARG agent.  0 is autonomous, 1 is moving by mouse, 2 is\nfloating, 3 is inside a vehicle, and 4 is being carried.\n", "arguments": [], "name": "MOVS", "match": "MOVS", "type": "variable", "syntaxstring": "MOVS (variable)", "uniquename": "v_MOVS", "evalcost": {"default": 0}, "implementation": "caosVM::v_MOVS", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_MOVS", "stackdelta": 1}, "c_FLTO": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the TARG agent to float its top-left corner (x, y) away from the top-left corner of the FREL agent.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "FLTO", "match": "FLTO", "type": "command", "syntaxstring": "FLTO (command) x (float) y (float)", "uniquename": "c_FLTO", "evalcost": {"default": 1}, "implementation": "caosVM::c_FLTO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_FREL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Sets the agent the TARG agent floats relative to. You must set the 'floatable' attribute for this to work.\nThe default is NULL, which means the target agent floats relative to the main camera.\n", "arguments": [{"name": "agent", "type": "agent"}], "name": "FREL", "match": "FREL", "type": "command", "syntaxstring": "FREL (command) agent (agent)", "uniquename": "c_FREL", "evalcost": {"default": 1}, "implementation": "caosVM::c_FREL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FLTX": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the x value of the TARG agent's floating vector.\n", "arguments": [], "name": "FLTX", "match": "FLTX", "type": "float", "syntaxstring": "FLTX (float)", "uniquename": "v_FLTX", "evalcost": {"default": 0}, "implementation": "caosVM::v_FLTX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_FLTY": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the y value of the TARG agent's floating vector.\n", "arguments": [], "name": "FLTY", "match": "FLTY", "type": "float", "syntaxstring": "FLTY (float)", "uniquename": "v_FLTY", "evalcost": {"default": 0}, "implementation": "caosVM::v_FLTY", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_AVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the angular velocity for the target agent.\n", "arguments": [{"name": "angularvelocity", "type": "float"}], "name": "AVEL", "match": "AVEL", "type": "command", "syntaxstring": "AVEL (command) angularvelocity (float)", "uniquename": "c_AVEL", "evalcost": {"default": 1}, "implementation": "caosVM::c_AVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_AVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the angular velocity for the target agent.\n", "arguments": [], "name": "AVEL", "match": "AVEL", "type": "float", "syntaxstring": "AVEL (float)", "uniquename": "v_AVEL", "evalcost": {"default": 0}, "implementation": "caosVM::v_AVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the forward velocity for the target agent.\n", "arguments": [{"name": "forwardvelocity", "type": "float"}], "name": "FVEL", "match": "FVEL", "type": "command", "syntaxstring": "FVEL (command) forwardvelocity (float)", "uniquename": "c_FVEL", "evalcost": {"default": 1}, "implementation": "caosVM::c_FVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the forward velocity for the target agent.\n", "arguments": [], "name": "FVEL", "match": "FVEL", "type": "float", "syntaxstring": "FVEL (float)", "uniquename": "v_FVEL", "evalcost": {"default": 0}, "implementation": "caosVM::v_FVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_SVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the sideways velocity for the target agent.\n", "arguments": [{"name": "sidewaysvelocity", "type": "float"}], "name": "SVEL", "match": "SVEL", "type": "command", "syntaxstring": "SVEL (command) sidewaysvelocity (float)", "uniquename": "c_SVEL", "evalcost": {"default": 1}, "implementation": "caosVM::c_SVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_SVEL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the sideways velocity for the target agent.\n", "arguments": [], "name": "SVEL", "match": "SVEL", "type": "float", "syntaxstring": "SVEL (float)", "uniquename": "v_SVEL", "evalcost": {"default": 0}, "implementation": "caosVM::v_SVEL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_ADMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the angular damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [{"name": "angulardamping", "type": "float"}], "name": "ADMP", "match": "ADMP", "type": "command", "syntaxstring": "ADMP (command) angulardamping (float)", "uniquename": "c_ADMP", "evalcost": {"default": 1}, "implementation": "caosVM::c_ADMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_ADMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the angular damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [], "name": "ADMP", "match": "ADMP", "type": "float", "syntaxstring": "ADMP (float)", "uniquename": "v_ADMP", "evalcost": {"default": 0}, "implementation": "caosVM::v_ADMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_FDMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the forward damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [{"name": "forwarddamping", "type": "float"}], "name": "FDMP", "match": "FDMP", "type": "command", "syntaxstring": "FDMP (command) forwarddamping (float)", "uniquename": "c_FDMP", "evalcost": {"default": 1}, "implementation": "caosVM::c_FDMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_FDMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the forward damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [], "name": "FDMP", "match": "FDMP", "type": "float", "syntaxstring": "FDMP (float)", "uniquename": "v_FDMP", "evalcost": {"default": 0}, "implementation": "caosVM::v_FDMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_SDMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the sideways damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [{"name": "sidewaysdamping", "type": "float"}], "name": "SDMP", "match": "SDMP", "type": "command", "syntaxstring": "SDMP (command) sidewaysdamping (float)", "uniquename": "c_SDMP", "evalcost": {"default": 1}, "implementation": "caosVM::c_SDMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_SDMP": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the sideways damping (0.0 to 1.0, fraction to damp per tick) for the target agent.\n", "arguments": [], "name": "SDMP", "match": "SDMP", "type": "float", "syntaxstring": "SDMP (float)", "uniquename": "v_SDMP", "evalcost": {"default": 0}, "implementation": "caosVM::v_SDMP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_SPIN": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Set the angle (from 0.0 to 1.0) the target agent is facing.\nTODO: This seems to not affect velocity in original c2e, sometimes. Needs more investigation.\n", "arguments": [{"name": "angle", "type": "float"}], "name": "SPIN", "match": "SPIN", "type": "command", "syntaxstring": "SPIN (command) angle (float)", "uniquename": "c_SPIN", "evalcost": {"default": 1}, "implementation": "caosVM::c_SPIN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_SPIN": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Returns the angle (from 0.0 to 1.0) the target agent is facing.\n", "arguments": [], "name": "SPIN", "match": "SPIN", "type": "float", "syntaxstring": "SPIN (float)", "uniquename": "v_SPIN", "evalcost": {"default": 0}, "implementation": "caosVM::v_SPIN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_ANGL": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Calculates the angle (from 0.0 to 1.0) between the target agent and the specified coordinates.\nTODO: This seems not to work in original c2e unless there's been an angular calculation on the target agent. Needs more investigation.\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "ANGL", "match": "ANGL", "type": "float", "syntaxstring": "ANGL (float) x (float) y (float)", "uniquename": "v_ANGL", "evalcost": {"default": 0}, "implementation": "caosVM::v_ANGL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ROTN": {"filename": "caosVM_motion.cpp", "category": "motion", "description": "Enable automatic sprite adjustments for the current agent (by changing the BASE of part 0), based on the current rotation (SPIN).\n'sprites' specifies the number of sprites for each rotation.\n'rotations' specifies the number of different angles provided in the sprite file. They should begin facing north and continue clockwise.\nThe total number of sprites used will be sprites * rotations.\n", "arguments": [{"name": "sprites", "type": "integer"}, {"name": "rotations", "type": "integer"}], "name": "ROTN", "match": "ROTN", "type": "command", "syntaxstring": "ROTN (command) sprites (integer) rotations (integer)", "uniquename": "c_ROTN", "evalcost": {"default": 1}, "implementation": "caosVM::c_ROTN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_NET_PASS": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "nick_name", "type": "string"}, {"name": "password", "type": "string"}], "name": "NET: PASS", "match": "PASS", "type": "command", "syntaxstring": "NET: PASS (command) nick_name (string) password (string)", "uniquename": "c_NET_PASS", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_PASS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_NET_PASS": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so always returns \"nobody\".\n", "arguments": [], "name": "NET: PASS", "match": "PASS", "type": "string", "syntaxstring": "NET: PASS (string)", "uniquename": "v_NET_PASS", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_PASS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_NET_LINE": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "connect", "type": "integer"}], "name": "NET: LINE", "match": "LINE", "type": "command", "syntaxstring": "NET: LINE (command) connect (integer)", "uniquename": "c_NET_LINE", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_LINE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_NET_LINE": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so always returns 1.\n", "arguments": [], "name": "NET: LINE", "match": "LINE", "type": "integer", "syntaxstring": "NET: LINE (integer)", "uniquename": "v_NET_LINE", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_LINE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NET_ERRA": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so always returns 0.\n", "arguments": [], "name": "NET: ERRA", "match": "ERRA", "type": "integer", "syntaxstring": "NET: ERRA (integer)", "uniquename": "v_NET_ERRA", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_ERRA", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NET_ULIN": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so always returns 0.\n", "arguments": [{"name": "username", "type": "string"}], "name": "NET: ULIN", "match": "ULIN", "type": "integer", "syntaxstring": "NET: ULIN (integer) username (string)", "uniquename": "v_NET_ULIN", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_ULIN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_WHOZ": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [], "name": "NET: WHOZ", "match": "WHOZ", "type": "command", "syntaxstring": "NET: WHOZ (command)", "uniquename": "c_NET_WHOZ", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_WHOZ", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_WHON": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "username", "type": "string"}], "name": "NET: WHON", "match": "WHON", "type": "command", "syntaxstring": "NET: WHON (command) username (string)", "uniquename": "c_NET_WHON", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_WHON", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_NET_USER": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so returns an empty string.\n", "arguments": [], "name": "NET: USER", "match": "USER", "type": "string", "syntaxstring": "NET: USER (string)", "uniquename": "v_NET_USER", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_USER", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NET_FROM": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so returns an empty string.\n", "arguments": [{"name": "resource_name", "type": "string"}], "name": "NET: FROM", "match": "FROM", "type": "string", "syntaxstring": "NET: FROM (string) resource_name (string)", "uniquename": "v_NET_FROM", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_FROM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_NET_EXPO": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so always returns 0.\n", "arguments": [{"name": "chunk_type", "type": "string"}, {"name": "dest_user", "type": "string"}], "name": "NET: EXPO", "match": "EXPO", "type": "integer", "syntaxstring": "NET: EXPO (integer) chunk_type (string) dest_user (string)", "uniquename": "v_NET_EXPO", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_EXPO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_NET_RUSO": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so sets result to an empty string.\n", "arguments": [{"name": "result", "type": "variable"}], "name": "NET: RUSO", "match": "RUSO", "type": "command", "syntaxstring": "NET: RUSO (command) result (variable)", "uniquename": "c_NET_RUSO", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_RUSO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_HEAD": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [], "name": "NET: HEAD", "match": "HEAD", "type": "command", "syntaxstring": "NET: HEAD (command)", "uniquename": "c_NET_HEAD", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_HEAD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_HEAR": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "channel", "type": "string"}], "name": "NET: HEAR", "match": "HEAR", "type": "command", "syntaxstring": "NET: HEAR (command) channel (string)", "uniquename": "c_NET_HEAR", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_HEAR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_NET_HOST": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so returns an empty string.\n", "arguments": [], "name": "NET: HOST", "match": "HOST", "type": "string", "syntaxstring": "NET: HOST (string)", "uniquename": "v_NET_HOST", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_HOST", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_NET_RAWE": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so returns zero.\n", "arguments": [], "name": "NET: RAWE", "match": "RAWE", "type": "integer", "syntaxstring": "NET: RAWE (integer)", "uniquename": "v_NET_RAWE", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_RAWE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_NET_STAT": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so sets everything to -1.\n", "arguments": [{"name": "timeonline", "type": "variable"}, {"name": "usersonline", "type": "variable"}, {"name": "bytesreceived", "type": "variable"}, {"name": "bytessent", "type": "variable"}], "name": "NET: STAT", "match": "STAT", "type": "command", "syntaxstring": "NET: STAT (command) timeonline (variable) usersonline (variable) bytesreceived (variable) bytessent (variable)", "uniquename": "c_NET_STAT", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_STAT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_UNIK": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so sets result to an empty string.\n", "arguments": [{"name": "userid", "type": "string"}, {"name": "result", "type": "variable"}], "name": "NET: UNIK", "match": "UNIK", "type": "command", "syntaxstring": "NET: UNIK (command) userid (string) result (variable)", "uniquename": "c_NET_UNIK", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_UNIK", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_NET_WHAT": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so return an empty string.\n", "arguments": [], "name": "NET: WHAT", "match": "WHAT", "type": "string", "syntaxstring": "NET: WHAT (string)", "uniquename": "v_NET_WHAT", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_WHAT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_NET_WHOD": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [], "name": "NET: WHOD", "match": "WHOD", "type": "command", "syntaxstring": "NET: WHOD (command)", "uniquename": "c_NET_WHOD", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_WHOD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NET_WHOF": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "user", "type": "string"}], "name": "NET: WHOF", "match": "WHOF", "type": "command", "syntaxstring": "NET: WHOF (command) user (string)", "uniquename": "c_NET_WHOF", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_WHOF", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_NET_WRIT": {"filename": "caosVM_net.cpp", "category": "networking", "description": "Networking is not supported in openc2e, so does nothing.\n", "arguments": [{"name": "userid", "type": "string"}, {"name": "channel", "type": "string"}, {"name": "messageid", "type": "string"}, {"name": "param1", "type": "anything"}, {"name": "param2", "type": "anything"}], "name": "NET: WRIT", "match": "WRIT", "type": "command", "syntaxstring": "NET: WRIT (command) userid (string) channel (string) messageid (string) param1 (anything) param2 (anything)", "uniquename": "c_NET_WRIT", "namespace": "net:", "evalcost": {"default": 1}, "implementation": "caosVM::c_NET_WRIT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "c_PRT_BANG": {"filename": "caosVM_ports.cpp", "category": "ports", "arguments": [{"name": "strength", "type": "integer"}], "name": "PRT: BANG", "match": "BANG", "type": "command", "syntaxstring": "PRT: BANG (command) strength (integer)", "uniquename": "c_PRT_BANG", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_BANG", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRT_FRMA": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Returns agent to which the specified input port is connected, NULL if not\nconnected or the port doesn't exist.\n", "arguments": [{"name": "inputport", "type": "integer"}], "name": "PRT: FRMA", "match": "FRMA", "type": "agent", "syntaxstring": "PRT: FRMA (agent) inputport (integer)", "uniquename": "v_PRT_FRMA", "namespace": "prt:", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRT_FRMA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PRT_FROM": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Returns the output port id on the source agent connected to the specified\ninput port. Returns a negative value if the port is not connected or if the\nsource agent does not exist.\n", "arguments": [{"name": "inputport", "type": "integer"}], "name": "PRT: FROM", "match": "FROM", "type": "integer", "syntaxstring": "PRT: FROM (integer) inputport (integer)", "uniquename": "v_PRT_FROM", "namespace": "prt:", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRT_FROM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PRT_INEW": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Creates a new input port on targ. The message msgnum will be sent to the agent\nwhen a signal arrives through the port. _P1_ of that message will be the data\nof the signal.\n", "arguments": [{"name": "id", "type": "integer"}, {"name": "name", "type": "string"}, {"name": "desc", "type": "string"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "msgnum", "type": "integer"}], "name": "PRT: INEW", "match": "INEW", "type": "command", "syntaxstring": "PRT: INEW (command) id (integer) name (string) desc (string) x (integer) y (integer) msgnum (integer)", "uniquename": "c_PRT_INEW", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_INEW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "v_PRT_ITOT": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Returns the total number of input ports.\n", "arguments": [], "name": "PRT: ITOT", "match": "ITOT", "type": "integer", "syntaxstring": "PRT: ITOT (integer)", "uniquename": "v_PRT_ITOT", "namespace": "prt:", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRT_ITOT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PRT_IZAP": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Removes the input port with given id.\n", "arguments": [{"name": "id", "type": "integer"}], "name": "PRT: IZAP", "match": "IZAP", "type": "command", "syntaxstring": "PRT: IZAP (command) id (integer)", "uniquename": "c_PRT_IZAP", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_IZAP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PRT_JOIN": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Joins the output port from source to the input port of dest.\n", "arguments": [{"name": "source", "type": "agent"}, {"name": "outputport", "type": "integer"}, {"name": "dest", "type": "agent"}, {"name": "inputport", "type": "integer"}], "name": "PRT: JOIN", "match": "JOIN", "type": "command", "syntaxstring": "PRT: JOIN (command) source (agent) outputport (integer) dest (agent) inputport (integer)", "uniquename": "c_PRT_JOIN", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_JOIN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_PRT_KRAK": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Breaks a connection on agent. If is_outport, kill all connections connected to\nthe port. Else, kill the connection to the inport.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "is_outport", "type": "integer"}, {"name": "port", "type": "integer"}], "name": "PRT: KRAK", "match": "KRAK", "type": "command", "syntaxstring": "PRT: KRAK (command) agent (agent) is_outport (integer) port (integer)", "uniquename": "c_PRT_KRAK", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_KRAK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_PRT_NAME": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Returns the name of the specified port. Returns \"\" if the port doesn't exist.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "is_outport", "type": "integer"}, {"name": "port", "type": "integer"}], "name": "PRT: NAME", "match": "NAME", "type": "string", "syntaxstring": "PRT: NAME (string) agent (agent) is_outport (integer) port (integer)", "uniquename": "v_PRT_NAME", "namespace": "prt:", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRT_NAME", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_PRT_ONEW": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Creates a new output port on targ.\n", "arguments": [{"name": "id", "type": "integer"}, {"name": "name", "type": "string"}, {"name": "desc", "type": "string"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "PRT: ONEW", "match": "ONEW", "type": "command", "syntaxstring": "PRT: ONEW (command) id (integer) name (string) desc (string) x (integer) y (integer)", "uniquename": "c_PRT_ONEW", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_ONEW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -5}, "v_PRT_OTOT": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Returns the total number of output ports.\n", "arguments": [], "name": "PRT: OTOT", "match": "OTOT", "type": "integer", "syntaxstring": "PRT: OTOT (integer)", "uniquename": "v_PRT_OTOT", "namespace": "prt:", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRT_OTOT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PRT_OZAP": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Destroys output port with given id.\n", "arguments": [{"name": "id", "type": "integer"}], "name": "PRT: OZAP", "match": "OZAP", "type": "command", "syntaxstring": "PRT: OZAP (command) id (integer)", "uniquename": "c_PRT_OZAP", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_OZAP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PRT_SEND": {"filename": "caosVM_ports.cpp", "category": "ports", "description": "Sends information over targ's output port.\n", "arguments": [{"name": "id", "type": "integer"}, {"name": "data", "type": "anything"}], "name": "PRT: SEND", "match": "SEND", "type": "command", "syntaxstring": "PRT: SEND (command) id (integer) data (anything)", "uniquename": "c_PRT_SEND", "namespace": "prt:", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRT_SEND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_AGTI": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "using the specified resource, returns the integer value associated with the given tag,\nor default if the tag doesn't exist\n", "arguments": [{"name": "resource", "type": "string"}, {"name": "tag", "type": "string"}, {"name": "default", "type": "integer"}], "name": "PRAY AGTI", "match": "AGTI", "type": "integer", "syntaxstring": "PRAY AGTI (integer) resource (string) tag (string) default (integer)", "uniquename": "v_PRAY_AGTI", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_AGTI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_AGTS": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "using the specified resource, returns the string value associated with the given tag,\nor default if the tag doesn't exist\n", "arguments": [{"name": "resource", "type": "string"}, {"name": "tag", "type": "string"}, {"name": "default", "type": "string"}], "name": "PRAY AGTS", "match": "AGTS", "type": "string", "syntaxstring": "PRAY AGTS (string) resource (string) tag (string) default (string)", "uniquename": "v_PRAY_AGTS", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_AGTS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_BACK": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "returns the name of the resource of the specified type which is immediately previous to last\nsee PRAY PREV if you want to loop around\n", "arguments": [{"name": "type", "type": "string"}, {"name": "last", "type": "string"}], "name": "PRAY BACK", "match": "BACK", "type": "string", "syntaxstring": "PRAY BACK (string) type (string) last (string)", "uniquename": "v_PRAY_BACK", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_BACK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRAY_COUN": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "return the number of resources of the specified type available\n", "arguments": [{"name": "type", "type": "string"}], "name": "PRAY COUN", "match": "COUN", "type": "integer", "syntaxstring": "PRAY COUN (integer) type (string)", "uniquename": "v_PRAY_COUN", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_COUN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PRAY_DEPS": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "name", "type": "string"}, {"name": "install", "type": "integer"}], "name": "PRAY DEPS", "match": "DEPS", "type": "integer", "syntaxstring": "PRAY DEPS (integer) name (string) install (integer)", "uniquename": "v_PRAY_DEPS", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_DEPS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRAY_EXPO": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "type", "type": "string"}], "name": "PRAY EXPO", "match": "EXPO", "type": "integer", "syntaxstring": "PRAY EXPO (integer) type (string)", "uniquename": "v_PRAY_EXPO", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_EXPO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PRAY_FILE": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "install a file with given resource name and type\nif install is 0, the install doesn't actually happen, it's just tested\nreturns 0 on success, 1 on failure\n", "arguments": [{"name": "name", "type": "integer"}, {"name": "type", "type": "integer"}, {"name": "install", "type": "integer"}], "name": "PRAY FILE", "match": "FILE", "type": "integer", "syntaxstring": "PRAY FILE (integer) name (integer) type (integer) install (integer)", "uniquename": "v_PRAY_FILE", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_FILE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_FORE": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "returns the name of the resource of the specified type which is immediately after last\nsee PRAY NEXT if you want to loop around\n", "arguments": [{"name": "type", "type": "string"}, {"name": "last", "type": "string"}], "name": "PRAY FORE", "match": "FORE", "type": "string", "syntaxstring": "PRAY FORE (string) type (string) last (string)", "uniquename": "v_PRAY_FORE", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_FORE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PRAY_GARB": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "if force is 0, make the pray manager garbage-collect resources\notherwise, make the pray manager empty its cache entirely\n\nrecommended to be called after intensive PRAY usage, eg agent installation\n", "arguments": [{"name": "force", "type": "integer"}], "name": "PRAY GARB", "match": "GARB", "type": "command", "syntaxstring": "PRAY GARB (command) force (integer)", "uniquename": "c_PRAY_GARB", "namespace": "pray", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRAY_GARB", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRAY_IMPO": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "moniker", "type": "string"}, {"name": "doit", "type": "integer"}, {"name": "keepfile", "type": "integer"}], "name": "PRAY IMPO", "match": "IMPO", "type": "integer", "syntaxstring": "PRAY IMPO (integer) moniker (string) doit (integer) keepfile (integer)", "uniquename": "v_PRAY_IMPO", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_IMPO", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_INJT": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "name", "type": "string"}, {"name": "install", "type": "integer"}, {"name": "report", "type": "variable"}], "name": "PRAY INJT", "match": "INJT", "type": "integer", "syntaxstring": "PRAY INJT (integer) name (string) install (integer) report (variable)", "uniquename": "v_PRAY_INJT", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_INJT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRAY_KILL": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "deletes from disk the file containing the given resource\n\nreturns 1 upon success, or 0 upon failure (typically no such resource)\n", "arguments": [{"name": "resource", "type": "string"}], "name": "PRAY KILL", "match": "KILL", "type": "integer", "syntaxstring": "PRAY KILL (integer) resource (string)", "uniquename": "v_PRAY_KILL", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_KILL", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PRAY_MAKE": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "journalspot", "type": "integer"}, {"name": "journalname", "type": "string"}, {"name": "prayspot", "type": "integer"}, {"name": "name", "type": "string"}, {"name": "report", "type": "variable"}], "name": "PRAY MAKE", "match": "MAKE", "type": "integer", "syntaxstring": "PRAY MAKE (integer) journalspot (integer) journalname (string) prayspot (integer) name (string) report (variable)", "uniquename": "v_PRAY_MAKE", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_MAKE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_NET_MAKE": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "Networking is not supported in openc2e, so conveniently fails.\n", "arguments": [{"name": "journalspot", "type": "integer"}, {"name": "journalname", "type": "integer"}, {"name": "user", "type": "string"}, {"name": "report", "type": "variable"}], "name": "NET: MAKE", "match": "MAKE", "type": "integer", "syntaxstring": "NET: MAKE (integer) journalspot (integer) journalname (integer) user (string) report (variable)", "uniquename": "v_NET_MAKE", "namespace": "net:", "evalcost": {"default": 0}, "implementation": "caosVM::v_NET_MAKE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_PRAY_NEXT": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "returns the name of the resource of the specified type which is immediately after last\nsee PRAY FORE if you don't want to loop around\n", "arguments": [{"name": "type", "type": "string"}, {"name": "last", "type": "string"}], "name": "PRAY NEXT", "match": "NEXT", "type": "string", "syntaxstring": "PRAY NEXT (string) type (string) last (string)", "uniquename": "v_PRAY_NEXT", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_NEXT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PRAY_PREV": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "returns the name of the resource of the specified type which is immediately previous to last\nsee PRAY BACK if you don't want to loop around\n", "arguments": [{"name": "type", "type": "string"}, {"name": "last", "type": "string"}], "name": "PRAY PREV", "match": "PREV", "type": "string", "syntaxstring": "PRAY PREV (string) type (string) last (string)", "uniquename": "v_PRAY_PREV", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_PREV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_PRAY_REFR": {"filename": "caosVM_resources.cpp", "category": "resources", "description": "make the pray manager check for deleted/new files in the resource directory\n", "arguments": [], "name": "PRAY REFR", "match": "REFR", "type": "command", "syntaxstring": "PRAY REFR (command)", "uniquename": "c_PRAY_REFR", "namespace": "pray", "evalcost": {"default": 1}, "implementation": "caosVM::c_PRAY_REFR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PRAY_TEST": {"filename": "caosVM_resources.cpp", "category": "resources", "arguments": [{"name": "name", "type": "string"}], "name": "PRAY TEST", "match": "TEST", "type": "integer", "syntaxstring": "PRAY TEST (integer) name (string)", "uniquename": "v_PRAY_TEST", "namespace": "pray", "evalcost": {"default": 0}, "implementation": "caosVM::v_PRAY_TEST", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_INST": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Forces the following commands to be executed in one tick, rather than scheduling them, until SLOW or the end\nof the script is encountered.\n", "arguments": [], "name": "INST", "match": "INST", "type": "command", "syntaxstring": "INST (command)", "uniquename": "c_INST", "evalcost": {"default": 1}, "implementation": "caosVM::c_INST", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_SLOW": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Reverses the effects of INST.\n", "arguments": [], "name": "SLOW", "match": "SLOW", "type": "command", "syntaxstring": "SLOW (command)", "uniquename": "c_SLOW", "evalcost": {"default": 1}, "implementation": "caosVM::c_SLOW", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_LOCK": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Prevent the script from being interrupted by another until UNLK or the end of the script is encountered.\n", "arguments": [], "name": "LOCK", "match": "LOCK", "type": "command", "syntaxstring": "LOCK (command)", "uniquename": "c_LOCK", "evalcost": {"default": 1}, "implementation": "caosVM::c_LOCK", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_UNLK": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Reverses the effects of LOCK.\n", "arguments": [], "name": "UNLK", "match": "UNLK", "type": "command", "syntaxstring": "UNLK (command)", "uniquename": "c_UNLK", "evalcost": {"default": 1}, "implementation": "caosVM::c_UNLK", "pragma": {"variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_WAIT": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Stops the script from running for the given number of ticks.\n", "arguments": [{"name": "ticks", "type": "integer"}], "name": "WAIT", "match": "WAIT", "type": "command", "syntaxstring": "WAIT (command) ticks (integer)", "uniquename": "c_WAIT", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_WAIT", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_STOP": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Aborts the script.\n", "arguments": [], "name": "STOP", "match": "STOP", "type": "command", "syntaxstring": "STOP (command)", "uniquename": "c_STOP", "evalcost": {"default": 1}, "implementation": "caosVM::c_STOP", "pragma": {"stackdelta": "any", "variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": "INT_MAX"}, "c_SCRX": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Deletes the event script in question from the scriptoruium.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "SCRX", "match": "SCRX", "type": "command", "syntaxstring": "SCRX (command) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "c_SCRX", "evalcost": {"default": 1}, "implementation": "caosVM::c_SCRX", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_CODE": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Returns script number running in the TARG agent. Returns -1 if target is not\nrunning anything (or if it's running something that's not an event script).\n", "arguments": [], "name": "CODE", "match": "CODE", "type": "integer", "syntaxstring": "CODE (integer)", "uniquename": "v_CODE", "evalcost": {"default": 0}, "implementation": "caosVM::v_CODE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CODF": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Returns script family running in the TARG agent. Returns -1 if target is not\nrunning anything (or if it's running something that's not an event script).\n", "arguments": [], "name": "CODF", "match": "CODF", "type": "integer", "syntaxstring": "CODF (integer)", "uniquename": "v_CODF", "evalcost": {"default": 0}, "implementation": "caosVM::v_CODF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CODG": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Returns script genus running in the target. Returns -1 if target is not\nrunning anything (or if it's running something that's not an event script).\n", "arguments": [], "name": "CODG", "match": "CODG", "type": "integer", "syntaxstring": "CODG (integer)", "uniquename": "v_CODG", "evalcost": {"default": 0}, "implementation": "caosVM::v_CODG", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CODS": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Returns script species running in the target. Returns -1 if target is not\nrunning anything (or if it's running something that's not an event script).\n", "arguments": [], "name": "CODS", "match": "CODS", "type": "integer", "syntaxstring": "CODS (integer)", "uniquename": "v_CODS", "evalcost": {"default": 0}, "implementation": "caosVM::v_CODS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_JECT": {"filename": "caosVM_scripts.cpp", "category": "scripts", "description": "Inject a script from the current bootstrap. 'file' must be the full filename.\nFlags can be 1 for remove script, 2 for event scripts and 4 for install script.\n", "arguments": [{"name": "file", "type": "string"}, {"name": "flags", "type": "integer"}], "name": "JECT", "match": "JECT", "type": "command", "syntaxstring": "JECT (command) file (string) flags (integer)", "uniquename": "c_JECT", "evalcost": {"default": 1}, "implementation": "caosVM::c_JECT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_SORQ": {"filename": "caosVM_scripts.cpp", "category": "scripts", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "event", "type": "integer"}], "name": "SORQ", "match": "SORQ", "type": "integer", "syntaxstring": "SORQ (integer) family (integer) genus (integer) species (integer) event (integer)", "uniquename": "v_SORQ", "evalcost": {"default": 0}, "implementation": "caosVM::v_SORQ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_SERS_MAPP": {"filename": "caosVM_ser_stub.cpp", "category": "unknown", "description": "Saves the map to the specified file.\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SERS MAPP", "match": "MAPP", "type": "command", "syntaxstring": "SERS MAPP (command) filename (string)", "uniquename": "c_SERS_MAPP", "namespace": "sers", "evalcost": {"default": 1}, "implementation": "caosVM::c_SERS_MAPP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SERL_MAPP": {"filename": "caosVM_ser_stub.cpp", "category": "unknown", "description": "Loads the map from the specified file\n\nMay explode if anything at all exists.\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SERL MAPP", "match": "MAPP", "type": "command", "syntaxstring": "SERL MAPP (command) filename (string)", "uniquename": "c_SERL_MAPP", "namespace": "serl", "evalcost": {"default": 1}, "implementation": "caosVM::c_SERL_MAPP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SERS_SCRP": {"filename": "caosVM_ser_stub.cpp", "category": "unknown", "description": "Saves the scriptorium to the specified file\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SERS SCRP", "match": "SCRP", "type": "command", "syntaxstring": "SERS SCRP (command) filename (string)", "uniquename": "c_SERS_SCRP", "namespace": "sers", "evalcost": {"default": 1}, "implementation": "caosVM::c_SERS_SCRP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SERL_SCRP": {"filename": "caosVM_ser_stub.cpp", "category": "unknown", "description": "Loads the scriptorium from the specified file\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SERL SCRP", "match": "SCRP", "type": "command", "syntaxstring": "SERL SCRP (command) filename (string)", "uniquename": "c_SERL_SCRP", "namespace": "serl", "evalcost": {"default": 1}, "implementation": "caosVM::c_SERL_SCRP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SNDE": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Play an uncontrolled sound at the target agent's current position.\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SNDE", "match": "SNDE", "type": "command", "syntaxstring": "SNDE (command) filename (string)", "uniquename": "c_SNDE", "evalcost": {"default": 1}, "implementation": "caosVM::c_SNDE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SNDC": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Start playing a controlled sound with the target agent, which will follow the agent as it moves.\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SNDC", "match": "SNDC", "type": "command", "syntaxstring": "SNDC (command) filename (string)", "uniquename": "c_SNDC", "evalcost": {"default": 1}, "implementation": "caosVM::c_SNDC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SNDL": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Start playing a looping controlled sound with the target agent, which will follow the agent as it moves.\n", "arguments": [{"name": "filename", "type": "string"}], "name": "SNDL", "match": "SNDL", "type": "command", "syntaxstring": "SNDL (command) filename (string)", "uniquename": "c_SNDL", "evalcost": {"default": 1}, "implementation": "caosVM::c_SNDL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_MMSC": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Set the music track to be played in the metaroom containing the given coordinates.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "track_name", "type": "string"}], "name": "MMSC", "match": "MMSC", "type": "command", "syntaxstring": "MMSC (command) x (integer) y (integer) track_name (string)", "uniquename": "c_MMSC", "evalcost": {"default": 1}, "implementation": "caosVM::c_MMSC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_MMSC": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Returns the music track to be played in the metaroom containing the given coordinates.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "MMSC", "match": "MMSC", "type": "string", "syntaxstring": "MMSC (string) x (integer) y (integer)", "uniquename": "v_MMSC", "evalcost": {"default": 0}, "implementation": "caosVM::v_MMSC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_RMSC": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Set the music track to be played in the room containing the given coordinates.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "track_name", "type": "string"}], "name": "RMSC", "match": "RMSC", "type": "command", "syntaxstring": "RMSC (command) x (integer) y (integer) track_name (string)", "uniquename": "c_RMSC", "evalcost": {"default": 1}, "implementation": "caosVM::c_RMSC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "v_RMSC": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Returns the music track to be played in the room containing the given coordinates.\n", "arguments": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "name": "RMSC", "match": "RMSC", "type": "string", "syntaxstring": "RMSC (string) x (integer) y (integer)", "uniquename": "v_RMSC", "evalcost": {"default": 0}, "implementation": "caosVM::v_RMSC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_FADE": {"filename": "caosVM_sounds.cpp", "category": "sound", "arguments": [], "name": "FADE", "match": "FADE", "type": "command", "syntaxstring": "FADE (command)", "uniquename": "c_FADE", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_FADE", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_STPC": {"filename": "caosVM_sounds.cpp", "category": "sound", "arguments": [], "name": "STPC", "match": "STPC", "type": "command", "syntaxstring": "STPC (command)", "uniquename": "c_STPC", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_STPC", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_STRK": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Play the specified music track. It will play for at least latency seconds.\n", "arguments": [{"name": "latency", "type": "integer"}, {"name": "track", "type": "string"}], "name": "STRK", "match": "STRK", "type": "command", "syntaxstring": "STRK (command) latency (integer) track (string)", "uniquename": "c_STRK", "evalcost": {"default": 1}, "implementation": "caosVM::c_STRK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_VOLM": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Changes the volume of the specified type of audio; 0 for sound effects, 1 for midi or 2 for dynamic music.\nVolume is from -10000 (silent) to 0 (maximum).\n", "arguments": [{"name": "type", "type": "integer"}, {"name": "volume", "type": "integer"}], "name": "VOLM", "match": "VOLM", "type": "command", "syntaxstring": "VOLM (command) type (integer) volume (integer)", "uniquename": "c_VOLM", "evalcost": {"default": 1}, "implementation": "caosVM::c_VOLM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_VOLM": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Return the volumne of the specified type of audio; 0 for sound effects, 1 for midi or 2 for dynamic music.\nVolume is from -10000 (silent) to 0 (maximum).\n", "arguments": [{"name": "type", "type": "integer"}], "name": "VOLM", "match": "VOLM", "type": "integer", "syntaxstring": "VOLM (integer) type (integer)", "uniquename": "v_VOLM", "evalcost": {"default": 0}, "implementation": "caosVM::v_VOLM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MUTE": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "This returns/sets information about which types of in-game audio are muted.\nSet andmask for the information you want returned, and eormask for the information you want changed.\n1 is for normal sound, and 2 is for music (so 3 is for both combined).\n", "arguments": [{"name": "andmask", "type": "integer"}, {"name": "eormask", "type": "integer"}], "name": "MUTE", "match": "MUTE", "type": "integer", "syntaxstring": "MUTE (integer) andmask (integer) eormask (integer)", "uniquename": "v_MUTE", "evalcost": {"default": 0}, "implementation": "caosVM::v_MUTE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SEZZ": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Tells the target agent to speak the specified text.\n", "arguments": [{"name": "text", "type": "string"}], "name": "SEZZ", "match": "SEZZ", "type": "command", "syntaxstring": "SEZZ (command) text (string)", "uniquename": "c_SEZZ", "evalcost": {"default": 1}, "implementation": "caosVM::c_SEZZ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_VOIS": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Set the voice of the target agent to the specified voice (a catalogue tag).\n", "arguments": [{"name": "voice", "type": "string"}], "name": "VOIS", "match": "VOIS", "type": "command", "syntaxstring": "VOIS (command) voice (string)", "uniquename": "c_VOIS", "evalcost": {"default": 1}, "implementation": "caosVM::c_VOIS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_MIDI": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Plays the MIDI file specified, or stops playing if passed an empty string.\n", "arguments": [{"name": "midifile", "type": "string"}], "name": "MIDI", "match": "MIDI", "type": "command", "syntaxstring": "MIDI (command) midifile (string)", "uniquename": "c_MIDI", "evalcost": {"default": 1}, "implementation": "caosVM::c_MIDI", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_DBG_SINE": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Plays a sine wave coming from TARG\n\ntrack = 0 to fix the source at TARG's current location; track = 1 to follow\nview, track = 2 to inject it into the BGM source\n", "arguments": [{"name": "rate", "type": "integer"}, {"name": "stereo", "type": "integer"}, {"name": "track", "type": "integer"}, {"name": "amplitude", "type": "integer"}], "name": "DBG: SINE", "match": "SINE", "type": "command", "syntaxstring": "DBG: SINE (command) rate (integer) stereo (integer) track (integer) amplitude (integer)", "uniquename": "c_DBG_SINE", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_SINE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_DBG_SBGM": {"filename": "caosVM_sounds.cpp", "category": "sound", "description": "Stops the BGM source. This probably doesn't do what you want it to do.\nDon't touch.\n", "arguments": [], "name": "DBG: SBGM", "match": "SBGM", "type": "command", "syntaxstring": "DBG: SBGM (command)", "uniquename": "c_DBG_SBGM", "namespace": "dbg:", "evalcost": {"default": 1}, "implementation": "caosVM::c_DBG_SBGM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_PACE": {"filename": "caosVM_time.cpp", "category": "time", "description": "return speed factor of last ten ticks.\n\n< 1.0 = engine is ticking faster than BUZZ rating. > 1.0 = engine is ticking slower.\n\nYou might want to use this to reduce the amount of agents created or the amount of processing done if the speed factor is above 1.0.\n", "arguments": [], "name": "PACE", "match": "PACE", "type": "float", "syntaxstring": "PACE (float)", "uniquename": "v_PACE", "evalcost": {"default": 0}, "implementation": "caosVM::v_PACE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_BUZZ": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [{"name": "interval", "type": "integer"}], "name": "BUZZ", "match": "BUZZ", "type": "command", "syntaxstring": "BUZZ (command) interval (integer)", "uniquename": "c_BUZZ", "evalcost": {"default": 1}, "implementation": "caosVM::c_BUZZ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_BUZZ": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "BUZZ", "match": "BUZZ", "type": "integer", "syntaxstring": "BUZZ (integer)", "uniquename": "v_BUZZ", "evalcost": {"default": 0}, "implementation": "caosVM::v_BUZZ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DATE": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the day in the season of the current game world, starting at 0.\n", "arguments": [], "name": "DATE", "match": "DATE", "type": "integer", "syntaxstring": "DATE (integer)", "uniquename": "v_DATE", "evalcost": {"default": 0}, "implementation": "caosVM::v_DATE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HIST_DATE": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the day in the season of the current game world at the specified world tick, starting at 0. See DATE.\n", "arguments": [{"name": "tick", "type": "integer"}], "name": "HIST DATE", "match": "DATE", "type": "integer", "syntaxstring": "HIST DATE (integer) tick (integer)", "uniquename": "v_HIST_DATE", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_DATE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_SEAN": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the current game world season at the specified world tick. 0 is spring, 1 is summer, 2 is autumn and 3 is winter. See SEAN.\n", "arguments": [{"name": "tick", "type": "integer"}], "name": "HIST SEAN", "match": "SEAN", "type": "integer", "syntaxstring": "HIST SEAN (integer) tick (integer)", "uniquename": "v_HIST_SEAN", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_SEAN", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_TIME": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the time of day in the current game world. 0 is dawn, 1 is morning, 2 is afternoon, 3 is evening and 4 is night.\n", "arguments": [], "name": "TIME", "match": "TIME", "type": "integer", "syntaxstring": "TIME (integer)", "uniquename": "v_TIME", "evalcost": {"default": 0}, "implementation": "caosVM::v_TIME", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_HIST_TIME": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the time of day in the current game world at the specified world tick. 0 is dawn, 1 is morning, 2 is afternoon, 3 is evening and 4 is night. See TIME.\n", "arguments": [{"name": "tick", "type": "integer"}], "name": "HIST TIME", "match": "TIME", "type": "integer", "syntaxstring": "HIST TIME (integer) tick (integer)", "uniquename": "v_HIST_TIME", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_TIME", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_HIST_YEAR": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the number of game years elapsed at the specified world tick. See YEAR.\n", "arguments": [{"name": "tick", "type": "integer"}], "name": "HIST YEAR", "match": "YEAR", "type": "integer", "syntaxstring": "HIST YEAR (integer) tick (integer)", "uniquename": "v_HIST_YEAR", "namespace": "hist", "evalcost": {"default": 0}, "implementation": "caosVM::v_HIST_YEAR", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_MSEC": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "MSEC", "match": "MSEC", "type": "integer", "syntaxstring": "MSEC (integer)", "uniquename": "v_MSEC", "evalcost": {"default": 0}, "implementation": "caosVM::v_MSEC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_WPAU": {"filename": "caosVM_time.cpp", "category": "time", "description": "If paused is 0, enable world ticks, otherwise (1) disable them.\n", "arguments": [{"name": "paused", "type": "integer"}], "name": "WPAU", "match": "WPAU", "type": "command", "syntaxstring": "WPAU (command) paused (integer)", "uniquename": "c_WPAU", "evalcost": {"default": 1}, "implementation": "caosVM::c_WPAU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_WPAU": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns 1 if world ticks are paused, or 0 otherwise.\n", "arguments": [], "name": "WPAU", "match": "WPAU", "type": "integer", "syntaxstring": "WPAU (integer)", "uniquename": "v_WPAU", "evalcost": {"default": 0}, "implementation": "caosVM::v_WPAU", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_PAUS": {"filename": "caosVM_time.cpp", "category": "time", "description": "If paused is 0, unpause target agent, otherwise (1) pause it.\n", "arguments": [{"name": "paused", "type": "integer"}], "name": "PAUS", "match": "PAUS", "type": "command", "syntaxstring": "PAUS (command) paused (integer)", "uniquename": "c_PAUS", "evalcost": {"default": 1}, "implementation": "caosVM::c_PAUS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PAUS": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns 1 if target agent is paused, or 0 otherwise.\n", "arguments": [], "name": "PAUS", "match": "PAUS", "type": "integer", "syntaxstring": "PAUS (integer)", "uniquename": "v_PAUS", "evalcost": {"default": 0}, "implementation": "caosVM::v_PAUS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_RTIF": {"filename": "caosVM_time.cpp", "category": "time", "description": "Returns the result of strftime with the current timestamp and format.\n", "arguments": [{"name": "timestamp", "type": "integer"}, {"name": "format", "type": "string"}], "name": "RTIF", "match": "RTIF", "type": "string", "syntaxstring": "RTIF (string) timestamp (integer) format (string)", "uniquename": "v_RTIF", "evalcost": {"default": 0}, "implementation": "caosVM::v_RTIF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_RTIM": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "RTIM", "match": "RTIM", "type": "integer", "syntaxstring": "RTIM (integer)", "uniquename": "v_RTIM", "evalcost": {"default": 0}, "implementation": "caosVM::v_RTIM", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WTIK": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "WTIK", "match": "WTIK", "type": "integer", "syntaxstring": "WTIK (integer)", "uniquename": "v_WTIK", "evalcost": {"default": 0}, "implementation": "caosVM::v_WTIK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_RACE": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "RACE", "match": "RACE", "type": "integer", "syntaxstring": "RACE (integer)", "uniquename": "v_RACE", "evalcost": {"default": 0}, "implementation": "caosVM::v_RACE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_ETIK": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "ETIK", "match": "ETIK", "type": "integer", "syntaxstring": "ETIK (integer)", "uniquename": "v_ETIK", "evalcost": {"default": 0}, "implementation": "caosVM::v_ETIK", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_DAYT": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "DAYT", "match": "DAYT", "type": "integer", "syntaxstring": "DAYT (integer)", "uniquename": "v_DAYT", "evalcost": {"default": 0}, "implementation": "caosVM::v_DAYT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MONT": {"filename": "caosVM_time.cpp", "category": "time", "arguments": [], "name": "MONT", "match": "MONT", "type": "integer", "syntaxstring": "MONT (integer)", "uniquename": "v_MONT", "evalcost": {"default": 0}, "implementation": "caosVM::v_MONT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_VAxx": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Script-local variables (exist only in the current script) with xx being from 00 to 99.  Examples: VA01, VA45.\n", "arguments": [], "name": "VAxx", "match": "VAxx", "type": "variable", "syntaxstring": "VAxx (variable)", "uniquename": "v_VAxx", "evalcost": {"default": 0}, "implementation": "caosVM::v_VAxx", "pragma": {"stackdelta": "0", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_VAxx", "stackdelta": 0}, "v_MVxx": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Like OVxx, only for OWNR, not TARG.\n", "arguments": [], "name": "MVxx", "match": "MVxx", "type": "variable", "syntaxstring": "MVxx (variable)", "uniquename": "v_MVxx", "evalcost": {"default": 0}, "implementation": "caosVM::v_MVxx", "pragma": {"stackdelta": "0"}, "status": "maybe", "saveimpl": "caosVM::s_MVxx", "stackdelta": 0}, "c_ADDS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Append the given string to the given variable.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "value", "type": "string"}], "name": "ADDS", "match": "ADDS", "type": "command", "syntaxstring": "ADDS (command) var (variable) value (string)", "uniquename": "c_ADDS", "evalcost": {"default": 1}, "implementation": "caosVM::c_ADDS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SETS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Sets the given variable to the given string.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "value", "type": "string"}], "name": "SETS", "match": "SETS", "type": "command", "syntaxstring": "SETS (command) var (variable) value (string)", "uniquename": "c_SETS", "evalcost": {"default": 1}, "implementation": "caosVM::c_SETS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SETV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "%% Don't enable c1 or c2 here; we activate them with horrible hacks later\n\nSets the given variable to the given decimal value.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "value", "type": "decimal"}], "name": "SETV", "match": "SETV", "type": "command", "syntaxstring": "SETV (command) var (variable) value (decimal)", "uniquename": "c_SETV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SETV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SETA": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Sets the given variable to the given agent.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "value", "type": "agent"}], "name": "SETA", "match": "SETA", "type": "command", "syntaxstring": "SETA (command) var (variable) value (agent)", "uniquename": "c_SETA", "evalcost": {"default": 1}, "implementation": "caosVM::c_SETA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_OVxx": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Agent-local variables (exist only in the current agent's VM) from TARG, with xx being from 00 to 99.  Examples: OV01, OV45.\n", "arguments": [], "name": "OVxx", "match": "OVxx", "type": "variable", "syntaxstring": "OVxx (variable)", "uniquename": "v_OVxx", "evalcost": {"default": 0}, "implementation": "caosVM::v_OVxx", "pragma": {"stackdelta": "0", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_OVxx", "stackdelta": 0}, "v_TYPE": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns a integer value representing the type of data in 'value'.  0 is integer, 1 is float, 2 is string, 3 is agent.\n", "arguments": [{"name": "value", "type": "anything"}], "name": "TYPE", "match": "TYPE", "type": "integer", "syntaxstring": "TYPE (integer) value (anything)", "uniquename": "v_TYPE", "evalcost": {"default": 0}, "implementation": "caosVM::v_TYPE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_MODV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Divides the given variable by the given integer, and returns the remainder (var % mod).\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "mod", "type": "integer"}], "name": "MODV", "match": "MODV", "type": "command", "syntaxstring": "MODV (command) var (variable) mod (integer)", "uniquename": "c_MODV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MODV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ANDV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the result of a bitwise AND comparison of the given variable and the given integer (var & and).\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "and", "type": "integer"}], "name": "ANDV", "match": "ANDV", "type": "command", "syntaxstring": "ANDV (command) var (variable) and (integer)", "uniquename": "c_ANDV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ANDV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ORRV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the result of a bitwise OR comparison of the given variable and the given integer (var | or)\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "or", "type": "integer"}], "name": "ORRV", "match": "ORRV", "type": "command", "syntaxstring": "ORRV (command) var (variable) or (integer)", "uniquename": "c_ORRV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ORRV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_ADDV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Adds the given integer to the given variable and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "add", "type": "integer"}], "name": "ADDV", "match": "ADDV", "type": "command", "syntaxstring": "ADDV (command) var (variable) add (integer)", "uniquename": "c_ADDV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_ADDV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SUBV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Subtracts the given integer from the given variable and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "sub", "type": "integer"}], "name": "SUBV", "match": "SUBV", "type": "command", "syntaxstring": "SUBV (command) var (variable) sub (integer)", "uniquename": "c_SUBV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_SUBV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_NEGV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the inverse of (negates) the given variable.  For example, 1 to -1, or -4 to 4.\n", "arguments": [{"name": "var", "type": "variable"}], "name": "NEGV", "match": "NEGV", "type": "command", "syntaxstring": "NEGV (command) var (variable)", "uniquename": "c_NEGV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_NEGV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DIVV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Divides the given variable by the given integer and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "div", "type": "decimal"}], "name": "DIVV", "match": "DIVV", "type": "command", "syntaxstring": "DIVV (command) var (variable) div (decimal)", "uniquename": "c_DIVV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_DIVV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_MULV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Multiplies the given variable by the given integer and returns the result.\n", "arguments": [{"name": "var", "type": "variable"}, {"name": "mul", "type": "decimal"}], "name": "MULV", "match": "MULV", "type": "command", "syntaxstring": "MULV (command) var (variable) mul (decimal)", "uniquename": "c_MULV", "evalcost": {"default": 1, "c1": 0, "c2": 0}, "implementation": "caosVM::c_MULV", "pragma": {"variants": "c1 c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_RAND": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns a random integer between 'value1' and 'value2', inclusive.\n", "arguments": [{"name": "value1", "type": "integer"}, {"name": "value2", "type": "integer"}], "name": "RAND", "match": "RAND", "type": "integer", "syntaxstring": "RAND (integer) value1 (integer) value2 (integer)", "uniquename": "v_RAND", "evalcost": {"default": 0}, "implementation": "caosVM::v_RAND", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_REAF": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Re-reads all catalogue files.\n", "arguments": [], "name": "REAF", "match": "REAF", "type": "command", "syntaxstring": "REAF (command)", "uniquename": "c_REAF", "evalcost": {"default": 1}, "implementation": "caosVM::c_REAF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_UFOS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns 'uname -a' on platforms which support it, or OS details in another format otherwise.\n", "arguments": [], "name": "UFOS", "match": "UFOS", "type": "string", "syntaxstring": "UFOS (string)", "uniquename": "v_UFOS", "evalcost": {"default": 0}, "implementation": "caosVM::v_UFOS", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_MODU": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns information about which modules are being used by the engine (for now, backend and audio backend names).\n", "arguments": [], "name": "MODU", "match": "MODU", "type": "string", "syntaxstring": "MODU (string)", "uniquename": "v_MODU", "evalcost": {"default": 0}, "implementation": "caosVM::v_MODU", "pragma": {"variants": "all"}, "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_GNAM": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the currently-running game (like \"Creatures 1\" or \"Docking Station\").\n", "arguments": [], "name": "GNAM", "match": "GNAM", "type": "string", "syntaxstring": "GNAM (string)", "uniquename": "v_GNAM", "evalcost": {"default": 0}, "implementation": "caosVM::v_GNAM", "pragma": {"variants": "all"}, "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_ABSV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Modifies the given variable, if negative, so that its value is positive (absolute value).\n", "arguments": [{"name": "var", "type": "variable"}], "name": "ABSV", "match": "ABSV", "type": "command", "syntaxstring": "ABSV (command) var (variable)", "uniquename": "c_ABSV", "evalcost": {"default": 1}, "implementation": "caosVM::c_ABSV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ACOS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the arccosine of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "ACOS", "match": "ACOS", "type": "float", "syntaxstring": "ACOS (float) x (float)", "uniquename": "v_ACOS", "evalcost": {"default": 0}, "implementation": "caosVM::v_ACOS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ASIN": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the arcsine of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "ASIN", "match": "ASIN", "type": "float", "syntaxstring": "ASIN (float) x (float)", "uniquename": "v_ASIN", "evalcost": {"default": 0}, "implementation": "caosVM::v_ASIN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_ATAN": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the arctangent of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "ATAN", "match": "ATAN", "type": "float", "syntaxstring": "ATAN (float) x (float)", "uniquename": "v_ATAN", "evalcost": {"default": 0}, "implementation": "caosVM::v_ATAN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_COS_": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the cosine of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "COS_", "match": "COS_", "type": "float", "syntaxstring": "COS_ (float) x (float)", "uniquename": "v_COS_", "evalcost": {"default": 0}, "implementation": "caosVM::v_COS_", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_SIN_": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the sine of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "SIN_", "match": "SIN_", "type": "float", "syntaxstring": "SIN_ (float) x (float)", "uniquename": "v_SIN_", "evalcost": {"default": 0}, "implementation": "caosVM::v_SIN_", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_TAN_": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the tangent of x in degrees.\n", "arguments": [{"name": "x", "type": "float"}], "name": "TAN_", "match": "TAN_", "type": "float", "syntaxstring": "TAN_ (float) x (float)", "uniquename": "v_TAN_", "evalcost": {"default": 0}, "implementation": "caosVM::v_TAN_", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_SQRT": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the square root of v.\n", "arguments": [{"name": "v", "type": "float"}], "name": "SQRT", "match": "SQRT", "type": "float", "syntaxstring": "SQRT (float) v (float)", "uniquename": "v_SQRT", "evalcost": {"default": 0}, "implementation": "caosVM::v_SQRT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v__P1_": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "The first argument given to the current script.\n", "arguments": [], "name": "_P1_", "match": "_P1_", "type": "variable", "syntaxstring": "_P1_ (variable)", "uniquename": "v__P1_", "evalcost": {"default": 0}, "implementation": "caosVM::v_P1", "pragma": {"implementation": "caosVM::v_P1", "saveimpl": "caosVM::s_P1", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_P1", "stackdelta": 1}, "v__P2_": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "The second argument given to the current script.\n", "arguments": [], "name": "_P2_", "match": "_P2_", "type": "variable", "syntaxstring": "_P2_ (variable)", "uniquename": "v__P2_", "evalcost": {"default": 0}, "implementation": "caosVM::v_P2", "pragma": {"implementation": "caosVM::v_P2", "saveimpl": "caosVM::s_P2", "variants": "c2 cv c3 sm"}, "status": "maybe", "saveimpl": "caosVM::s_P2", "stackdelta": 1}, "v_AVAR": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the value of OVxx for the given agent, where xx is equal to 'index'.\n", "arguments": [{"name": "agent", "type": "agent"}, {"name": "index", "type": "integer"}], "name": "AVAR", "match": "AVAR", "type": "variable", "syntaxstring": "AVAR (variable) agent (agent) index (integer)", "uniquename": "v_AVAR", "evalcost": {"default": 0}, "implementation": "caosVM::v_AVAR", "status": "maybe", "saveimpl": "caosVM::s_AVAR", "stackdelta": -1}, "v_VTOS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns a string representation of the given value.\n", "arguments": [{"name": "value", "type": "decimal"}], "name": "VTOS", "match": "VTOS", "type": "string", "syntaxstring": "VTOS (string) value (decimal)", "uniquename": "v_VTOS", "evalcost": {"default": 0}, "implementation": "caosVM::v_VTOS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_CHAR": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the character at position 'index' of the given string.\nIndexes start at 1.\n", "arguments": [{"name": "str", "type": "string"}, {"name": "index", "type": "integer"}], "name": "CHAR", "match": "CHAR", "type": "integer", "syntaxstring": "CHAR (integer) str (string) index (integer)", "uniquename": "v_CHAR", "evalcost": {"default": 0}, "implementation": "caosVM::v_CHAR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_CHAR": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Sets the character at position 'index' of the given string.\nIndexes start at 1.\n", "arguments": [{"name": "string", "type": "variable"}, {"name": "index", "type": "integer"}, {"name": "character", "type": "integer"}], "name": "CHAR", "match": "CHAR", "type": "command", "syntaxstring": "CHAR (command) string (variable) index (integer) character (integer)", "uniquename": "c_CHAR", "evalcost": {"default": 1}, "implementation": "caosVM::c_CHAR", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_ITOF": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Converts the given integer to a float.\n", "arguments": [{"name": "number", "type": "integer"}], "name": "ITOF", "match": "ITOF", "type": "float", "syntaxstring": "ITOF (float) number (integer)", "uniquename": "v_ITOF", "evalcost": {"default": 0}, "implementation": "caosVM::v_ITOF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_FTOI": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Converts the given float to an integer, by rounding.\n", "arguments": [{"name": "number", "type": "float"}], "name": "FTOI", "match": "FTOI", "type": "integer", "syntaxstring": "FTOI (integer) number (float)", "uniquename": "v_FTOI", "evalcost": {"default": 0}, "implementation": "caosVM::v_FTOI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_STRL": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the length in characters of the given string.\n", "arguments": [{"name": "string", "type": "string"}], "name": "STRL", "match": "STRL", "type": "integer", "syntaxstring": "STRL (integer) string (string)", "uniquename": "v_STRL", "evalcost": {"default": 0}, "implementation": "caosVM::v_STRL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_READ": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the value of the string at 'offset' inside the given catalogue tag.\nOffsets start at zero. Throws an error if tag doesn't exist.\n", "arguments": [{"name": "tag", "type": "string"}, {"name": "offset", "type": "integer"}], "name": "READ", "match": "READ", "type": "string", "syntaxstring": "READ (string) tag (string) offset (integer)", "uniquename": "v_READ", "evalcost": {"default": 0}, "implementation": "caosVM::v_READ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_REAQ": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns 1 if the specified catalogue tag exists, or 0 otherwise.\n", "arguments": [{"name": "tag", "type": "string"}], "name": "REAQ", "match": "REAQ", "type": "integer", "syntaxstring": "REAQ (integer) tag (string)", "uniquename": "v_REAQ", "evalcost": {"default": 0}, "implementation": "caosVM::v_REAQ", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_CATA": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the agent category of the TARG agent.\n", "arguments": [], "name": "CATA", "match": "CATA", "type": "integer", "syntaxstring": "CATA (integer)", "uniquename": "v_CATA", "evalcost": {"default": 0}, "implementation": "caosVM::v_CATA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_CATI": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the agent category for the given family/genus/species.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "CATI", "match": "CATI", "type": "integer", "syntaxstring": "CATI (integer) family (integer) genus (integer) species (integer)", "uniquename": "v_CATI", "evalcost": {"default": 0}, "implementation": "caosVM::v_CATI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_CATX": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns a string containing the name of the given category.\n", "arguments": [{"name": "category_id", "type": "integer"}], "name": "CATX", "match": "CATX", "type": "string", "syntaxstring": "CATX (string) category_id (integer)", "uniquename": "v_CATX", "evalcost": {"default": 0}, "implementation": "caosVM::v_CATX", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_CATO": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Sets the agent category of the TARG agent. If the specified category is -1, sets the category based on the family/genus/species of the agent (see CATI).\n", "arguments": [{"name": "category_id", "type": "integer"}], "name": "CATO", "match": "CATO", "type": "command", "syntaxstring": "CATO (command) category_id (integer)", "uniquename": "c_CATO", "evalcost": {"default": 1}, "implementation": "caosVM::c_CATO", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_WILD": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Searches for a catalogue tag starting with 'tag' and matching the given\nfamily/genus/species.  For instance, 'Agent Help 2 3 4' where family is 2,\ngenus is 3 and species is 4.  If it doesn't find it, it sets the minor value\nto 0 repeatedly until it either finds one, or discovers 'tag 0 0 0' doesn't\nexist, at which point an error is thrown.  If it does find a suitable one, it\nreturns the string at offset inside the tag. See READ.\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "tag", "type": "string"}, {"name": "offset", "type": "integer"}], "name": "WILD", "match": "WILD", "type": "string", "syntaxstring": "WILD (string) family (integer) genus (integer) species (integer) tag (string) offset (integer)", "uniquename": "v_WILD", "evalcost": {"default": 0}, "implementation": "caosVM::v_WILD", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "v_NAME": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Named, agent-local variables (like OVxx) in the TARG agent.\n", "arguments": [{"name": "name", "type": "anything"}], "name": "NAME", "match": "NAME", "type": "variable", "syntaxstring": "NAME (variable) name (anything)", "uniquename": "v_NAME", "evalcost": {"default": 0}, "implementation": "caosVM::v_NAME", "status": "maybe", "saveimpl": "caosVM::s_NAME", "stackdelta": 0}, "v_MAME": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Like NAME variables, except for OWNR rather than TARG.\n", "arguments": [{"name": "name", "type": "anything"}], "name": "MAME", "match": "MAME", "type": "variable", "syntaxstring": "MAME (variable) name (anything)", "uniquename": "v_MAME", "evalcost": {"default": 0}, "implementation": "caosVM::v_MAME", "status": "maybe", "saveimpl": "caosVM::s_MAME", "stackdelta": 0}, "v_SUBS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the text in a string starting at 'start' into the string (starting at 1), and with 'count' characters.\n", "arguments": [{"name": "value", "type": "string"}, {"name": "start", "type": "integer"}, {"name": "count", "type": "integer"}], "name": "SUBS", "match": "SUBS", "type": "string", "syntaxstring": "SUBS (string) value (string) start (integer) count (integer)", "uniquename": "v_SUBS", "evalcost": {"default": 0}, "implementation": "caosVM::v_SUBS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_STOI": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the provided string as an integer, or 0 if it can't be converted.\n", "arguments": [{"name": "string", "type": "string"}], "name": "STOI", "match": "STOI", "type": "integer", "syntaxstring": "STOI (integer) string (string)", "uniquename": "v_STOI", "evalcost": {"default": 0}, "implementation": "caosVM::v_STOI", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_STOF": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Returns the provided string as a float, or 0 if it can't be converted.\n", "arguments": [{"name": "string", "type": "string"}], "name": "STOF", "match": "STOF", "type": "float", "syntaxstring": "STOF (float) string (string)", "uniquename": "v_STOF", "evalcost": {"default": 0}, "implementation": "caosVM::v_STOF", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_LOWA": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Return a lower-cased version of a string.\n", "arguments": [{"name": "string", "type": "string"}], "name": "LOWA", "match": "LOWA", "type": "string", "syntaxstring": "LOWA (string) string (string)", "uniquename": "v_LOWA", "evalcost": {"default": 0}, "implementation": "caosVM::v_LOWA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_UPPA": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Return an upper-cased version of a string.\n", "arguments": [{"name": "string", "type": "string"}], "name": "UPPA", "match": "UPPA", "type": "string", "syntaxstring": "UPPA (string) string (string)", "uniquename": "v_UPPA", "evalcost": {"default": 0}, "implementation": "caosVM::v_UPPA", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_SINS": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Searches for an occurance of 'searchstring' inside 'string', starting at the given index inside 'string' (first character is 1).\nThe index of the 'searchstring' inside the string is returned, or -1 if the searchstring wasn't found.\n", "arguments": [{"name": "string", "type": "string"}, {"name": "index", "type": "integer"}, {"name": "searchstring", "type": "string"}], "name": "SINS", "match": "SINS", "type": "integer", "syntaxstring": "SINS (integer) string (string) index (integer) searchstring (string)", "uniquename": "v_SINS", "evalcost": {"default": 0}, "implementation": "caosVM::v_SINS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "v_REAN": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Return number of strings associated with the catalogue tag specified.\n", "arguments": [{"name": "tag", "type": "string"}], "name": "REAN", "match": "REAN", "type": "integer", "syntaxstring": "REAN (integer) tag (string)", "uniquename": "v_REAN", "evalcost": {"default": 0}, "implementation": "caosVM::v_REAN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DELN": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Delete the specified NAME variable on the target agent.\n", "arguments": [{"name": "name", "type": "anything"}], "name": "DELN", "match": "DELN", "type": "command", "syntaxstring": "DELN (command) name (anything)", "uniquename": "c_DELN", "evalcost": {"default": 1}, "implementation": "caosVM::c_DELN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_GAMN": {"filename": "caosVM_variables.cpp", "category": "variables", "arguments": [{"name": "previous", "type": "string"}], "name": "GAMN", "match": "GAMN", "type": "string", "syntaxstring": "GAMN (string) previous (string)", "uniquename": "v_GAMN", "evalcost": {"default": 0}, "implementation": "caosVM::v_GAMN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_NAMN": {"filename": "caosVM_variables.cpp", "category": "variables", "arguments": [{"name": "previous", "type": "variable"}], "name": "NAMN", "match": "NAMN", "type": "command", "syntaxstring": "NAMN (command) previous (variable)", "uniquename": "c_NAMN", "evalcost": {"default": 1}, "implementation": "caosVM::c_NAMN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_POWV": {"filename": "caosVM_variables.cpp", "category": "variables", "description": "Raises value to the exponent power, and saves the result back in value.\nResults are undefined if value is negative.\n\nOpenc2e-only command\n", "arguments": [{"name": "value", "type": "variable"}, {"name": "exponent", "type": "decimal"}], "name": "POWV", "match": "POWV", "type": "command", "syntaxstring": "POWV (command) value (variable) exponent (decimal)", "uniquename": "c_POWV", "evalcost": {"default": 1}, "implementation": "caosVM::c_POWV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_VEC_MAKE": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Creates and returns a vector with the given components.\n\nOpenc2e-only command\n", "arguments": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "name": "VEC: MAKE", "match": "MAKE", "type": "vector", "syntaxstring": "VEC: MAKE (vector) x (float) y (float)", "uniquename": "v_VEC_MAKE", "namespace": "vec:", "evalcost": {"default": 0}, "implementation": "caosVM::v_VEC_MAKE", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_VEC_GETC": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Extracts the components of vector vec and places them in x and y.\n\nOpenc2e-only command\n", "arguments": [{"name": "vec", "type": "vector"}, {"name": "x", "type": "variable"}, {"name": "y", "type": "variable"}], "name": "VEC: GETC", "match": "GETC", "type": "command", "syntaxstring": "VEC: GETC (command) vec (vector) x (variable) y (variable)", "uniquename": "c_VEC_GETC", "namespace": "vec:", "evalcost": {"default": 1}, "implementation": "caosVM::c_VEC_GETC", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_VEC_ANGL": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Find and return the angle from the X-axis of the given vector.\nThis is computed using atan(y/x) if X is nonzero, and a hard-coded\nreturn if X is nonzero. If the input vector is the null vector (0,0),\nzero will be returned.\n\nThe returned angle is in degrees, and in the range -180 to 180 degrees.\n\nOpenc2e-only command.\n", "arguments": [{"name": "vec", "type": "vector"}], "name": "VEC: ANGL", "match": "ANGL", "type": "float", "syntaxstring": "VEC: ANGL (float) vec (vector)", "uniquename": "v_VEC_ANGL", "namespace": "vec:", "evalcost": {"default": 0}, "implementation": "caosVM::v_VEC_ANGL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_VEC_SUBV": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Subtracts vec2 from vec1 and stores the result in vec1.\n\nOpenc2e-only command.\n", "arguments": [{"name": "vec1", "type": "variable"}, {"name": "vec2", "type": "vector"}], "name": "VEC: SUBV", "match": "SUBV", "type": "command", "syntaxstring": "VEC: SUBV (command) vec1 (variable) vec2 (vector)", "uniquename": "c_VEC_SUBV", "namespace": "vec:", "evalcost": {"default": 1}, "implementation": "caosVM::c_VEC_SUBV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_VEC_ADDV": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Adds vec1 to vec2 and stores the result in vec1.\n\nOpenc2e-only command.\n", "arguments": [{"name": "vec1", "type": "variable"}, {"name": "vec2", "type": "vector"}], "name": "VEC: ADDV", "match": "ADDV", "type": "command", "syntaxstring": "VEC: ADDV (command) vec1 (variable) vec2 (vector)", "uniquename": "c_VEC_ADDV", "namespace": "vec:", "evalcost": {"default": 1}, "implementation": "caosVM::c_VEC_ADDV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_VEC_MULV": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Multiplies the magnitude of the vector vec by mag, and stores the result\nin vec.\n\nOpenc2e-only command\n", "arguments": [{"name": "vec", "type": "variable"}, {"name": "mag", "type": "decimal"}], "name": "VEC: MULV", "match": "MULV", "type": "command", "syntaxstring": "VEC: MULV (command) vec (variable) mag (decimal)", "uniquename": "c_VEC_MULV", "namespace": "vec:", "evalcost": {"default": 1}, "implementation": "caosVM::c_VEC_MULV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_VEC_UNIT": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Constructs and returns a unit vector with angle angle.\n\nOpenc2e-only command,\n", "arguments": [{"name": "angle", "type": "decimal"}], "name": "VEC: UNIT", "match": "UNIT", "type": "vector", "syntaxstring": "VEC: UNIT (vector) angle (decimal)", "uniquename": "v_VEC_UNIT", "namespace": "vec:", "evalcost": {"default": 0}, "implementation": "caosVM::v_VEC_UNIT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_VEC_NULL": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Returns the nullary (0,0) vector.\n\nOpenc2e-only command\n", "arguments": [], "name": "VEC: NULL", "match": "NULL", "type": "vector", "syntaxstring": "VEC: NULL (vector)", "uniquename": "v_VEC_NULL", "namespace": "vec:", "evalcost": {"default": 0}, "implementation": "caosVM::v_VEC_NULL", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_VEC_MAGN": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Returns the magnitude of the passed vector.\n\nOpenc2e-only command.\n", "arguments": [{"name": "vec", "type": "vector"}], "name": "VEC: MAGN", "match": "MAGN", "type": "float", "syntaxstring": "VEC: MAGN (float) vec (vector)", "uniquename": "v_VEC_MAGN", "namespace": "vec:", "evalcost": {"default": 0}, "implementation": "caosVM::v_VEC_MAGN", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_VEC_SETV": {"filename": "caosVM_vectors.cpp", "category": "vectors", "description": "Sets the variable passed in dest to the vector in src\n\nOpenc2e-only command\n", "arguments": [{"name": "dest", "type": "variable"}, {"name": "src", "type": "vector"}], "name": "VEC: SETV", "match": "SETV", "type": "command", "syntaxstring": "VEC: SETV (command) dest (variable) src (vector)", "uniquename": "c_VEC_SETV", "namespace": "vec:", "evalcost": {"default": 1}, "implementation": "caosVM::c_VEC_SETV", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_CABW": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [{"name": "cap", "type": "integer"}], "name": "CABW", "match": "CABW", "type": "command", "syntaxstring": "CABW (command) cap (integer)", "uniquename": "c_CABW", "evalcost": {"default": 1}, "implementation": "caosVM::c_CABW", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_GPAS": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "description": "pick up all nearby agents matching classifier, as passengers to target vehicle\noptions = 0 to pick up based on agent bounding rect, or 1 to pick up based on cabin rect\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}, {"name": "options", "type": "integer"}], "name": "GPAS", "match": "GPAS", "type": "command", "syntaxstring": "GPAS (command) family (integer) genus (integer) species (integer) options (integer)", "uniquename": "c_GPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_GPAS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -4}, "c_DPAS": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "description": "drop all agents matching classifier from target vehicle\n", "arguments": [{"name": "family", "type": "integer"}, {"name": "genus", "type": "integer"}, {"name": "species", "type": "integer"}], "name": "DPAS", "match": "DPAS", "type": "command", "syntaxstring": "DPAS (command) family (integer) genus (integer) species (integer)", "uniquename": "c_DPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_DPAS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -3}, "c_CABP": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [{"name": "plane", "type": "integer"}], "name": "CABP", "match": "CABP", "type": "command", "syntaxstring": "CABP (command) plane (integer)", "uniquename": "c_CABP", "evalcost": {"default": 1}, "implementation": "caosVM::c_CABP", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_CABV": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [{"name": "room_id", "type": "integer"}], "name": "CABV", "match": "CABV", "type": "command", "syntaxstring": "CABV (command) room_id (integer)", "uniquename": "c_CABV", "evalcost": {"default": 1}, "implementation": "caosVM::c_CABV", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_CABV": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [], "name": "CABV", "match": "CABV", "type": "integer", "syntaxstring": "CABV (integer)", "uniquename": "v_CABV", "evalcost": {"default": 0}, "implementation": "caosVM::v_CABV", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_RPAS": {"filename": "caosVM_vehicles.cpp", "category": "vehicles", "arguments": [{"name": "vehicle", "type": "agent"}, {"name": "passenger", "type": "agent"}], "name": "RPAS", "match": "RPAS", "type": "command", "syntaxstring": "RPAS (command) vehicle (agent) passenger (agent)", "uniquename": "c_RPAS", "evalcost": {"default": 1}, "implementation": "caosVM::c_RPAS", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -2}, "c_LOAD": {"filename": "caosVM_world.cpp", "category": "world", "arguments": [{"name": "worldname", "type": "string"}], "name": "LOAD", "match": "LOAD", "type": "command", "syntaxstring": "LOAD (command) worldname (string)", "uniquename": "c_LOAD", "evalcost": {"default": 1}, "implementation": "caosVM::c_LOAD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "c_SAVE": {"filename": "caosVM_world.cpp", "category": "world", "description": "Save the world at the start of the next tick. Beware; if you don't put this\nin an INST, it might save directly after your SAVE call (meaning upon loading,\nthe script will execute the next instruction, often QUIT or LOAD, which is\nbad).\n", "arguments": [], "name": "SAVE", "match": "SAVE", "type": "command", "syntaxstring": "SAVE (command)", "uniquename": "c_SAVE", "evalcost": {"default": 1}, "implementation": "caosVM::c_SAVE", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_QUIT": {"filename": "caosVM_world.cpp", "category": "world", "description": "Quit the game engine at the start of the nexttick\n", "arguments": [], "name": "QUIT", "match": "QUIT", "type": "command", "syntaxstring": "QUIT (command)", "uniquename": "c_QUIT", "evalcost": {"default": 1}, "implementation": "caosVM::c_QUIT", "status": "maybe", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_WNAM": {"filename": "caosVM_world.cpp", "category": "world", "description": "Returns the name of the current world.\n", "arguments": [], "name": "WNAM", "match": "WNAM", "type": "string", "syntaxstring": "WNAM (string)", "uniquename": "v_WNAM", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNAM", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "v_WUID": {"filename": "caosVM_world.cpp", "category": "world", "description": "Returns the unique identifier (moniker?) of the current world.\n", "arguments": [], "name": "WUID", "match": "WUID", "type": "string", "syntaxstring": "WUID (string)", "uniquename": "v_WUID", "evalcost": {"default": 0}, "implementation": "caosVM::v_WUID", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_WTNT": {"filename": "caosVM_world.cpp", "category": "world", "description": "Sets an index in the mysterious global tint table to have the specified values. No, we have no idea what that means either.\n", "arguments": [{"name": "index", "type": "integer"}, {"name": "red", "type": "integer"}, {"name": "green", "type": "integer"}, {"name": "blue", "type": "integer"}, {"name": "rotation", "type": "integer"}, {"name": "swap", "type": "integer"}], "name": "WTNT", "match": "WTNT", "type": "command", "syntaxstring": "WTNT (command) index (integer) red (integer) green (integer) blue (integer) rotation (integer) swap (integer)", "uniquename": "c_WTNT", "evalcost": {"default": 1}, "implementation": "caosVM::c_WTNT", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -6}, "v_NWLD": {"filename": "caosVM_world.cpp", "category": "world", "arguments": [], "name": "NWLD", "match": "NWLD", "type": "integer", "syntaxstring": "NWLD (integer)", "uniquename": "v_NWLD", "evalcost": {"default": 0}, "implementation": "caosVM::v_NWLD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 1}, "c_WRLD": {"filename": "caosVM_world.cpp", "category": "world", "description": "Create a new world directory to prepare for the creation of the specified world.\n", "arguments": [{"name": "name", "type": "string"}], "name": "WRLD", "match": "WRLD", "type": "command", "syntaxstring": "WRLD (command) name (string)", "uniquename": "c_WRLD", "evalcost": {"default": 1}, "implementation": "caosVM::c_WRLD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_WRLD": {"filename": "caosVM_world.cpp", "category": "world", "description": "Return the name of the specified world (zero-indexed, see NWLD).\n", "arguments": [{"name": "world", "type": "integer"}], "name": "WRLD", "match": "WRLD", "type": "string", "syntaxstring": "WRLD (string) world (integer)", "uniquename": "v_WRLD", "evalcost": {"default": 0}, "implementation": "caosVM::v_WRLD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_PSWD": {"filename": "caosVM_world.cpp", "category": "world", "arguments": [{"name": "password", "type": "string"}], "name": "PSWD", "match": "PSWD", "type": "command", "syntaxstring": "PSWD (command) password (string)", "uniquename": "c_PSWD", "evalcost": {"default": 1}, "implementation": "caosVM::c_PSWD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}, "v_PSWD": {"filename": "caosVM_world.cpp", "category": "world", "description": "Return the password for the specified world (zero-indexed, see NWLD), or an empty string for no password.\n", "arguments": [{"name": "world", "type": "integer"}], "name": "PSWD", "match": "PSWD", "type": "string", "syntaxstring": "PSWD (string) world (integer)", "uniquename": "v_PSWD", "evalcost": {"default": 0}, "implementation": "caosVM::v_PSWD", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "v_WNTI": {"filename": "caosVM_world.cpp", "category": "world", "description": "Return the world identifier for the specified world name, or -1 if it doesn't exist.\n", "arguments": [{"name": "name", "type": "string"}], "name": "WNTI", "match": "WNTI", "type": "integer", "syntaxstring": "WNTI (integer) name (string)", "uniquename": "v_WNTI", "evalcost": {"default": 0}, "implementation": "caosVM::v_WNTI", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": 0}, "c_DELW": {"filename": "caosVM_world.cpp", "category": "world", "description": "Delete the specified world directory and all contents.\n", "arguments": [{"name": "name", "type": "string"}], "name": "DELW", "match": "DELW", "type": "command", "syntaxstring": "DELW (command) name (string)", "uniquename": "c_DELW", "evalcost": {"default": 1}, "implementation": "caosVM::c_DELW", "status": "stub", "saveimpl": "caosVM::dummy_cmd", "stackdelta": -1}}}}
